### YamlMime:ManagedReference
items:
- uid: Cobilas.Collections.ArrayManipulation
  commentId: T:Cobilas.Collections.ArrayManipulation
  id: ArrayManipulation
  parent: Cobilas.Collections
  children:
  - Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[])
  - Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[]@)
  - Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[])
  - Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[])
  - Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[]@)
  - Cobilas.Collections.ArrayManipulation.ArrayLength(System.Collections.ICollection)
  - Cobilas.Collections.ArrayManipulation.ArrayLongLength(Cobilas.Collections.ILongCollection)
  - Cobilas.Collections.ArrayManipulation.ArrayLongLength(System.Array)
  - Cobilas.Collections.ArrayManipulation.ClearArray(System.Array)
  - Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int32,System.Int32,``0[]@)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int64,System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(``0[]@)
  - Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int32,System.Int32,``0[]@)
  - Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int64,System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.ClearArray``1(``0[]@)
  - Cobilas.Collections.ArrayManipulation.ConvertAll``2(``0[],System.Converter{``0,``1})
  - Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array)
  - Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int32)
  - Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int64)
  - Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.EmpytArray(Cobilas.Collections.ILongCollection)
  - Cobilas.Collections.ArrayManipulation.EmpytArray(System.Collections.ICollection)
  - Cobilas.Collections.ArrayManipulation.Exists``1(``0,``0[])
  - Cobilas.Collections.ArrayManipulation.Exists``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindAll``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.FindLast``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.Find``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@)
  - Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@,System.Int64@)
  - Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@)
  - Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@,System.Int32@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@,System.Int64@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@,System.Int32@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@,System.Int32@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@)
  - Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@,System.Int64@)
  - Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array)
  - Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32)
  - Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64)
  - Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[])
  - Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[])
  - Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[])
  - Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(Cobilas.Collections.ILongList)
  - Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(System.Collections.IList)
  - Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(Cobilas.Collections.ILongList)
  - Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(System.Collections.IList)
  - Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(Cobilas.Collections.ILongCollection)
  - Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(System.Collections.ICollection)
  - Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array)
  - Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32)
  - Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64)
  - Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.LongClearArray(System.Array)
  - Cobilas.Collections.ArrayManipulation.LongClearArraySafe(System.Array)
  - Cobilas.Collections.ArrayManipulation.LongClearArraySafe``1(``0[]@)
  - Cobilas.Collections.ArrayManipulation.LongClearArray``1(``0[]@)
  - Cobilas.Collections.ArrayManipulation.LongConvertAll``2(``0[],System.Converter{``0,``1})
  - Cobilas.Collections.ArrayManipulation.LongFindIndex``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.LongFindLastIndex``1(``0[],System.Predicate{``0})
  - Cobilas.Collections.ArrayManipulation.LongIndexOf(System.Object,System.Array)
  - Cobilas.Collections.ArrayManipulation.LongLastIndexOf(System.Object,System.Array)
  - Cobilas.Collections.ArrayManipulation.LongReverse(System.Array)
  - Cobilas.Collections.ArrayManipulation.ReadOnlySafe``1(``0[])
  - Cobilas.Collections.ArrayManipulation.ReadOnly``1(``0[])
  - Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[])
  - Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[])
  - Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[])
  - Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[]@)
  - Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int32)
  - Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int64)
  - Cobilas.Collections.ArrayManipulation.Reverse(System.Array)
  - Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int32,System.Int32)
  - Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int64,System.Int64)
  - Cobilas.Collections.ArrayManipulation.SeparateList``1(``0[],System.Int64,``0[]@,``0[]@)
  - Cobilas.Collections.ArrayManipulation.TakeStretch``1(System.Int64,System.Int64,``0[])
  langs:
  - csharp
  - vb
  name: ArrayManipulation
  nameWithType: ArrayManipulation
  fullName: Cobilas.Collections.ArrayManipulation
  type: Class
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ArrayManipulation
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 8
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array manipulation class.
  example: []
  syntax:
    content: public static class ArrayManipulation
    content.vb: Public Module ArrayManipulation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[])
  id: Insert``1(``0[],System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(T[]?, long, T[]?)
  nameWithType: ArrayManipulation.Insert<T>(T[]?, long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(T[]?, long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 18
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static T[]? Insert<T>(T[]? itens, long index, T[]? list)
    parameters:
    - id: itens
      type: '{T}[]'
      description: The items that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Insert(Of T)(itens As T(), index As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(T(), Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(T(), Long, T())
  name.vb: Insert(Of T)(T(), Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[])
  id: Insert``1(``0,System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(T?, long, T[]?)
  nameWithType: ArrayManipulation.Insert<T>(T?, long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(T?, long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 36
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static T[]? Insert<T>(T? item, long index, T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Insert(Of T)(item As T, index As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(T, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(T, Long, T())
  name.vb: Insert(Of T)(T, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[])
  id: Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(IEnumerable<T>?, long, T[]?)
  nameWithType: ArrayManipulation.Insert<T>(IEnumerable<T>?, long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(System.Collections.Generic.IEnumerable<T>?, long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 46
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static T[]? Insert<T>(IEnumerable<T>? collection, long index, T[]? list)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Insert(Of T)(collection As IEnumerable(Of T), index As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(IEnumerable(Of T), Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(System.Collections.Generic.IEnumerable(Of T), Long, T())
  name.vb: Insert(Of T)(IEnumerable(Of T), Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[]@)
  id: Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(IEnumerable<T>?, long, ref T[]?)
  nameWithType: ArrayManipulation.Insert<T>(IEnumerable<T>?, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(System.Collections.Generic.IEnumerable<T>?, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 58
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static void Insert<T>(IEnumerable<T>? collection, long index, ref T[]? list)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Insert(Of T)(collection As IEnumerable(Of T), index As Long, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(IEnumerable(Of T), Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(System.Collections.Generic.IEnumerable(Of T), Long, T())
  name.vb: Insert(Of T)(IEnumerable(Of T), Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(``0[],System.Int64,``0[]@)
  id: Insert``1(``0[],System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(T[]?, long, ref T[]?)
  nameWithType: ArrayManipulation.Insert<T>(T[]?, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(T[]?, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 66
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static void Insert<T>(T[]? itens, long index, ref T[]? list)
    parameters:
    - id: itens
      type: '{T}[]'
      description: The items that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Insert(Of T)(itens As T(), index As Long, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(T(), Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(T(), Long, T())
  name.vb: Insert(Of T)(T(), Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Insert``1(``0,System.Int64,``0[]@)
  id: Insert``1(``0,System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Insert<T>(T?, long, ref T[]?)
  nameWithType: ArrayManipulation.Insert<T>(T?, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Insert<T>(T?, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Insert
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 74
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Insert a list of items at a given index into a target array.
  example: []
  syntax:
    content: public static void Insert<T>(T? item, long index, ref T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: index
      type: System.Int64
      description: The index of the list where the items will be inserted.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Insert(Of T)(item As T, index As Long, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Insert(Of T)(T, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Insert(Of T)(T, Long, T())
  name.vb: Insert(Of T)(T, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[])
  id: AddNon_Existing``1(``0,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: AddNon_Existing<T>(T?, T[]?)
  nameWithType: ArrayManipulation.AddNon_Existing<T>(T?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.AddNon_Existing<T>(T?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: AddNon_Existing
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 85
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Adds a list of items to the target list.
        <p>The method does not add items that already exist in the target list.</p>
  example: []
  syntax:
    content: public static T[]? AddNon_Existing<T>(T? item, T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
      description: >-
        This way, when adding the same object, the operation will not be performed 
            and the list will be returned without being modified.
    content.vb: Public Shared Function AddNon_Existing(Of T)(item As T, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.AddNon_Existing*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.AddNon_Existing(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.AddNon_Existing(Of T)(T, T())
  name.vb: AddNon_Existing(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.AddNon_Existing``1(``0,``0[]@)
  id: AddNon_Existing``1(``0,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: AddNon_Existing<T>(T?, ref T[]?)
  nameWithType: ArrayManipulation.AddNon_Existing<T>(T?, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.AddNon_Existing<T>(T?, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: AddNon_Existing
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 99
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Adds a list of items to the target list.
        <p>The method does not add items that already exist in the target list.</p>
  example: []
  syntax:
    content: public static void AddNon_Existing<T>(T? item, ref T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub AddNon_Existing(Of T)(item As T, list As T())
  overload: Cobilas.Collections.ArrayManipulation.AddNon_Existing*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.AddNon_Existing(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.AddNon_Existing(Of T)(T, T())
  name.vb: AddNon_Existing(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[])
  id: Add``1(``0[],``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(T[]?, T[]?)
  nameWithType: ArrayManipulation.Add<T>(T[]?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(T[]?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 106
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static T[]? Add<T>(T[]? itens, T[]? list)
    parameters:
    - id: itens
      type: '{T}[]'
      description: The items that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Add(Of T)(itens As T(), list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(T(), T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(T(), T())
  name.vb: Add(Of T)(T(), T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Add``1(System.Collections.Generic.IEnumerable{``0},``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(IEnumerable<T>?, T[]?)
  nameWithType: ArrayManipulation.Add<T>(IEnumerable<T>?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(System.Collections.Generic.IEnumerable<T>?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 113
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static T[]? Add<T>(IEnumerable<T>? collection, T[]? list)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Add(Of T)(collection As IEnumerable(Of T), list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(IEnumerable(Of T), T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(System.Collections.Generic.IEnumerable(Of T), T())
  name.vb: Add(Of T)(IEnumerable(Of T), T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(System.Collections.Generic.IEnumerable{``0},``0[]@)
  id: Add``1(System.Collections.Generic.IEnumerable{``0},``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(IEnumerable<T>?, ref T[]?)
  nameWithType: ArrayManipulation.Add<T>(IEnumerable<T>?, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(System.Collections.Generic.IEnumerable<T>?, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 120
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static void Add<T>(IEnumerable<T>? collection, ref T[]? list)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Add(Of T)(collection As IEnumerable(Of T), list As T())
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(IEnumerable(Of T), T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(System.Collections.Generic.IEnumerable(Of T), T())
  name.vb: Add(Of T)(IEnumerable(Of T), T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[])
  id: Add``1(``0,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(T?, T[]?)
  nameWithType: ArrayManipulation.Add<T>(T?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(T?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 127
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static T[]? Add<T>(T? item, T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Add(Of T)(item As T, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(T, T())
  name.vb: Add(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(``0[],``0[]@)
  id: Add``1(``0[],``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(T[]?, ref T[]?)
  nameWithType: ArrayManipulation.Add<T>(T[]?, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(T[]?, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 134
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static void Add<T>(T[]? itens, ref T[]? list)
    parameters:
    - id: itens
      type: '{T}[]'
      description: The items that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Add(Of T)(itens As T(), list As T())
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(T(), T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(T(), T())
  name.vb: Add(Of T)(T(), T())
- uid: Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Add``1(``0,``0[]@)
  id: Add``1(``0,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Add<T>(T?, ref T[]?)
  nameWithType: ArrayManipulation.Add<T>(T?, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Add<T>(T?, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Add
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 141
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Adds a list of items to the target list.
  example: []
  syntax:
    content: public static void Add<T>(T? item, ref T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The item that will be inserted into the list.
    - id: list
      type: '{T}[]'
      description: The list that will receive the items.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Add(Of T)(item As T, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.Add(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Add(Of T)(T, T())
  name.vb: Add(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[])
  id: Remove``1(System.Int64,System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(long, long, T[]?)
  nameWithType: ArrayManipulation.Remove<T>(long, long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(long, long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 150
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static T[] Remove<T>(long index, long length, T[]? list)
    parameters:
    - id: index
      type: System.Int64
      description: The target index to remove from the target list.
    - id: length
      type: System.Int64
      description: The length and number of items to remove from the list from the index.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Remove(Of T)(index As Long, length As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(Long, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(Long, Long, T())
  name.vb: Remove(Of T)(Long, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,System.Int64,``0[]@)
  id: Remove``1(System.Int64,System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(long, long, ref T[]?)
  nameWithType: ArrayManipulation.Remove<T>(long, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(long, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 166
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static void Remove<T>(long index, long length, ref T[]? list)
    parameters:
    - id: index
      type: System.Int64
      description: The target index to remove from the target list.
    - id: length
      type: System.Int64
      description: The length and number of items to remove from the list from the index.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Remove(Of T)(index As Long, length As Long, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(Long, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(Long, Long, T())
  name.vb: Remove(Of T)(Long, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[])
  id: Remove``1(System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(long, T[]?)
  nameWithType: ArrayManipulation.Remove<T>(long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 174
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static T[] Remove<T>(long index, T[]? list)
    parameters:
    - id: index
      type: System.Int64
      description: The target index to remove from the target list.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Remove(Of T)(index As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(Long, T())
  name.vb: Remove(Of T)(Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(System.Int64,``0[]@)
  id: Remove``1(System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(long, ref T[]?)
  nameWithType: ArrayManipulation.Remove<T>(long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 182
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static void Remove<T>(long index, ref T[]? list)
    parameters:
    - id: index
      type: System.Int64
      description: The target index to remove from the target list.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Remove(Of T)(index As Long, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(Long, T())
  name.vb: Remove(Of T)(Long, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[])
  id: Remove``1(``0,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(T?, T[]?)
  nameWithType: ArrayManipulation.Remove<T>(T?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(T?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 190
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static T[] Remove<T>(T? item, T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The target item to remove from the target list.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Remove(Of T)(item As T, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(T, T())
  name.vb: Remove(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.Remove``1(``0,``0[]@)
  id: Remove``1(``0,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Remove<T>(T?, ref T[]?)
  nameWithType: ArrayManipulation.Remove<T>(T?, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Remove<T>(T?, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Remove
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 198
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Remove items from the target list.
  example: []
  syntax:
    content: public static void Remove<T>(T? item, ref T[]? list)
    parameters:
    - id: item
      type: '{T}'
      description: The target item to remove from the target list.
    - id: list
      type: '{T}[]'
      description: The list from which items will be removed.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Remove(Of T)(item As T, list As T())
  overload: Cobilas.Collections.ArrayManipulation.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Remove(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Remove(Of T)(T, T())
  name.vb: Remove(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int64,System.Int64)
  id: ClearArray(System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray(Array?, long, long)
  nameWithType: ArrayManipulation.ClearArray(Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 205
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void ClearArray(Array? array, long index, long length)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    content.vb: Public Shared Sub ClearArray(array As Array, index As Long, length As Long)
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array, Long, Long)
  name.vb: ClearArray(Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.LongClearArray(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongClearArray(System.Array)
  id: LongClearArray(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongClearArray(Array?)
  nameWithType: ArrayManipulation.LongClearArray(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArray(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 223
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void LongClearArray(Array? array)
    parameters:
    - id: array
      type: System.Array
    content.vb: Public Shared Sub LongClearArray(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.LongClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongClearArray(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongClearArray(System.Array)
  name.vb: LongClearArray(Array)
- uid: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray(System.Array,System.Int32,System.Int32)
  id: ClearArray(System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray(Array?, int, int)
  nameWithType: ArrayManipulation.ClearArray(Array?, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array?, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 229
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void ClearArray(Array? array, int index, int length)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: Public Shared Sub ClearArray(array As Array, index As Integer, length As Integer)
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array, Integer, Integer)
  name.vb: ClearArray(Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray(System.Array)
  id: ClearArray(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray(Array?)
  nameWithType: ArrayManipulation.ClearArray(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 234
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void ClearArray(Array? array)
    parameters:
    - id: array
      type: System.Array
    content.vb: Public Shared Sub ClearArray(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(System.Array)
  name.vb: ClearArray(Array)
- uid: Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int64,System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int64,System.Int64,``0[]@)
  id: ClearArray``1(System.Int64,System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray<T>(long, long, ref T[]?)
  nameWithType: ArrayManipulation.ClearArray<T>(long, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray<T>(long, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 241
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void ClearArray<T>(long index, long length, ref T[]? array)
    parameters:
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArray(Of T)(index As Long, length As Long, array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Of T)(Long, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(Of T)(Long, Long, T())
  name.vb: ClearArray(Of T)(Long, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.LongClearArray``1(``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongClearArray``1(``0[]@)
  id: LongClearArray``1(``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongClearArray<T>(ref T[]?)
  nameWithType: ArrayManipulation.LongClearArray<T>(ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArray<T>(ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 250
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Array cleaning.
  example: []
  syntax:
    content: public static void LongClearArray<T>(ref T[]? array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LongClearArray(Of T)(array As T())
  overload: Cobilas.Collections.ArrayManipulation.LongClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongClearArray(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongClearArray(Of T)(T())
  name.vb: LongClearArray(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int32,System.Int32,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray``1(System.Int32,System.Int32,``0[]@)
  id: ClearArray``1(System.Int32,System.Int32,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray<T>(int, int, ref T[]?)
  nameWithType: ArrayManipulation.ClearArray<T>(int, int, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray<T>(int, int, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 258
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
  example: []
  syntax:
    content: public static void ClearArray<T>(int index, int length, ref T[]? array)
    parameters:
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArray(Of T)(index As Integer, length As Integer, array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Of T)(Integer, Integer, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(Of T)(Integer, Integer, T())
  name.vb: ClearArray(Of T)(Integer, Integer, T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArray``1(``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArray``1(``0[]@)
  id: ClearArray``1(``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArray<T>(ref T[]?)
  nameWithType: ArrayManipulation.ClearArray<T>(ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray<T>(ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 267
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
  example: []
  syntax:
    content: public static void ClearArray<T>(ref T[]? array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArray(Of T)(array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArray(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArray(Of T)(T())
  name.vb: ClearArray(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int64,System.Int64)
  id: ClearArraySafe(System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe(Array?, long, long)
  nameWithType: ArrayManipulation.ClearArraySafe(Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 276
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe(Array? array, long index, long length)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    content.vb: Public Shared Sub ClearArraySafe(array As Array, index As Long, length As Long)
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array, Long, Long)
  name.vb: ClearArraySafe(Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.LongClearArraySafe(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongClearArraySafe(System.Array)
  id: LongClearArraySafe(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongClearArraySafe(Array?)
  nameWithType: ArrayManipulation.LongClearArraySafe(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArraySafe(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 287
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void LongClearArraySafe(Array? array)
    parameters:
    - id: array
      type: System.Array
    content.vb: Public Shared Sub LongClearArraySafe(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.LongClearArraySafe*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongClearArraySafe(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongClearArraySafe(System.Array)
  name.vb: LongClearArraySafe(Array)
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array,System.Int32,System.Int32)
  id: ClearArraySafe(System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe(Array?, int, int)
  nameWithType: ArrayManipulation.ClearArraySafe(Array?, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array?, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 296
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe(Array? array, int index, int length)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: Public Shared Sub ClearArraySafe(array As Array, index As Integer, length As Integer)
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array, Integer, Integer)
  name.vb: ClearArraySafe(Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array)
  id: ClearArraySafe(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe(Array?)
  nameWithType: ArrayManipulation.ClearArraySafe(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 304
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe(Array? array)
    parameters:
    - id: array
      type: System.Array
    content.vb: Public Shared Sub ClearArraySafe(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(System.Array)
  name.vb: ClearArraySafe(Array)
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int64,System.Int64,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int64,System.Int64,``0[]@)
  id: ClearArraySafe``1(System.Int64,System.Int64,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe<T>(long, long, ref T[]?)
  nameWithType: ArrayManipulation.ClearArraySafe<T>(long, long, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe<T>(long, long, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 316
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe<T>(long index, long length, ref T[]? array)
    parameters:
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArraySafe(Of T)(index As Long, length As Long, array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Of T)(Long, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(Of T)(Long, Long, T())
  name.vb: ClearArraySafe(Of T)(Long, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.LongClearArraySafe``1(``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongClearArraySafe``1(``0[]@)
  id: LongClearArraySafe``1(``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongClearArraySafe<T>(ref T[]?)
  nameWithType: ArrayManipulation.LongClearArraySafe<T>(ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArraySafe<T>(ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 328
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void LongClearArraySafe<T>(ref T[]? array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub LongClearArraySafe(Of T)(array As T())
  overload: Cobilas.Collections.ArrayManipulation.LongClearArraySafe*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongClearArraySafe(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongClearArraySafe(Of T)(T())
  name.vb: LongClearArraySafe(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int32,System.Int32,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(System.Int32,System.Int32,``0[]@)
  id: ClearArraySafe``1(System.Int32,System.Int32,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe<T>(int, int, ref T[]?)
  nameWithType: ArrayManipulation.ClearArraySafe<T>(int, int, ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe<T>(int, int, ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 338
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe<T>(int index, int length, ref T[]? array)
    parameters:
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArraySafe(Of T)(index As Integer, length As Integer, array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Of T)(Integer, Integer, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(Of T)(Integer, Integer, T())
  name.vb: ClearArraySafe(Of T)(Integer, Integer, T())
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ClearArraySafe``1(``0[]@)
  id: ClearArraySafe``1(``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ClearArraySafe<T>(ref T[]?)
  nameWithType: ArrayManipulation.ClearArraySafe<T>(ref T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe<T>(ref T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ClearArraySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 347
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Array cleaning.
        <p>In addition to clearing the array, it returns an empty array.</p>
        <p>It will only perform cleaning if the array is not null.</p>
  example: []
  syntax:
    content: public static void ClearArraySafe<T>(ref T[]? array)
    parameters:
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ClearArraySafe(Of T)(array As T())
  overload: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  nameWithType.vb: ArrayManipulation.ClearArraySafe(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ClearArraySafe(Of T)(T())
  name.vb: ClearArraySafe(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.SeparateList``1(``0[],System.Int64,``0[]@,``0[]@)
  commentId: M:Cobilas.Collections.ArrayManipulation.SeparateList``1(``0[],System.Int64,``0[]@,``0[]@)
  id: SeparateList``1(``0[],System.Int64,``0[]@,``0[]@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: SeparateList<T>(T[]?, long, out T[], out T[])
  nameWithType: ArrayManipulation.SeparateList<T>(T[]?, long, out T[], out T[])
  fullName: Cobilas.Collections.ArrayManipulation.SeparateList<T>(T[]?, long, out T[], out T[])
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: SeparateList
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 360
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Separate a list into two using an index.
  example: []
  syntax:
    content: public static void SeparateList<T>(T[]? array, long separationIndex, out T[] part1, out T[] part2)
    parameters:
    - id: array
      type: '{T}[]'
      description: The list that will be separated.
    - id: separationIndex
      type: System.Int64
      description: The index where the list will be separated.
    - id: part1
      type: '{T}[]'
      description: ''
    - id: part2
      type: '{T}[]'
      description: ''
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SeparateList(Of T)(array As T(), separationIndex As Long, part1 As T(), part2 As T())
  overload: Cobilas.Collections.ArrayManipulation.SeparateList*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.SeparateList(Of T)(T(), Long, T(), T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.SeparateList(Of T)(T(), Long, T(), T())
  name.vb: SeparateList(Of T)(T(), Long, T(), T())
- uid: Cobilas.Collections.ArrayManipulation.TakeStretch``1(System.Int64,System.Int64,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.TakeStretch``1(System.Int64,System.Int64,``0[])
  id: TakeStretch``1(System.Int64,System.Int64,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: TakeStretch<T>(long, long, T[]?)
  nameWithType: ArrayManipulation.TakeStretch<T>(long, long, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.TakeStretch<T>(long, long, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: TakeStretch
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 381
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: This function performs a cut in a list.
  example: []
  syntax:
    content: public static T[] TakeStretch<T>(long index, long length, T[]? list)
    parameters:
    - id: index
      type: System.Int64
      description: The index where the clipping will begin.
    - id: length
      type: System.Int64
      description: The index where the clipping will begin.
    - id: list
      type: '{T}[]'
      description: The list that will be cut.
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
      description: The function will return a list of items that were cut from the original list. The original list will not be modified.
    content.vb: Public Shared Function TakeStretch(Of T)(index As Long, length As Long, list As T()) As T()
  overload: Cobilas.Collections.ArrayManipulation.TakeStretch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: ''
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.TakeStretch(Of T)(Long, Long, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.TakeStretch(Of T)(Long, Long, T())
  name.vb: TakeStretch(Of T)(Long, Long, T())
- uid: Cobilas.Collections.ArrayManipulation.ReadOnly``1(``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.ReadOnly``1(``0[])
  id: ReadOnly``1(``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ReadOnly<T>(T[]?)
  nameWithType: ArrayManipulation.ReadOnly<T>(T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.ReadOnly<T>(T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ReadOnly
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 393
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Turn a list into a read-only list
  example: []
  syntax:
    content: public static ReadOnlyCollection<T> ReadOnly<T>(T[]? list)
    parameters:
    - id: list
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
    content.vb: Public Shared Function [ReadOnly](Of T)(list As T()) As ReadOnlyCollection(Of T)
  overload: Cobilas.Collections.ArrayManipulation.ReadOnly*
  nameWithType.vb: ArrayManipulation.ReadOnly(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ReadOnly(Of T)(T())
  name.vb: ReadOnly(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.ReadOnlySafe``1(``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.ReadOnlySafe``1(``0[])
  id: ReadOnlySafe``1(``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ReadOnlySafe<T>(T[])
  nameWithType: ArrayManipulation.ReadOnlySafe<T>(T[])
  fullName: Cobilas.Collections.ArrayManipulation.ReadOnlySafe<T>(T[])
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ReadOnlySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 400
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Turn a list into a read-only list
  example: []
  syntax:
    content: public static ReadOnlyCollection<T> ReadOnlySafe<T>(T[] list)
    parameters:
    - id: list
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
      description: If the list is null, it will return an empty read-only list.
    content.vb: Public Shared Function ReadOnlySafe(Of T)(list As T()) As ReadOnlyCollection(Of T)
  overload: Cobilas.Collections.ArrayManipulation.ReadOnlySafe*
  nameWithType.vb: ArrayManipulation.ReadOnlySafe(Of T)(T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.ReadOnlySafe(Of T)(T())
  name.vb: ReadOnlySafe(Of T)(T())
- uid: Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64,System.Int64)
  id: IndexOf(System.Object,System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IndexOf(object?, Array?, long, long)
  nameWithType: ArrayManipulation.IndexOf(object?, Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf(object?, System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 406
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static long IndexOf(object? item, Array? array, long index, long length)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    return:
      type: System.Int64
    content.vb: Public Shared Function IndexOf(item As Object, array As Array, index As Long, length As Long) As Long
  overload: Cobilas.Collections.ArrayManipulation.IndexOf*
  nameWithType.vb: ArrayManipulation.IndexOf(Object, Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IndexOf(Object, System.Array, Long, Long)
  name.vb: IndexOf(Object, Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int64)
  id: IndexOf(System.Object,System.Array,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IndexOf(object?, Array?, long)
  nameWithType: ArrayManipulation.IndexOf(object?, Array?, long)
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf(object?, System.Array?, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 447
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static long IndexOf(object? item, Array? array, long index)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    return:
      type: System.Int64
    content.vb: Public Shared Function IndexOf(item As Object, array As Array, index As Long) As Long
  overload: Cobilas.Collections.ArrayManipulation.IndexOf*
  nameWithType.vb: ArrayManipulation.IndexOf(Object, Array, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IndexOf(Object, System.Array, Long)
  name.vb: IndexOf(Object, Array, Long)
- uid: Cobilas.Collections.ArrayManipulation.LongIndexOf(System.Object,System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongIndexOf(System.Object,System.Array)
  id: LongIndexOf(System.Object,System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongIndexOf(object?, Array?)
  nameWithType: ArrayManipulation.LongIndexOf(object?, Array?)
  fullName: Cobilas.Collections.ArrayManipulation.LongIndexOf(object?, System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 466
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static long LongIndexOf(object? item, Array? array)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    return:
      type: System.Int64
    content.vb: Public Shared Function LongIndexOf(item As Object, array As Array) As Long
  overload: Cobilas.Collections.ArrayManipulation.LongIndexOf*
  nameWithType.vb: ArrayManipulation.LongIndexOf(Object, Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongIndexOf(Object, System.Array)
  name.vb: LongIndexOf(Object, Array)
- uid: Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IndexOf(object?, Array?, int, int)
  nameWithType: ArrayManipulation.IndexOf(object?, Array?, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf(object?, System.Array?, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 473
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static int IndexOf(object? item, Array? array, int index, int length)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(item As Object, array As Array, index As Integer, length As Integer) As Integer
  overload: Cobilas.Collections.ArrayManipulation.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: array is null
  nameWithType.vb: ArrayManipulation.IndexOf(Object, Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IndexOf(Object, System.Array, Integer, Integer)
  name.vb: IndexOf(Object, Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array,System.Int32)
  id: IndexOf(System.Object,System.Array,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IndexOf(object?, Array?, int)
  nameWithType: ArrayManipulation.IndexOf(object?, Array?, int)
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf(object?, System.Array?, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 480
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static int IndexOf(object? item, Array? array, int index)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(item As Object, array As Array, index As Integer) As Integer
  overload: Cobilas.Collections.ArrayManipulation.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: array is null
  nameWithType.vb: ArrayManipulation.IndexOf(Object, Array, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IndexOf(Object, System.Array, Integer)
  name.vb: IndexOf(Object, Array, Integer)
- uid: Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.IndexOf(System.Object,System.Array)
  id: IndexOf(System.Object,System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IndexOf(object?, Array?)
  nameWithType: ArrayManipulation.IndexOf(object?, Array?)
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf(object?, System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 487
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array.
  example: []
  syntax:
    content: public static int IndexOf(object? item, Array? array)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(item As Object, array As Array) As Integer
  overload: Cobilas.Collections.ArrayManipulation.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: array is null
  nameWithType.vb: ArrayManipulation.IndexOf(Object, Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IndexOf(Object, System.Array)
  name.vb: IndexOf(Object, Array)
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64,System.Int64)
  id: LastIndexOf(System.Object,System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LastIndexOf(object?, Array?, long, long)
  nameWithType: ArrayManipulation.LastIndexOf(object?, Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf(object?, System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 493
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static long LastIndexOf(object? item, Array? array, long index, long length)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    return:
      type: System.Int64
    content.vb: Public Shared Function LastIndexOf(item As Object, array As Array, index As Long, length As Long) As Long
  overload: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  nameWithType.vb: ArrayManipulation.LastIndexOf(Object, Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LastIndexOf(Object, System.Array, Long, Long)
  name.vb: LastIndexOf(Object, Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int64)
  id: LastIndexOf(System.Object,System.Array,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LastIndexOf(object, Array, long)
  nameWithType: ArrayManipulation.LastIndexOf(object, Array, long)
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf(object, System.Array, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 539
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static long LastIndexOf(object item, Array array, long index)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int64
    return:
      type: System.Int64
    content.vb: Public Shared Function LastIndexOf(item As Object, array As Array, index As Long) As Long
  overload: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  nameWithType.vb: ArrayManipulation.LastIndexOf(Object, Array, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LastIndexOf(Object, System.Array, Long)
  name.vb: LastIndexOf(Object, Array, Long)
- uid: Cobilas.Collections.ArrayManipulation.LongLastIndexOf(System.Object,System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongLastIndexOf(System.Object,System.Array)
  id: LongLastIndexOf(System.Object,System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongLastIndexOf(object, Array)
  nameWithType: ArrayManipulation.LongLastIndexOf(object, Array)
  fullName: Cobilas.Collections.ArrayManipulation.LongLastIndexOf(object, System.Array)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongLastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 555
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static long LongLastIndexOf(object item, Array array)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    return:
      type: System.Int64
    content.vb: Public Shared Function LongLastIndexOf(item As Object, array As Array) As Long
  overload: Cobilas.Collections.ArrayManipulation.LongLastIndexOf*
  nameWithType.vb: ArrayManipulation.LongLastIndexOf(Object, Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongLastIndexOf(Object, System.Array)
  name.vb: LongLastIndexOf(Object, Array)
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LastIndexOf(object, Array, int, int)
  nameWithType: ArrayManipulation.LastIndexOf(object, Array, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf(object, System.Array, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 561
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static int LastIndexOf(object item, Array array, int index, int length)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(item As Object, array As Array, index As Integer, length As Integer) As Integer
  overload: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  nameWithType.vb: ArrayManipulation.LastIndexOf(Object, Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LastIndexOf(Object, System.Array, Integer, Integer)
  name.vb: LastIndexOf(Object, Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array,System.Int32)
  id: LastIndexOf(System.Object,System.Array,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LastIndexOf(object, Array, int)
  nameWithType: ArrayManipulation.LastIndexOf(object, Array, int)
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf(object, System.Array, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 567
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static int LastIndexOf(object item, Array array, int index)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(item As Object, array As Array, index As Integer) As Integer
  overload: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  nameWithType.vb: ArrayManipulation.LastIndexOf(Object, Array, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LastIndexOf(Object, System.Array, Integer)
  name.vb: LastIndexOf(Object, Array, Integer)
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LastIndexOf(System.Object,System.Array)
  id: LastIndexOf(System.Object,System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LastIndexOf(object, Array)
  nameWithType: ArrayManipulation.LastIndexOf(object, Array)
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf(object, System.Array)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LastIndexOf
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 573
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array.
  example: []
  syntax:
    content: public static int LastIndexOf(object item, Array array)
    parameters:
    - id: item
      type: System.Object
    - id: array
      type: System.Array
    return:
      type: System.Int32
    content.vb: Public Shared Function LastIndexOf(item As Object, array As Array) As Integer
  overload: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  nameWithType.vb: ArrayManipulation.LastIndexOf(Object, Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LastIndexOf(Object, System.Array)
  name.vb: LastIndexOf(Object, Array)
- uid: Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], long, long, Predicate<T>?)
  nameWithType: ArrayManipulation.FindIndex<T>(T[], long, long, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex<T>(T[], long, long, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 584
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static long FindIndex<T>(T[] array, long index, long length, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), index As Long, length As Long, match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindIndex(Of T)(T(), Long, Long, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindIndex(Of T)(T(), Long, Long, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Long, Long, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int64,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int64,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[]?, long, Predicate<T>?)
  nameWithType: ArrayManipulation.FindIndex<T>(T[]?, long, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex<T>(T[]?, long, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 618
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static long FindIndex<T>(T[]? array, long index, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int64
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), index As Long, match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindIndex(Of T)(T(), Long, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindIndex(Of T)(T(), Long, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Long, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.LongFindIndex``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.LongFindIndex``1(``0[],System.Predicate{``0})
  id: LongFindIndex``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongFindIndex<T>(T[]?, Predicate<T>?)
  nameWithType: ArrayManipulation.LongFindIndex<T>(T[]?, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.LongFindIndex<T>(T[]?, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongFindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 642
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static long LongFindIndex<T>(T[]? array, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function LongFindIndex(Of T)(array As T(), match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.LongFindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongFindIndex(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongFindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: LongFindIndex(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], int, int, Predicate<T>)
  nameWithType: ArrayManipulation.FindIndex<T>(T[], int, int, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex<T>(T[], int, int, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 650
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static int FindIndex<T>(T[] array, int index, int length, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), index As Integer, length As Integer, match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindIndex*
  nameWithType.vb: ArrayManipulation.FindIndex(Of T)(T(), Integer, Integer, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindIndex(Of T)(T(), Integer, Integer, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Integer, Integer, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], int, Predicate<T>)
  nameWithType: ArrayManipulation.FindIndex<T>(T[], int, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex<T>(T[], int, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 658
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static int FindIndex<T>(T[] array, int index, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), index As Integer, match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindIndex*
  nameWithType.vb: ArrayManipulation.FindIndex(Of T)(T(), Integer, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindIndex(Of T)(T(), Integer, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Integer, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Predicate<T>)
  nameWithType: ArrayManipulation.FindIndex<T>(T[], Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 666
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the specified predicate and returns

    the zero-based index of the first occurrence within the range of elements in the Array that starts

    at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static int FindIndex<T>(T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindIndex*
  nameWithType.vb: ArrayManipulation.FindIndex(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int64,System.Int64,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], long, long, Predicate<T>)
  nameWithType: ArrayManipulation.FindLastIndex<T>(T[], long, long, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex<T>(T[], long, long, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 678
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static long FindLastIndex<T>(T[] array, long index, long length, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int64
    - id: length
      type: System.Int64
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), index As Long, length As Long, match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLastIndex(Of T)(T(), Long, Long, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLastIndex(Of T)(T(), Long, Long, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Long, Long, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int64,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int64,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], long, Predicate<T>)
  nameWithType: ArrayManipulation.FindLastIndex<T>(T[], long, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex<T>(T[], long, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 707
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static long FindLastIndex<T>(T[] array, long index, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int64
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), index As Long, match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLastIndex(Of T)(T(), Long, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLastIndex(Of T)(T(), Long, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Long, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.LongFindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.LongFindLastIndex``1(``0[],System.Predicate{``0})
  id: LongFindLastIndex``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongFindLastIndex<T>(T[], Predicate<T>)
  nameWithType: ArrayManipulation.LongFindLastIndex<T>(T[], Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.LongFindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongFindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 723
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static long LongFindLastIndex<T>(T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function LongFindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Long
  overload: Cobilas.Collections.ArrayManipulation.LongFindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.LongFindLastIndex(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongFindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: LongFindLastIndex(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], int, int, Predicate<T>)
  nameWithType: ArrayManipulation.FindLastIndex<T>(T[], int, int, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex<T>(T[], int, int, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 734
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int index, int length, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), index As Integer, length As Integer, match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLastIndex(Of T)(T(), Integer, Integer, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLastIndex(Of T)(T(), Integer, Integer, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Integer, Integer, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], int, Predicate<T>)
  nameWithType: ArrayManipulation.FindLastIndex<T>(T[], int, Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex<T>(T[], int, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 745
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int index, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: index
      type: System.Int32
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), index As Integer, match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLastIndex(Of T)(T(), Integer, Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLastIndex(Of T)(T(), Integer, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Integer, Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Predicate<T>)
  nameWithType: ArrayManipulation.FindLastIndex<T>(T[], Predicate<T>)
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLastIndex
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 756
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by a

    specified predicate and returns the zero-based index of the last

    occurrence in an Array or part of it.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
  overload: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLastIndex(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindLast<T>(T[]?, Predicate<T>?)
  nameWithType: ArrayManipulation.FindLast<T>(T[]?, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.FindLast<T>(T[]?, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindLast
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 765
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the 

    specified predicate and returns the first occurrence in the entire Array.
  example: []
  syntax:
    content: public static T? FindLast<T>(T[]? array, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T
  overload: Cobilas.Collections.ArrayManipulation.FindLast*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  nameWithType.vb: ArrayManipulation.FindLast(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindLast(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLast(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: FindAll<T>(T[]?, Predicate<T>?)
  nameWithType: ArrayManipulation.FindAll<T>(T[]?, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.FindAll<T>(T[]?, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: FindAll
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 790
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Retrieves all elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static T[]? FindAll<T>(T[]? array, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()
  overload: Cobilas.Collections.ArrayManipulation.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  nameWithType.vb: ArrayManipulation.FindAll(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.FindAll(Of T)(T(), System.Predicate(Of T))
  name.vb: FindAll(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.Find``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Find<T>(T[]?, Predicate<T>?)
  nameWithType: ArrayManipulation.Find<T>(T[]?, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.Find<T>(T[]?, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Find
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 817
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: >-
    Searches for an element that matches the conditions defined by the 

    specified predicate, and returns the first occurrence within the entire Array.
  example: []
  syntax:
    content: public static T? Find<T>(T[]? array, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T
  overload: Cobilas.Collections.ArrayManipulation.Find*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: ''
  nameWithType.vb: ArrayManipulation.Find(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.Find(Of T)(T(), System.Predicate(Of T))
  name.vb: Find(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.Exists``1(``0[],System.Predicate{``0})
  commentId: M:Cobilas.Collections.ArrayManipulation.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Exists<T>(T[]?, Predicate<T>?)
  nameWithType: ArrayManipulation.Exists<T>(T[]?, Predicate<T>?)
  fullName: Cobilas.Collections.ArrayManipulation.Exists<T>(T[]?, System.Predicate<T>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Exists
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 840
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static bool Exists<T>(T[]? array, Predicate<T>? match)
    parameters:
    - id: array
      type: '{T}[]'
    - id: match
      type: System.Predicate{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.Exists*
  nameWithType.vb: ArrayManipulation.Exists(Of T)(T(), Predicate(Of T))
  fullName.vb: Cobilas.Collections.ArrayManipulation.Exists(Of T)(T(), System.Predicate(Of T))
  name.vb: Exists(Of T)(T(), Predicate(Of T))
- uid: Cobilas.Collections.ArrayManipulation.Exists``1(``0,``0[])
  commentId: M:Cobilas.Collections.ArrayManipulation.Exists``1(``0,``0[])
  id: Exists``1(``0,``0[])
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Exists<T>(T?, T[]?)
  nameWithType: ArrayManipulation.Exists<T>(T?, T[]?)
  fullName: Cobilas.Collections.ArrayManipulation.Exists<T>(T?, T[]?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Exists
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 846
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static bool Exists<T>(T? item, T[]? array)
    parameters:
    - id: item
      type: '{T}'
    - id: array
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function Exists(Of T)(item As T, array As T()) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.Exists*
  nameWithType.vb: ArrayManipulation.Exists(Of T)(T, T())
  fullName.vb: Cobilas.Collections.ArrayManipulation.Exists(Of T)(T, T())
  name.vb: Exists(Of T)(T, T())
- uid: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  id: CopyTo(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: CopyTo(Array?, long, Array?, long, long)
  nameWithType: ArrayManipulation.CopyTo(Array?, long, Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array?, long, System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: CopyTo
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 859
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
  example: []
  syntax:
    content: public static void CopyTo(Array? sourceArray, long sourceIndex, Array? destinationArray, long destinationIndex, long length)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: sourceIndex
      type: System.Int64
    - id: destinationArray
      type: System.Array
    - id: destinationIndex
      type: System.Int64
    - id: length
      type: System.Int64
    content.vb: Public Shared Sub CopyTo(sourceArray As Array, sourceIndex As Long, destinationArray As Array, destinationIndex As Long, length As Long)
  overload: Cobilas.Collections.ArrayManipulation.CopyTo*
  nameWithType.vb: ArrayManipulation.CopyTo(Array, Long, Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array, Long, System.Array, Long, Long)
  name.vb: CopyTo(Array, Long, Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: CopyTo(Array?, int, Array?, int, int)
  nameWithType: ArrayManipulation.CopyTo(Array?, int, Array?, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array?, int, System.Array?, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: CopyTo
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 875
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
  example: []
  syntax:
    content: public static void CopyTo(Array? sourceArray, int sourceIndex, Array? destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: sourceIndex
      type: System.Int32
    - id: destinationArray
      type: System.Array
    - id: destinationIndex
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: Public Shared Sub CopyTo(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
  overload: Cobilas.Collections.ArrayManipulation.CopyTo*
  nameWithType.vb: ArrayManipulation.CopyTo(Array, Integer, Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array, Integer, System.Array, Integer, Integer)
  name.vb: CopyTo(Array, Integer, Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int64)
  id: CopyTo(System.Array,System.Array,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: CopyTo(Array?, Array?, long)
  nameWithType: ArrayManipulation.CopyTo(Array?, Array?, long)
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array?, System.Array?, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: CopyTo
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 881
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
  example: []
  syntax:
    content: public static void CopyTo(Array? sourceArray, Array? destinationArray, long length)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: destinationArray
      type: System.Array
    - id: length
      type: System.Int64
    content.vb: Public Shared Sub CopyTo(sourceArray As Array, destinationArray As Array, length As Long)
  overload: Cobilas.Collections.ArrayManipulation.CopyTo*
  nameWithType.vb: ArrayManipulation.CopyTo(Array, Array, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array, System.Array, Long)
  name.vb: CopyTo(Array, Array, Long)
- uid: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array,System.Int32)
  id: CopyTo(System.Array,System.Array,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: CopyTo(Array?, Array?, int)
  nameWithType: ArrayManipulation.CopyTo(Array?, Array?, int)
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array?, System.Array?, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: CopyTo
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 887
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
  example: []
  syntax:
    content: public static void CopyTo(Array? sourceArray, Array? destinationArray, int length)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: destinationArray
      type: System.Array
    - id: length
      type: System.Int32
    content.vb: Public Shared Sub CopyTo(sourceArray As Array, destinationArray As Array, length As Integer)
  overload: Cobilas.Collections.ArrayManipulation.CopyTo*
  nameWithType.vb: ArrayManipulation.CopyTo(Array, Array, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array, System.Array, Integer)
  name.vb: CopyTo(Array, Array, Integer)
- uid: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.CopyTo(System.Array,System.Array)
  id: CopyTo(System.Array,System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: CopyTo(Array?, Array?)
  nameWithType: ArrayManipulation.CopyTo(Array?, Array?)
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array?, System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: CopyTo
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 894
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array.
  example: []
  syntax:
    content: public static void CopyTo(Array? sourceArray, Array? destinationArray)
    parameters:
    - id: sourceArray
      type: System.Array
    - id: destinationArray
      type: System.Array
    content.vb: Public Shared Sub CopyTo(sourceArray As Array, destinationArray As Array)
  overload: Cobilas.Collections.ArrayManipulation.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.CopyTo(Array, Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.CopyTo(System.Array, System.Array)
  name.vb: CopyTo(Array, Array)
- uid: Cobilas.Collections.ArrayManipulation.ConvertAll``2(``0[],System.Converter{``0,``1})
  commentId: M:Cobilas.Collections.ArrayManipulation.ConvertAll``2(``0[],System.Converter{``0,``1})
  id: ConvertAll``2(``0[],System.Converter{``0,``1})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ConvertAll<TInput, TOutput>(TInput[]?, Converter<TInput, TOutput>?)
  nameWithType: ArrayManipulation.ConvertAll<TInput, TOutput>(TInput[]?, Converter<TInput, TOutput>?)
  fullName: Cobilas.Collections.ArrayManipulation.ConvertAll<TInput, TOutput>(TInput[]?, System.Converter<TInput, TOutput>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ConvertAll
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 911
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Converts an array of one type to an array of another type.
  example: []
  syntax:
    content: public static TOutput[] ConvertAll<TInput, TOutput>(TInput[]? array, Converter<TInput, TOutput>? converter)
    parameters:
    - id: array
      type: '{TInput}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to convert to a target type.
    - id: converter
      type: System.Converter{{TInput},{TOutput}}
      description: A <xref href="System.Converter%602" data-throw-if-not-resolved="false"></xref> that converts each element from one type to another type.
    typeParameters:
    - id: TInput
      description: The type of the elements of the source array.
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: '{TOutput}[]'
      description: An array of the target type containing the converted elements from the source array.
    content.vb: Public Shared Function ConvertAll(Of TInput, TOutput)(array As TInput(), converter As Converter(Of TInput, TOutput)) As TOutput()
  overload: Cobilas.Collections.ArrayManipulation.ConvertAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  nameWithType.vb: ArrayManipulation.ConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ConvertAll(Of TInput, TOutput)(TInput(), System.Converter(Of TInput, TOutput))
  name.vb: ConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
- uid: Cobilas.Collections.ArrayManipulation.LongConvertAll``2(``0[],System.Converter{``0,``1})
  commentId: M:Cobilas.Collections.ArrayManipulation.LongConvertAll``2(``0[],System.Converter{``0,``1})
  id: LongConvertAll``2(``0[],System.Converter{``0,``1})
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongConvertAll<TInput, TOutput>(TInput[]?, Converter<TInput, TOutput>?)
  nameWithType: ArrayManipulation.LongConvertAll<TInput, TOutput>(TInput[]?, Converter<TInput, TOutput>?)
  fullName: Cobilas.Collections.ArrayManipulation.LongConvertAll<TInput, TOutput>(TInput[]?, System.Converter<TInput, TOutput>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongConvertAll
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 932
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Converts an array of one type to an array of another type.
  example: []
  syntax:
    content: public static TOutput[] LongConvertAll<TInput, TOutput>(TInput[]? array, Converter<TInput, TOutput>? converter)
    parameters:
    - id: array
      type: '{TInput}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to convert to a target type.
    - id: converter
      type: System.Converter{{TInput},{TOutput}}
      description: A <xref href="System.Converter%602" data-throw-if-not-resolved="false"></xref> that converts each element from one type to another type.
    typeParameters:
    - id: TInput
      description: The type of the elements of the source array.
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: '{TOutput}[]'
      description: An array of the target type containing the converted elements from the source array.
    content.vb: Public Shared Function LongConvertAll(Of TInput, TOutput)(array As TInput(), converter As Converter(Of TInput, TOutput)) As TOutput()
  overload: Cobilas.Collections.ArrayManipulation.LongConvertAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: The array cannot be multi-dimensional.
  nameWithType.vb: ArrayManipulation.LongConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongConvertAll(Of TInput, TOutput)(TInput(), System.Converter(Of TInput, TOutput))
  name.vb: LongConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
- uid: Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Reverse(Array?, int, int)
  nameWithType: ArrayManipulation.Reverse(Array?, int, int)
  fullName: Cobilas.Collections.ArrayManipulation.Reverse(System.Array?, int, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Reverse
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 958
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Reverses the order of the elements in a one-dimensional Array or in a portion of the Array.
  example: []
  syntax:
    content: public static void Reverse(Array? array, int index, int length)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional Array to reverse.
    - id: index
      type: System.Int32
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int32
      description: The number of elements in the section to reverse.
    content.vb: Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)
  overload: Cobilas.Collections.ArrayManipulation.Reverse*
  nameWithType.vb: ArrayManipulation.Reverse(Array, Integer, Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.Reverse(System.Array, Integer, Integer)
  name.vb: Reverse(Array, Integer, Integer)
- uid: Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int64,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.Reverse(System.Array,System.Int64,System.Int64)
  id: Reverse(System.Array,System.Int64,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Reverse(Array?, long, long)
  nameWithType: ArrayManipulation.Reverse(Array?, long, long)
  fullName: Cobilas.Collections.ArrayManipulation.Reverse(System.Array?, long, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Reverse
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 970
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Reverses the order of the elements in a one-dimensional Array or in a portion of the Array.
  example: []
  syntax:
    content: public static void Reverse(Array? array, long index, long length)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional Array to reverse.
    - id: index
      type: System.Int64
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int64
      description: The number of elements in the section to reverse.
    content.vb: Public Shared Sub Reverse(array As Array, index As Long, length As Long)
  overload: Cobilas.Collections.ArrayManipulation.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.RankException
    commentId: T:System.RankException
    description: The array cannot be multi-dimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.Reverse(Array, Long, Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.Reverse(System.Array, Long, Long)
  name.vb: Reverse(Array, Long, Long)
- uid: Cobilas.Collections.ArrayManipulation.Reverse(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Reverse(Array?)
  nameWithType: ArrayManipulation.Reverse(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.Reverse(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Reverse
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1006
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Reverses the order of the elements in a one-dimensional Array or in a portion of the Array.
  example: []
  syntax:
    content: public static void Reverse(Array? array)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional Array to reverse.
    content.vb: Public Shared Sub Reverse(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Occurs when <code>array</code> parameter is null.
  nameWithType.vb: ArrayManipulation.Reverse(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.Reverse(System.Array)
  name.vb: Reverse(Array)
- uid: Cobilas.Collections.ArrayManipulation.LongReverse(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.LongReverse(System.Array)
  id: LongReverse(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: LongReverse(Array?)
  nameWithType: ArrayManipulation.LongReverse(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.LongReverse(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: LongReverse
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1021
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Reverses the order of the elements in a one-dimensional Array or in a portion of the Array.
  example: []
  syntax:
    content: public static void LongReverse(Array? array)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional Array to reverse.
    content.vb: Public Shared Sub LongReverse(array As Array)
  overload: Cobilas.Collections.ArrayManipulation.LongReverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Occurs when <code>array</code> parameter is null.
  nameWithType.vb: ArrayManipulation.LongReverse(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.LongReverse(System.Array)
  name.vb: LongReverse(Array)
- uid: Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int32)
  commentId: M:Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Resize<T>(ref T[]?, int)
  nameWithType: ArrayManipulation.Resize<T>(ref T[]?, int)
  fullName: Cobilas.Collections.ArrayManipulation.Resize<T>(ref T[]?, int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Resize
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1034
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Changes the number of elements of a one-dimensional array to the specified new size.
  example: []
  syntax:
    content: public static void Resize<T>(ref T[]? array, int newSize)
    parameters:
    - id: array
      type: '{T}[]'
    - id: newSize
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Resize(Of T)(array As T(), newSize As Integer)
  overload: Cobilas.Collections.ArrayManipulation.Resize*
  nameWithType.vb: ArrayManipulation.Resize(Of T)(T(), Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.Resize(Of T)(T(), Integer)
  name.vb: Resize(Of T)(T(), Integer)
- uid: Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int64)
  commentId: M:Cobilas.Collections.ArrayManipulation.Resize``1(``0[]@,System.Int64)
  id: Resize``1(``0[]@,System.Int64)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: Resize<T>(ref T[]?, long)
  nameWithType: ArrayManipulation.Resize<T>(ref T[]?, long)
  fullName: Cobilas.Collections.ArrayManipulation.Resize<T>(ref T[]?, long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: Resize
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1041
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Changes the number of elements of a one-dimensional array to the specified new size.
  example: []
  syntax:
    content: public static void Resize<T>(ref T[]? array, long newSize)
    parameters:
    - id: array
      type: '{T}[]'
    - id: newSize
      type: System.Int64
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Resize(Of T)(array As T(), newSize As Long)
  overload: Cobilas.Collections.ArrayManipulation.Resize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>newSize</code> parameter cannot be less than zero.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Occurs when <code>array</code> parameter is null.
  nameWithType.vb: ArrayManipulation.Resize(Of T)(T(), Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.Resize(Of T)(T(), Long)
  name.vb: Resize(Of T)(T(), Long)
- uid: Cobilas.Collections.ArrayManipulation.EmpytArray(System.Collections.ICollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.EmpytArray(System.Collections.ICollection)
  id: EmpytArray(System.Collections.ICollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: EmpytArray(ICollection?)
  nameWithType: ArrayManipulation.EmpytArray(ICollection?)
  fullName: Cobilas.Collections.ArrayManipulation.EmpytArray(System.Collections.ICollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: EmpytArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1068
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is empty or null.
  example: []
  syntax:
    content: public static bool EmpytArray(ICollection? array)
    parameters:
    - id: array
      type: System.Collections.ICollection
    return:
      type: System.Boolean
    content.vb: Public Shared Function EmpytArray(array As ICollection) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.EmpytArray*
  nameWithType.vb: ArrayManipulation.EmpytArray(ICollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.EmpytArray(System.Collections.ICollection)
  name.vb: EmpytArray(ICollection)
- uid: Cobilas.Collections.ArrayManipulation.EmpytArray(Cobilas.Collections.ILongCollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.EmpytArray(Cobilas.Collections.ILongCollection)
  id: EmpytArray(Cobilas.Collections.ILongCollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: EmpytArray(ILongCollection?)
  nameWithType: ArrayManipulation.EmpytArray(ILongCollection?)
  fullName: Cobilas.Collections.ArrayManipulation.EmpytArray(Cobilas.Collections.ILongCollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: EmpytArray
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1074
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is empty or null.
  example: []
  syntax:
    content: public static bool EmpytArray(ILongCollection? array)
    parameters:
    - id: array
      type: Cobilas.Collections.ILongCollection
    return:
      type: System.Boolean
    content.vb: Public Shared Function EmpytArray(array As ILongCollection) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.EmpytArray*
  nameWithType.vb: ArrayManipulation.EmpytArray(ILongCollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.EmpytArray(Cobilas.Collections.ILongCollection)
  name.vb: EmpytArray(ILongCollection)
- uid: Cobilas.Collections.ArrayManipulation.ArrayLength(System.Collections.ICollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.ArrayLength(System.Collections.ICollection)
  id: ArrayLength(System.Collections.ICollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ArrayLength(ICollection?)
  nameWithType: ArrayManipulation.ArrayLength(ICollection?)
  fullName: Cobilas.Collections.ArrayManipulation.ArrayLength(System.Collections.ICollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ArrayLength
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1080
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines the length of a collection.
  example: []
  syntax:
    content: public static int ArrayLength(ICollection? array)
    parameters:
    - id: array
      type: System.Collections.ICollection
    return:
      type: System.Int32
    content.vb: Public Shared Function ArrayLength(array As ICollection) As Integer
  overload: Cobilas.Collections.ArrayManipulation.ArrayLength*
  nameWithType.vb: ArrayManipulation.ArrayLength(ICollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ArrayLength(System.Collections.ICollection)
  name.vb: ArrayLength(ICollection)
- uid: Cobilas.Collections.ArrayManipulation.ArrayLongLength(System.Array)
  commentId: M:Cobilas.Collections.ArrayManipulation.ArrayLongLength(System.Array)
  id: ArrayLongLength(System.Array)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ArrayLongLength(Array?)
  nameWithType: ArrayManipulation.ArrayLongLength(Array?)
  fullName: Cobilas.Collections.ArrayManipulation.ArrayLongLength(System.Array?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ArrayLongLength
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1086
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines the length of an Array.
  example: []
  syntax:
    content: public static long ArrayLongLength(Array? array)
    parameters:
    - id: array
      type: System.Array
    return:
      type: System.Int64
    content.vb: Public Shared Function ArrayLongLength(array As Array) As Long
  overload: Cobilas.Collections.ArrayManipulation.ArrayLongLength*
  nameWithType.vb: ArrayManipulation.ArrayLongLength(Array)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ArrayLongLength(System.Array)
  name.vb: ArrayLongLength(Array)
- uid: Cobilas.Collections.ArrayManipulation.ArrayLongLength(Cobilas.Collections.ILongCollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.ArrayLongLength(Cobilas.Collections.ILongCollection)
  id: ArrayLongLength(Cobilas.Collections.ILongCollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ArrayLongLength(ILongCollection?)
  nameWithType: ArrayManipulation.ArrayLongLength(ILongCollection?)
  fullName: Cobilas.Collections.ArrayManipulation.ArrayLongLength(Cobilas.Collections.ILongCollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ArrayLongLength
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1092
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines the length of an Array.
  example: []
  syntax:
    content: public static long ArrayLongLength(ILongCollection? array)
    parameters:
    - id: array
      type: Cobilas.Collections.ILongCollection
    return:
      type: System.Int64
    content.vb: Public Shared Function ArrayLongLength(array As ILongCollection) As Long
  overload: Cobilas.Collections.ArrayManipulation.ArrayLongLength*
  nameWithType.vb: ArrayManipulation.ArrayLongLength(ILongCollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ArrayLongLength(Cobilas.Collections.ILongCollection)
  name.vb: ArrayLongLength(ILongCollection)
- uid: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(System.Collections.IList)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(System.Collections.IList)
  id: IsReadOnlySafe(System.Collections.IList)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsReadOnlySafe(IList?)
  nameWithType: ArrayManipulation.IsReadOnlySafe(IList?)
  fullName: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(System.Collections.IList?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsReadOnlySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1098
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is read-only.
  example: []
  syntax:
    content: public static bool IsReadOnlySafe(IList? array)
    parameters:
    - id: array
      type: System.Collections.IList
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsReadOnlySafe(array As IList) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe*
  nameWithType.vb: ArrayManipulation.IsReadOnlySafe(IList)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(System.Collections.IList)
  name.vb: IsReadOnlySafe(IList)
- uid: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(Cobilas.Collections.ILongList)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(Cobilas.Collections.ILongList)
  id: IsReadOnlySafe(Cobilas.Collections.ILongList)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsReadOnlySafe(ILongList?)
  nameWithType: ArrayManipulation.IsReadOnlySafe(ILongList?)
  fullName: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(Cobilas.Collections.ILongList?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsReadOnlySafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1104
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is read-only.
  example: []
  syntax:
    content: public static bool IsReadOnlySafe(ILongList? array)
    parameters:
    - id: array
      type: Cobilas.Collections.ILongList
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsReadOnlySafe(array As ILongList) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe*
  nameWithType.vb: ArrayManipulation.IsReadOnlySafe(ILongList)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe(Cobilas.Collections.ILongList)
  name.vb: IsReadOnlySafe(ILongList)
- uid: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(System.Collections.IList)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(System.Collections.IList)
  id: IsFixedSizeSafe(System.Collections.IList)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsFixedSizeSafe(IList?)
  nameWithType: ArrayManipulation.IsFixedSizeSafe(IList?)
  fullName: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(System.Collections.IList?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsFixedSizeSafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1110
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection has a fixed size.
  example: []
  syntax:
    content: public static bool IsFixedSizeSafe(IList? array)
    parameters:
    - id: array
      type: System.Collections.IList
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFixedSizeSafe(array As IList) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe*
  nameWithType.vb: ArrayManipulation.IsFixedSizeSafe(IList)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(System.Collections.IList)
  name.vb: IsFixedSizeSafe(IList)
- uid: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(Cobilas.Collections.ILongList)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(Cobilas.Collections.ILongList)
  id: IsFixedSizeSafe(Cobilas.Collections.ILongList)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsFixedSizeSafe(ILongList?)
  nameWithType: ArrayManipulation.IsFixedSizeSafe(ILongList?)
  fullName: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(Cobilas.Collections.ILongList?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsFixedSizeSafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1116
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection has a fixed size.
  example: []
  syntax:
    content: public static bool IsFixedSizeSafe(ILongList? array)
    parameters:
    - id: array
      type: Cobilas.Collections.ILongList
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFixedSizeSafe(array As ILongList) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe*
  nameWithType.vb: ArrayManipulation.IsFixedSizeSafe(ILongList)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe(Cobilas.Collections.ILongList)
  name.vb: IsFixedSizeSafe(ILongList)
- uid: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(System.Collections.ICollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(System.Collections.ICollection)
  id: IsSynchronizedSafe(System.Collections.ICollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsSynchronizedSafe(ICollection?)
  nameWithType: ArrayManipulation.IsSynchronizedSafe(ICollection?)
  fullName: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(System.Collections.ICollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsSynchronizedSafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1122
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is synchronized.
  example: []
  syntax:
    content: public static bool IsSynchronizedSafe(ICollection? collection)
    parameters:
    - id: collection
      type: System.Collections.ICollection
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSynchronizedSafe(collection As ICollection) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe*
  nameWithType.vb: ArrayManipulation.IsSynchronizedSafe(ICollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(System.Collections.ICollection)
  name.vb: IsSynchronizedSafe(ICollection)
- uid: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(Cobilas.Collections.ILongCollection)
  commentId: M:Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(Cobilas.Collections.ILongCollection)
  id: IsSynchronizedSafe(Cobilas.Collections.ILongCollection)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: IsSynchronizedSafe(ILongCollection?)
  nameWithType: ArrayManipulation.IsSynchronizedSafe(ILongCollection?)
  fullName: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(Cobilas.Collections.ILongCollection?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: IsSynchronizedSafe
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1128
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: Determines whether the collection is synchronized.
  example: []
  syntax:
    content: public static bool IsSynchronizedSafe(ILongCollection? collection)
    parameters:
    - id: collection
      type: Cobilas.Collections.ILongCollection
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSynchronizedSafe(collection As ILongCollection) As Boolean
  overload: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe*
  nameWithType.vb: ArrayManipulation.IsSynchronizedSafe(ILongCollection)
  fullName.vb: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe(Cobilas.Collections.ILongCollection)
  name.vb: IsSynchronizedSafe(ILongCollection)
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@,System.Int64@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@,System.Int64@)
  id: ForSector``1(System.Array,System.Action{``0,System.Int64}@,System.Int64@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(Array?, in Action<T, long>?, in long)
  nameWithType: ArrayManipulation.ForSector<T>(Array?, in Action<T, long>?, in long)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Array?, in System.Action<T, long>?, in long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1137
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(Array? array, in Action<T, long>? action, in long sectorCount)
    parameters:
    - id: array
      type: System.Array
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int64}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int64
      description: The number of sectors to read.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(array As Array, action As Action(Of T, Long), sectorCount As Long)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(Array, Action(Of T, Long), Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Array, System.Action(Of T, Long), Long)
  name.vb: ForSector(Of T)(Array, Action(Of T, Long), Long)
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Array,System.Action{``0,System.Int64}@)
  id: ForSector``1(System.Array,System.Action{``0,System.Int64}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(Array?, in Action<T, long>?)
  nameWithType: ArrayManipulation.ForSector<T>(Array?, in Action<T, long>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Array?, in System.Action<T, long>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1195
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(Array? array, in Action<T, long>? action)
    parameters:
    - id: array
      type: System.Array
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int64}
      description: Action that receives the object and the index of the list.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(array As Array, action As Action(Of T, Long))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(Array, Action(Of T, Long))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Array, System.Action(Of T, Long))
  name.vb: ForSector(Of T)(Array, Action(Of T, Long))
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@,System.Int64@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@,System.Int64@)
  id: ForSector``1(``0[],System.Action{``0,System.Int64}@,System.Int64@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(T[]?, in Action<T, long>?, in long)
  nameWithType: ArrayManipulation.ForSector<T>(T[]?, in Action<T, long>?, in long)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(T[]?, in System.Action<T, long>?, in long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1211
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(T[]? array, in Action<T, long>? action, in long sectorCount)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int64}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int64
      description: The number of sectors to read.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(array As T(), action As Action(Of T, Long), sectorCount As Long)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(T(), Action(Of T, Long), Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(T(), System.Action(Of T, Long), Long)
  name.vb: ForSector(Of T)(T(), Action(Of T, Long), Long)
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(``0[],System.Action{``0,System.Int64}@)
  id: ForSector``1(``0[],System.Action{``0,System.Int64}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(T[]?, in Action<T, long>?)
  nameWithType: ArrayManipulation.ForSector<T>(T[]?, in Action<T, long>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(T[]?, in System.Action<T, long>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1226
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(T[]? array, in Action<T, long>? action)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int64}
      description: Action that receives the object and the index of the list.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(array As T(), action As Action(Of T, Long))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(T(), Action(Of T, Long))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(T(), System.Action(Of T, Long))
  name.vb: ForSector(Of T)(T(), Action(Of T, Long))
- uid: Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@,System.Int64@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@,System.Int64@)
  id: ForSector(System.Array,System.Action{System.Object,System.Int64}@,System.Int64@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector(Array?, in Action<object, long>?, in long)
  nameWithType: ArrayManipulation.ForSector(Array?, in Action<object, long>?, in long)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector(System.Array?, in System.Action<object, long>?, in long)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1242
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector(Array? array, in Action<object, long>? action, in long sectorCount)
    parameters:
    - id: array
      type: System.Array
      description: The array that will be read.
    - id: action
      type: System.Action{System.Object,System.Int64}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int64
      description: The number of sectors to read.
    content.vb: Public Shared Sub ForSector(array As Array, action As Action(Of Object, Long), sectorCount As Long)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Array, Action(Of Object, Long), Long)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(System.Array, System.Action(Of Object, Long), Long)
  name.vb: ForSector(Array, Action(Of Object, Long), Long)
- uid: Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector(System.Array,System.Action{System.Object,System.Int64}@)
  id: ForSector(System.Array,System.Action{System.Object,System.Int64}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector(Array?, in Action<object, long>?)
  nameWithType: ArrayManipulation.ForSector(Array?, in Action<object, long>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector(System.Array?, in System.Action<object, long>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1250
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector(Array? array, in Action<object, long>? action)
    parameters:
    - id: array
      type: System.Array
      description: The array that will be read.
    - id: action
      type: System.Action{System.Object,System.Int64}
      description: Action that receives the object and the index of the list.
    content.vb: Public Shared Sub ForSector(array As Array, action As Action(Of Object, Long))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Array, Action(Of Object, Long))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(System.Array, System.Action(Of Object, Long))
  name.vb: ForSector(Array, Action(Of Object, Long))
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@,System.Int32@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@,System.Int32@)
  id: ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@,System.Int32@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(IList?, in Action<T, int>?, in int)
  nameWithType: ArrayManipulation.ForSector<T>(IList?, in Action<T, int>?, in int)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Collections.IList?, in System.Action<T, int>?, in int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1259
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(IList? list, in Action<T, int>? action, in int sectorCount)
    parameters:
    - id: list
      type: System.Collections.IList
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int32}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int32
      description: The number of sectors to read.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(list As IList, action As Action(Of T, Integer), sectorCount As Integer)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(IList, Action(Of T, Integer), Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Collections.IList, System.Action(Of T, Integer), Integer)
  name.vb: ForSector(Of T)(IList, Action(Of T, Integer), Integer)
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@)
  id: ForSector``1(System.Collections.IList,System.Action{``0,System.Int32}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(IList?, in Action<T, int>?)
  nameWithType: ArrayManipulation.ForSector<T>(IList?, in Action<T, int>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Collections.IList?, in System.Action<T, int>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1309
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(IList? list, in Action<T, int>? action)
    parameters:
    - id: list
      type: System.Collections.IList
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int32}
      description: Action that receives the object and the index of the list.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(list As IList, action As Action(Of T, Integer))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(IList, Action(Of T, Integer))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Collections.IList, System.Action(Of T, Integer))
  name.vb: ForSector(Of T)(IList, Action(Of T, Integer))
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@,System.Int32@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@,System.Int32@)
  id: ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@,System.Int32@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(IList<T>?, in Action<T, int>?, in int)
  nameWithType: ArrayManipulation.ForSector<T>(IList<T>?, in Action<T, int>?, in int)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Collections.Generic.IList<T>?, in System.Action<T, int>?, in int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1325
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(IList<T>? list, in Action<T, int>? action, in int sectorCount)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int32}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int32
      description: The number of sectors to read.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(list As IList(Of T), action As Action(Of T, Integer), sectorCount As Integer)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(IList(Of T), Action(Of T, Integer), Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Collections.Generic.IList(Of T), System.Action(Of T, Integer), Integer)
  name.vb: ForSector(Of T)(IList(Of T), Action(Of T, Integer), Integer)
- uid: Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@)
  id: ForSector``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector<T>(IList<T>?, in Action<T, int>?)
  nameWithType: ArrayManipulation.ForSector<T>(IList<T>?, in Action<T, int>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector<T>(System.Collections.Generic.IList<T>?, in System.Action<T, int>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1340
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector<T>(IList<T>? list, in Action<T, int>? action)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The array that will be read.
    - id: action
      type: System.Action{{T},System.Int32}
      description: Action that receives the object and the index of the list.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ForSector(Of T)(list As IList(Of T), action As Action(Of T, Integer))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(Of T)(IList(Of T), Action(Of T, Integer))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(Of T)(System.Collections.Generic.IList(Of T), System.Action(Of T, Integer))
  name.vb: ForSector(Of T)(IList(Of T), Action(Of T, Integer))
- uid: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@,System.Int32@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@,System.Int32@)
  id: ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@,System.Int32@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector(IList?, in Action<object, int>?, in int)
  nameWithType: ArrayManipulation.ForSector(IList?, in Action<object, int>?, in int)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList?, in System.Action<object, int>?, in int)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1356
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector(IList? list, in Action<object, int>? action, in int sectorCount)
    parameters:
    - id: list
      type: System.Collections.IList
      description: The array that will be read.
    - id: action
      type: System.Action{System.Object,System.Int32}
      description: Action that receives the object and the index of the list.
    - id: sectorCount
      type: System.Int32
      description: The number of sectors to read.
    content.vb: Public Shared Sub ForSector(list As IList, action As Action(Of Object, Integer), sectorCount As Integer)
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(IList, Action(Of Object, Integer), Integer)
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList, System.Action(Of Object, Integer), Integer)
  name.vb: ForSector(IList, Action(Of Object, Integer), Integer)
- uid: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@)
  commentId: M:Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@)
  id: ForSector(System.Collections.IList,System.Action{System.Object,System.Int32}@)
  parent: Cobilas.Collections.ArrayManipulation
  langs:
  - csharp
  - vb
  name: ForSector(IList?, in Action<object, int>?)
  nameWithType: ArrayManipulation.ForSector(IList?, in Action<object, int>?)
  fullName: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList?, in System.Action<object, int>?)
  type: Method
  source:
    remote:
      path: Cobilas/Collections/ArrayManipulation.cs
      branch: main.dev
      repo: https://github.com/BelicusBr/com.cobilas.cs.lib.core.net4x.git
    id: ForSector
    path: ../../CSharp Dev/Lib's/com.cobilas.cs.lib.core.net4x/Cobilas/Collections/ArrayManipulation.cs
    startLine: 1364
  assemblies:
  - Cobilas.Core
  namespace: Cobilas.Collections
  summary: The method traverses several parts of a list simultaneously.
  example: []
  syntax:
    content: public static void ForSector(IList? list, in Action<object, int>? action)
    parameters:
    - id: list
      type: System.Collections.IList
      description: The array that will be read.
    - id: action
      type: System.Action{System.Object,System.Int32}
      description: Action that receives the object and the index of the list.
    content.vb: Public Shared Sub ForSector(list As IList, action As Action(Of Object, Integer))
  overload: Cobilas.Collections.ArrayManipulation.ForSector*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: ArrayManipulation.ForSector(IList, Action(Of Object, Integer))
  fullName.vb: Cobilas.Collections.ArrayManipulation.ForSector(System.Collections.IList, System.Action(Of Object, Integer))
  name.vb: ForSector(IList, Action(Of Object, Integer))
references:
- uid: Cobilas.Collections
  commentId: N:Cobilas.Collections
  href: Cobilas.html
  name: Cobilas.Collections
  nameWithType: Cobilas.Collections
  fullName: Cobilas.Collections
  spec.csharp:
  - uid: Cobilas
    name: Cobilas
    href: Cobilas.html
  - name: .
  - uid: Cobilas.Collections
    name: Collections
    href: Cobilas.Collections.html
  spec.vb:
  - uid: Cobilas
    name: Cobilas
    href: Cobilas.html
  - name: .
  - uid: Cobilas.Collections
    name: Collections
    href: Cobilas.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Cobilas.Collections.ArrayManipulation.Insert*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Insert
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Insert__1___0___System_Int64___0___
  name: Insert
  nameWithType: ArrayManipulation.Insert
  fullName: Cobilas.Collections.ArrayManipulation.Insert
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Cobilas.Collections.ArrayManipulation.AddNon_Existing*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.AddNon_Existing
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_AddNon_Existing__1___0___0___
  name: AddNon_Existing
  nameWithType: ArrayManipulation.AddNon_Existing
  fullName: Cobilas.Collections.ArrayManipulation.AddNon_Existing
- uid: Cobilas.Collections.ArrayManipulation.Add*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Add
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Add__1___0_____0___
  name: Add
  nameWithType: ArrayManipulation.Add
  fullName: Cobilas.Collections.ArrayManipulation.Add
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: Cobilas.Collections.ArrayManipulation.Remove*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Remove
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Remove__1_System_Int64_System_Int64___0___
  name: Remove
  nameWithType: ArrayManipulation.Remove
  fullName: Cobilas.Collections.ArrayManipulation.Remove
- uid: System.RankException
  commentId: T:System.RankException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.rankexception
  name: RankException
  nameWithType: RankException
  fullName: System.RankException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Cobilas.Collections.ArrayManipulation.ClearArray*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ClearArray
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ClearArray_System_Array_System_Int64_System_Int64_
  name: ClearArray
  nameWithType: ArrayManipulation.ClearArray
  fullName: Cobilas.Collections.ArrayManipulation.ClearArray
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.array
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Cobilas.Collections.ArrayManipulation.LongClearArray*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongClearArray
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongClearArray_System_Array_
  name: LongClearArray
  nameWithType: ArrayManipulation.LongClearArray
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArray
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Cobilas.Collections.ArrayManipulation.ClearArraySafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ClearArraySafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ClearArraySafe_System_Array_System_Int64_System_Int64_
  name: ClearArraySafe
  nameWithType: ArrayManipulation.ClearArraySafe
  fullName: Cobilas.Collections.ArrayManipulation.ClearArraySafe
- uid: Cobilas.Collections.ArrayManipulation.LongClearArraySafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongClearArraySafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongClearArraySafe_System_Array_
  name: LongClearArraySafe
  nameWithType: ArrayManipulation.LongClearArraySafe
  fullName: Cobilas.Collections.ArrayManipulation.LongClearArraySafe
- uid: Cobilas.Collections.ArrayManipulation.SeparateList*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.SeparateList
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_SeparateList__1___0___System_Int64___0______0____
  name: SeparateList
  nameWithType: ArrayManipulation.SeparateList
  fullName: Cobilas.Collections.ArrayManipulation.SeparateList
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Cobilas.Collections.ArrayManipulation.TakeStretch*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.TakeStretch
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_TakeStretch__1_System_Int64_System_Int64___0___
  name: TakeStretch
  nameWithType: ArrayManipulation.TakeStretch
  fullName: Cobilas.Collections.ArrayManipulation.TakeStretch
- uid: Cobilas.Collections.ArrayManipulation.ReadOnly*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ReadOnly
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ReadOnly__1___0___
  name: ReadOnly
  nameWithType: ArrayManipulation.ReadOnly
  fullName: Cobilas.Collections.ArrayManipulation.ReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{``0}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: Cobilas.Collections.ArrayManipulation.ReadOnlySafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ReadOnlySafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ReadOnlySafe__1___0___
  name: ReadOnlySafe
  nameWithType: ArrayManipulation.ReadOnlySafe
  fullName: Cobilas.Collections.ArrayManipulation.ReadOnlySafe
- uid: Cobilas.Collections.ArrayManipulation.IndexOf*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.IndexOf
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_IndexOf_System_Object_System_Array_System_Int64_System_Int64_
  name: IndexOf
  nameWithType: ArrayManipulation.IndexOf
  fullName: Cobilas.Collections.ArrayManipulation.IndexOf
- uid: Cobilas.Collections.ArrayManipulation.LongIndexOf*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongIndexOf
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongIndexOf_System_Object_System_Array_
  name: LongIndexOf
  nameWithType: ArrayManipulation.LongIndexOf
  fullName: Cobilas.Collections.ArrayManipulation.LongIndexOf
- uid: Cobilas.Collections.ArrayManipulation.LastIndexOf*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LastIndexOf
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LastIndexOf_System_Object_System_Array_System_Int64_System_Int64_
  name: LastIndexOf
  nameWithType: ArrayManipulation.LastIndexOf
  fullName: Cobilas.Collections.ArrayManipulation.LastIndexOf
- uid: Cobilas.Collections.ArrayManipulation.LongLastIndexOf*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongLastIndexOf
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongLastIndexOf_System_Object_System_Array_
  name: LongLastIndexOf
  nameWithType: ArrayManipulation.LongLastIndexOf
  fullName: Cobilas.Collections.ArrayManipulation.LongLastIndexOf
- uid: Cobilas.Collections.ArrayManipulation.FindIndex*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.FindIndex
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_FindIndex__1___0___System_Int64_System_Int64_System_Predicate___0__
  name: FindIndex
  nameWithType: ArrayManipulation.FindIndex
  fullName: Cobilas.Collections.ArrayManipulation.FindIndex
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Cobilas.Collections.ArrayManipulation.LongFindIndex*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongFindIndex
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongFindIndex__1___0___System_Predicate___0__
  name: LongFindIndex
  nameWithType: ArrayManipulation.LongFindIndex
  fullName: Cobilas.Collections.ArrayManipulation.LongFindIndex
- uid: Cobilas.Collections.ArrayManipulation.FindLastIndex*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.FindLastIndex
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_FindLastIndex__1___0___System_Int64_System_Int64_System_Predicate___0__
  name: FindLastIndex
  nameWithType: ArrayManipulation.FindLastIndex
  fullName: Cobilas.Collections.ArrayManipulation.FindLastIndex
- uid: Cobilas.Collections.ArrayManipulation.LongFindLastIndex*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongFindLastIndex
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongFindLastIndex__1___0___System_Predicate___0__
  name: LongFindLastIndex
  nameWithType: ArrayManipulation.LongFindLastIndex
  fullName: Cobilas.Collections.ArrayManipulation.LongFindLastIndex
- uid: Cobilas.Collections.ArrayManipulation.FindLast*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.FindLast
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_FindLast__1___0___System_Predicate___0__
  name: FindLast
  nameWithType: ArrayManipulation.FindLast
  fullName: Cobilas.Collections.ArrayManipulation.FindLast
- uid: Cobilas.Collections.ArrayManipulation.FindAll*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.FindAll
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_FindAll__1___0___System_Predicate___0__
  name: FindAll
  nameWithType: ArrayManipulation.FindAll
  fullName: Cobilas.Collections.ArrayManipulation.FindAll
- uid: Cobilas.Collections.ArrayManipulation.Find*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Find
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Find__1___0___System_Predicate___0__
  name: Find
  nameWithType: ArrayManipulation.Find
  fullName: Cobilas.Collections.ArrayManipulation.Find
- uid: Cobilas.Collections.ArrayManipulation.Exists*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Exists
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Exists__1___0___System_Predicate___0__
  name: Exists
  nameWithType: ArrayManipulation.Exists
  fullName: Cobilas.Collections.ArrayManipulation.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Cobilas.Collections.ArrayManipulation.CopyTo*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.CopyTo
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_CopyTo_System_Array_System_Int64_System_Array_System_Int64_System_Int64_
  name: CopyTo
  nameWithType: ArrayManipulation.CopyTo
  fullName: Cobilas.Collections.ArrayManipulation.CopyTo
- uid: System.Converter`2
  commentId: T:System.Converter`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.converter-2
  name: Converter<TInput, TOutput>
  nameWithType: Converter<TInput, TOutput>
  fullName: System.Converter<TInput, TOutput>
  nameWithType.vb: Converter(Of TInput, TOutput)
  fullName.vb: System.Converter(Of TInput, TOutput)
  name.vb: Converter(Of TInput, TOutput)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.converter-2
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.converter-2
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
- uid: Cobilas.Collections.ArrayManipulation.ConvertAll*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ConvertAll
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ConvertAll__2___0___System_Converter___0___1__
  name: ConvertAll
  nameWithType: ArrayManipulation.ConvertAll
  fullName: Cobilas.Collections.ArrayManipulation.ConvertAll
- uid: '{TInput}[]'
  isExternal: true
  name: TInput[]
  nameWithType: TInput[]
  fullName: TInput[]
  nameWithType.vb: TInput()
  fullName.vb: TInput()
  name.vb: TInput()
  spec.csharp:
  - name: TInput
  - name: '['
  - name: ']'
  spec.vb:
  - name: TInput
  - name: (
  - name: )
- uid: System.Converter{{TInput},{TOutput}}
  commentId: T:System.Converter{``0,``1}
  parent: System
  definition: System.Converter`2
  href: https://learn.microsoft.com/dotnet/api/system.converter-2
  name: Converter<TInput, TOutput>
  nameWithType: Converter<TInput, TOutput>
  fullName: System.Converter<TInput, TOutput>
  nameWithType.vb: Converter(Of TInput, TOutput)
  fullName.vb: System.Converter(Of TInput, TOutput)
  name.vb: Converter(Of TInput, TOutput)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.converter-2
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.converter-2
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
- uid: '{TOutput}[]'
  isExternal: true
  name: TOutput[]
  nameWithType: TOutput[]
  fullName: TOutput[]
  nameWithType.vb: TOutput()
  fullName.vb: TOutput()
  name.vb: TOutput()
  spec.csharp:
  - name: TOutput
  - name: '['
  - name: ']'
  spec.vb:
  - name: TOutput
  - name: (
  - name: )
- uid: Cobilas.Collections.ArrayManipulation.LongConvertAll*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongConvertAll
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongConvertAll__2___0___System_Converter___0___1__
  name: LongConvertAll
  nameWithType: ArrayManipulation.LongConvertAll
  fullName: Cobilas.Collections.ArrayManipulation.LongConvertAll
- uid: Cobilas.Collections.ArrayManipulation.Reverse*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Reverse
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Reverse_System_Array_System_Int32_System_Int32_
  name: Reverse
  nameWithType: ArrayManipulation.Reverse
  fullName: Cobilas.Collections.ArrayManipulation.Reverse
- uid: Cobilas.Collections.ArrayManipulation.LongReverse*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.LongReverse
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_LongReverse_System_Array_
  name: LongReverse
  nameWithType: ArrayManipulation.LongReverse
  fullName: Cobilas.Collections.ArrayManipulation.LongReverse
- uid: Cobilas.Collections.ArrayManipulation.Resize*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.Resize
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_Resize__1___0____System_Int32_
  name: Resize
  nameWithType: ArrayManipulation.Resize
  fullName: Cobilas.Collections.ArrayManipulation.Resize
- uid: Cobilas.Collections.ArrayManipulation.EmpytArray*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.EmpytArray
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_EmpytArray_System_Collections_ICollection_
  name: EmpytArray
  nameWithType: ArrayManipulation.EmpytArray
  fullName: Cobilas.Collections.ArrayManipulation.EmpytArray
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.icollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Cobilas.Collections.ILongCollection
  commentId: T:Cobilas.Collections.ILongCollection
  parent: Cobilas.Collections
  href: Cobilas.Collections.ILongCollection.html
  name: ILongCollection
  nameWithType: ILongCollection
  fullName: Cobilas.Collections.ILongCollection
- uid: Cobilas.Collections.ArrayManipulation.ArrayLength*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ArrayLength
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ArrayLength_System_Collections_ICollection_
  name: ArrayLength
  nameWithType: ArrayManipulation.ArrayLength
  fullName: Cobilas.Collections.ArrayManipulation.ArrayLength
- uid: Cobilas.Collections.ArrayManipulation.ArrayLongLength*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ArrayLongLength
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ArrayLongLength_System_Array_
  name: ArrayLongLength
  nameWithType: ArrayManipulation.ArrayLongLength
  fullName: Cobilas.Collections.ArrayManipulation.ArrayLongLength
- uid: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.IsReadOnlySafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_IsReadOnlySafe_System_Collections_IList_
  name: IsReadOnlySafe
  nameWithType: ArrayManipulation.IsReadOnlySafe
  fullName: Cobilas.Collections.ArrayManipulation.IsReadOnlySafe
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ilist
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: Cobilas.Collections.ILongList
  commentId: T:Cobilas.Collections.ILongList
  parent: Cobilas.Collections
  href: Cobilas.Collections.ILongList.html
  name: ILongList
  nameWithType: ILongList
  fullName: Cobilas.Collections.ILongList
- uid: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_IsFixedSizeSafe_System_Collections_IList_
  name: IsFixedSizeSafe
  nameWithType: ArrayManipulation.IsFixedSizeSafe
  fullName: Cobilas.Collections.ArrayManipulation.IsFixedSizeSafe
- uid: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_IsSynchronizedSafe_System_Collections_ICollection_
  name: IsSynchronizedSafe
  nameWithType: ArrayManipulation.IsSynchronizedSafe
  fullName: Cobilas.Collections.ArrayManipulation.IsSynchronizedSafe
- uid: Cobilas.Collections.ArrayManipulation.ForSector*
  commentId: Overload:Cobilas.Collections.ArrayManipulation.ForSector
  href: Cobilas.Collections.ArrayManipulation.html#Cobilas_Collections_ArrayManipulation_ForSector__1_System_Array_System_Action___0_System_Int64___System_Int64__
  name: ForSector
  nameWithType: ArrayManipulation.ForSector
  fullName: Cobilas.Collections.ArrayManipulation.ForSector
- uid: System.Action{{T},System.Int64}
  commentId: T:System.Action{``0,System.Int64}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T, long>
  nameWithType: Action<T, long>
  fullName: System.Action<T, long>
  nameWithType.vb: Action(Of T, Long)
  fullName.vb: System.Action(Of T, Long)
  name.vb: Action(Of T, Long)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Action{System.Object,System.Int64}
  commentId: T:System.Action{System.Object,System.Int64}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<object, long>
  nameWithType: Action<object, long>
  fullName: System.Action<object, long>
  nameWithType.vb: Action(Of Object, Long)
  fullName.vb: System.Action(Of Object, Long)
  name.vb: Action(Of Object, Long)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Action{{T},System.Int32}
  commentId: T:System.Action{``0,System.Int32}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T, int>
  nameWithType: Action<T, int>
  fullName: System.Action<T, int>
  nameWithType.vb: Action(Of T, Integer)
  fullName.vb: System.Action(Of T, Integer)
  name.vb: Action(Of T, Integer)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{System.Object,System.Int32}
  commentId: T:System.Action{System.Object,System.Int32}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<object, int>
  nameWithType: Action<object, int>
  fullName: System.Action<object, int>
  nameWithType.vb: Action(Of Object, Integer)
  fullName.vb: System.Action(Of Object, Integer)
  name.vb: Action(Of Object, Integer)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
