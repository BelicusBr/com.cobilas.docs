{
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ArrayManipulation.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ArrayManipulation.html",
    "title": "Class ArrayManipulation | Cobilas Documentation",
    "keywords": "Class ArrayManipulation Namespace Cobilas.Collections Assembly Cobilas.Core.dll Array manipulation class. public static class ArrayManipulation Inheritance object ArrayManipulation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddNon_Existing<T>(T, T[]) Adds a list of items to the target list. The method does not add items that already exist in the target list. public static T[] AddNon_Existing<T>(T item, T[] list) Parameters item T The item that will be inserted into the list. list T[] The list that will receive the items. Returns T[] This way, when adding the same object, the operation will not be performed and the list will be returned without being modified. Type Parameters T Exceptions ArgumentNullException AddNon_Existing<T>(T, ref T[]) Adds a list of items to the target list. The method does not add items that already exist in the target list. public static void AddNon_Existing<T>(T item, ref T[] list) Parameters item T The item that will be inserted into the list. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Add<T>(IEnumerable<T>, T[]) Adds a list of items to the target list. public static T[] Add<T>(IEnumerable<T> collection, T[] list) Parameters collection IEnumerable<T> The items that will be inserted into the list. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Add<T>(IEnumerable<T>, ref T[]) Adds a list of items to the target list. public static void Add<T>(IEnumerable<T> collection, ref T[] list) Parameters collection IEnumerable<T> The items that will be inserted into the list. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Add<T>(IEnumerator<T>, T[]) Adds a list of items to the target list. [Obsolete(\"Use the T[] Add<T>(IEnumerable<T>, T[]) method.\")] public static T[] Add<T>(IEnumerator<T> itens, T[] list) Parameters itens IEnumerator<T> The items that will be inserted into the list. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Add<T>(IEnumerator<T>, ref T[]) Adds a list of items to the target list. [Obsolete(\"Use the T[] Add<T>(IEnumerable<T>, ref T[]) method.\")] public static void Add<T>(IEnumerator<T> itens, ref T[] list) Parameters itens IEnumerator<T> The items that will be inserted into the list. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Add<T>(T, T[]) Adds a list of items to the target list. public static T[] Add<T>(T item, T[] list) Parameters item T The item that will be inserted into the list. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Add<T>(T, ref T[]) Adds a list of items to the target list. public static void Add<T>(T item, ref T[] list) Parameters item T The item that will be inserted into the list. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Add<T>(T[], T[]) Adds a list of items to the target list. public static T[] Add<T>(T[] itens, T[] list) Parameters itens T[] The items that will be inserted into the list. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Add<T>(T[], ref T[]) Adds a list of items to the target list. public static void Add<T>(T[] itens, ref T[] list) Parameters itens T[] The items that will be inserted into the list. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException ArrayLength(ICollection) Determines the length of a collection. public static int ArrayLength(ICollection array) Parameters array ICollection Returns int ArrayLongLength(ILongCollection) Determines the length of an Array. public static long ArrayLongLength(ILongCollection array) Parameters array ILongCollection Returns long ArrayLongLength(Array) Determines the length of an Array. public static long ArrayLongLength(Array array) Parameters array Array Returns long ClearArray(Array) Array cleaning. public static void ClearArray(Array array) Parameters array Array Exceptions ArgumentNullException ClearArray(Array, int, int) Array cleaning. public static void ClearArray(Array array, int index, int length) Parameters array Array index int length int Exceptions ArgumentNullException IndexOutOfRangeException ClearArray(Array, long, long) Array cleaning. public static void ClearArray(Array array, long index, long length) Parameters array Array index long length long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException ClearArraySafe(Array) Array cleaning. It will only perform cleaning if the array is not null. public static void ClearArraySafe(Array array) Parameters array Array ClearArraySafe(Array, int, int) Array cleaning. It will only perform cleaning if the array is not null. public static void ClearArraySafe(Array array, int index, int length) Parameters array Array index int length int Exceptions IndexOutOfRangeException ClearArraySafe(Array, long, long) Array cleaning. It will only perform cleaning if the array is not null. public static void ClearArraySafe(Array array, long index, long length) Parameters array Array index long length long Exceptions ArgumentNullException RankException IndexOutOfRangeException ClearArraySafe<T>(int, int, ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. It will only perform cleaning if the array is not null. public static void ClearArraySafe<T>(int index, int length, ref T[] array) Parameters index int length int array T[] Type Parameters T Exceptions IndexOutOfRangeException ClearArraySafe<T>(long, long, ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. It will only perform cleaning if the array is not null. public static void ClearArraySafe<T>(long index, long length, ref T[] array) Parameters index long length long array T[] Type Parameters T Exceptions ArgumentNullException RankException IndexOutOfRangeException ClearArraySafe<T>(ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. It will only perform cleaning if the array is not null. public static void ClearArraySafe<T>(ref T[] array) Parameters array T[] Type Parameters T ClearArray<T>(int, int, ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. public static void ClearArray<T>(int index, int length, ref T[] array) Parameters index int length int array T[] Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException ClearArray<T>(long, long, ref T[]) Array cleaning. public static void ClearArray<T>(long index, long length, ref T[] array) Parameters index long length long array T[] Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException ClearArray<T>(ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. public static void ClearArray<T>(ref T[] array) Parameters array T[] Type Parameters T Exceptions ArgumentNullException ConvertAll<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Converts an array of one type to an array of another type. public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter) Parameters array TInput[] The one-dimensional, zero-based Array to convert to a target type. converter Converter<TInput, TOutput> A Converter<TInput, TOutput> that converts each element from one type to another type. Returns TOutput[] An array of the target type containing the converted elements from the source array. Type Parameters TInput The type of the elements of the source array. TOutput The type of the elements of the target array. Exceptions ArgumentNullException CopyTo(Array, Array) Copies all the elements of the current one-dimensional array to the specified one-dimensional array. public static void CopyTo(Array sourceArray, Array destinationArray) Parameters sourceArray Array destinationArray Array CopyTo(Array, Array, int) Copies all the elements of the current one-dimensional array to the specified one-dimensional array. public static void CopyTo(Array sourceArray, Array destinationArray, int length) Parameters sourceArray Array destinationArray Array length int CopyTo(Array, Array, long) Copies all the elements of the current one-dimensional array to the specified one-dimensional array. public static void CopyTo(Array sourceArray, Array destinationArray, long length) Parameters sourceArray Array destinationArray Array length long CopyTo(Array, int, Array, int, int) Copies all the elements of the current one-dimensional array to the specified one-dimensional array. public static void CopyTo(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) Parameters sourceArray Array sourceIndex int destinationArray Array destinationIndex int length int CopyTo(Array, long, Array, long, long) Copies all the elements of the current one-dimensional array to the specified one-dimensional array. public static void CopyTo(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length) Parameters sourceArray Array sourceIndex long destinationArray Array destinationIndex long length long EmpytArray(ILongCollection) Determines whether the collection is empty or null. public static bool EmpytArray(ILongCollection array) Parameters array ILongCollection Returns bool EmpytArray(ICollection) Determines whether the collection is empty or null. public static bool EmpytArray(ICollection array) Parameters array ICollection Returns bool Exists(object, Array) Determines whether the specified array contains elements that match the conditions defined by the specified predicate. [Obsolete(\"Use bool:Exists<T>(T[], Predicate<T>)\")] public static bool Exists(object item, Array array) Parameters item object array Array Returns bool Exists<T>(T, T[]) Determines whether the specified array contains elements that match the conditions defined by the specified predicate. public static bool Exists<T>(T item, T[] array) Parameters item T array T[] Returns bool Type Parameters T Exists<T>(T[], Predicate<T>) Determines whether the specified array contains elements that match the conditions defined by the specified predicate. public static bool Exists<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns bool Type Parameters T FindAll<T>(T[], Predicate<T>) Retrieves all elements that match the conditions defined by the specified predicate. public static T[] FindAll<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns T[] Type Parameters T Exceptions ArgumentNullException RankException FindIndex<T>(T[], int, int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static int FindIndex<T>(T[] array, int index, int length, Predicate<T> match) Parameters array T[] index int length int match Predicate<T> Returns int Type Parameters T FindIndex<T>(T[], int, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static int FindIndex<T>(T[] array, int index, Predicate<T> match) Parameters array T[] index int match Predicate<T> Returns int Type Parameters T FindIndex<T>(T[], long, long, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static long FindIndex<T>(T[] array, long index, long length, Predicate<T> match) Parameters array T[] index long length long match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindIndex<T>(T[], long, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static long FindIndex<T>(T[] array, long index, Predicate<T> match) Parameters array T[] index long match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static int FindIndex<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns int Type Parameters T FindLastIndex<T>(T[], int, int, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static int FindLastIndex<T>(T[] array, int index, int length, Predicate<T> match) Parameters array T[] index int length int match Predicate<T> Returns int Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex<T>(T[], int, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static int FindLastIndex<T>(T[] array, int index, Predicate<T> match) Parameters array T[] index int match Predicate<T> Returns int Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex<T>(T[], long, long, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static long FindLastIndex<T>(T[] array, long index, long length, Predicate<T> match) Parameters array T[] index long length long match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex<T>(T[], long, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static long FindLastIndex<T>(T[] array, long index, Predicate<T> match) Parameters array T[] index long match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static int FindLastIndex<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns int Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLast<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the first occurrence in the entire Array. public static T FindLast<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns T Type Parameters T Exceptions ArgumentNullException RankException Find<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Array. public static T Find<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns T Type Parameters T Exceptions ArgumentNullException RankException ForSector(Array, in Action<object, long>) The method traverses several parts of a list simultaneously. public static void ForSector(Array array, in Action<object, long> action) Parameters array Array The array that will be read. action Action<object, long> Action that receives the object and the index of the list. Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector(Array, in Action<object, long>, in long) The method traverses several parts of a list simultaneously. public static void ForSector(Array array, in Action<object, long> action, in long sectorCount) Parameters array Array The array that will be read. action Action<object, long> Action that receives the object and the index of the list. sectorCount long The number of sectors to read. Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector(IList, in Action<object, int>) The method traverses several parts of a list simultaneously. public static void ForSector(IList list, in Action<object, int> action) Parameters list IList The array that will be read. action Action<object, int> Action that receives the object and the index of the list. Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector(IList, in Action<object, int>, in int) The method traverses several parts of a list simultaneously. public static void ForSector(IList list, in Action<object, int> action, in int sectorCount) Parameters list IList The array that will be read. action Action<object, int> Action that receives the object and the index of the list. sectorCount int The number of sectors to read. Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(Array, in Action<T, long>) The method traverses several parts of a list simultaneously. public static void ForSector<T>(Array array, in Action<T, long> action) Parameters array Array The array that will be read. action Action<T, long> Action that receives the object and the index of the list. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(Array, in Action<T, long>, in long) The method traverses several parts of a list simultaneously. public static void ForSector<T>(Array array, in Action<T, long> action, in long sectorCount) Parameters array Array The array that will be read. action Action<T, long> Action that receives the object and the index of the list. sectorCount long The number of sectors to read. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(IList<T>, in Action<T, int>) The method traverses several parts of a list simultaneously. public static void ForSector<T>(IList<T> list, in Action<T, int> action) Parameters list IList<T> The array that will be read. action Action<T, int> Action that receives the object and the index of the list. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(IList<T>, in Action<T, int>, in int) The method traverses several parts of a list simultaneously. public static void ForSector<T>(IList<T> list, in Action<T, int> action, in int sectorCount) Parameters list IList<T> The array that will be read. action Action<T, int> Action that receives the object and the index of the list. sectorCount int The number of sectors to read. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(IList, in Action<T, int>) The method traverses several parts of a list simultaneously. public static void ForSector<T>(IList list, in Action<T, int> action) Parameters list IList The array that will be read. action Action<T, int> Action that receives the object and the index of the list. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(IList, in Action<T, int>, in int) The method traverses several parts of a list simultaneously. public static void ForSector<T>(IList list, in Action<T, int> action, in int sectorCount) Parameters list IList The array that will be read. action Action<T, int> Action that receives the object and the index of the list. sectorCount int The number of sectors to read. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(T[], in Action<T, long>) The method traverses several parts of a list simultaneously. public static void ForSector<T>(T[] array, in Action<T, long> action) Parameters array T[] The array that will be read. action Action<T, long> Action that receives the object and the index of the list. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException ForSector<T>(T[], in Action<T, long>, in long) The method traverses several parts of a list simultaneously. public static void ForSector<T>(T[] array, in Action<T, long> action, in long sectorCount) Parameters array T[] The array that will be read. action Action<T, long> Action that receives the object and the index of the list. sectorCount long The number of sectors to read. Type Parameters T Exceptions ArgumentNullException ArgumentOutOfRangeException IndexOf(object, Array) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static int IndexOf(object item, Array array) Parameters item object array Array Returns int IndexOf(object, Array, int) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static int IndexOf(object item, Array array, int index) Parameters item object array Array index int Returns int IndexOf(object, Array, int, int) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static int IndexOf(object item, Array array, int index, int length) Parameters item object array Array index int length int Returns int IndexOf(object, Array, long) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static long IndexOf(object item, Array array, long index) Parameters item object array Array index long Returns long IndexOf(object, Array, long, long) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static long IndexOf(object item, Array array, long index, long length) Parameters item object array Array index long length long Returns long Insert<T>(IEnumerable<T>, long, T[]) Insert a list of items at a given index into a target array. public static T[] Insert<T>(IEnumerable<T> collection, long index, T[] list) Parameters collection IEnumerable<T> The items that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Insert<T>(IEnumerable<T>, long, ref T[]) Insert a list of items at a given index into a target array. public static void Insert<T>(IEnumerable<T> collection, long index, ref T[] list) Parameters collection IEnumerable<T> The items that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Insert<T>(IEnumerator<T>, long, T[]) Insert a list of items at a given index into a target array. [Obsolete(\"Use the T[] Insert<T>(IEnumerable<T>, long, T[]) method\")] public static T[] Insert<T>(IEnumerator<T> itens, long index, T[] list) Parameters itens IEnumerator<T> The items that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Insert<T>(T, long, T[]) Insert a list of items at a given index into a target array. public static T[] Insert<T>(T item, long index, T[] list) Parameters item T The item that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Insert<T>(T, long, ref T[]) Insert a list of items at a given index into a target array. public static void Insert<T>(T item, long index, ref T[] list) Parameters item T The item that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException Insert<T>(T[], long, T[]) Insert a list of items at a given index into a target array. public static T[] Insert<T>(T[] itens, long index, T[] list) Parameters itens T[] The items that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Returns T[] Type Parameters T Exceptions ArgumentNullException Insert<T>(T[], long, ref T[]) Insert a list of items at a given index into a target array. public static void Insert<T>(T[] itens, long index, ref T[] list) Parameters itens T[] The items that will be inserted into the list. index long The index of the list where the items will be inserted. list T[] The list that will receive the items. Type Parameters T Exceptions ArgumentNullException IsFixedSizeSafe(ILongList) Determines whether the collection has a fixed size. public static bool IsFixedSizeSafe(ILongList array) Parameters array ILongList Returns bool IsFixedSizeSafe(IList) Determines whether the collection has a fixed size. public static bool IsFixedSizeSafe(IList array) Parameters array IList Returns bool IsReadOnlySafe(ILongList) Determines whether the collection is read-only. public static bool IsReadOnlySafe(ILongList array) Parameters array ILongList Returns bool IsReadOnlySafe(IList) Determines whether the collection is read-only. public static bool IsReadOnlySafe(IList array) Parameters array IList Returns bool IsSynchronizedSafe(ILongCollection) Determines whether the collection is synchronized. public static bool IsSynchronizedSafe(ILongCollection collection) Parameters collection ILongCollection Returns bool IsSynchronizedSafe(ICollection) Determines whether the collection is synchronized. public static bool IsSynchronizedSafe(ICollection collection) Parameters collection ICollection Returns bool LastIndexOf(object, Array) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static int LastIndexOf(object item, Array array) Parameters item object array Array Returns int LastIndexOf(object, Array, int) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static int LastIndexOf(object item, Array array, int index) Parameters item object array Array index int Returns int LastIndexOf(object, Array, int, int) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static int LastIndexOf(object item, Array array, int index, int length) Parameters item object array Array index int length int Returns int LastIndexOf(object, Array, long) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static long LastIndexOf(object item, Array array, long index) Parameters item object array Array index long Returns long LastIndexOf(object, Array, long, long) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static long LastIndexOf(object item, Array array, long index, long length) Parameters item object array Array index long length long Returns long LongClearArray(Array) Array cleaning. public static void LongClearArray(Array array) Parameters array Array Exceptions ArgumentNullException RankException ArgumentOutOfRangeException LongClearArraySafe(Array) Array cleaning. It will only perform cleaning if the array is not null. public static void LongClearArraySafe(Array array) Parameters array Array Exceptions ArgumentNullException RankException IndexOutOfRangeException LongClearArraySafe<T>(ref T[]) Array cleaning. In addition to clearing the array, it returns an empty array. It will only perform cleaning if the array is not null. public static void LongClearArraySafe<T>(ref T[] array) Parameters array T[] Type Parameters T Exceptions ArgumentNullException RankException IndexOutOfRangeException LongClearArray<T>(ref T[]) Array cleaning. public static void LongClearArray<T>(ref T[] array) Parameters array T[] Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException LongConvertAll<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Converts an array of one type to an array of another type. public static TOutput[] LongConvertAll<TInput, TOutput>(TInput[] array, Converter<TInput, TOutput> converter) Parameters array TInput[] The one-dimensional, zero-based Array to convert to a target type. converter Converter<TInput, TOutput> A Converter<TInput, TOutput> that converts each element from one type to another type. Returns TOutput[] An array of the target type containing the converted elements from the source array. Type Parameters TInput The type of the elements of the source array. TOutput The type of the elements of the target array. Exceptions ArgumentNullException RankException LongFindIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public static long LongFindIndex<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException LongFindLastIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public static long LongFindLastIndex<T>(T[] array, Predicate<T> match) Parameters array T[] match Predicate<T> Returns long Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException LongIndexOf(object, Array) Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or a range of elements in the array. public static long LongIndexOf(object item, Array array) Parameters item object array Array Returns long LongLastIndexOf(object, Array) Returns the index of the last occurrence of a value in a one-dimensional Array or part of the Array. public static long LongLastIndexOf(object item, Array array) Parameters item object array Array Returns long LongReverse(Array) Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public static void LongReverse(Array array) Parameters array Array The one-dimensional Array to reverse. ReadOnlySafe<T>(T[]) Turn a list into a read-only list public static ReadOnlyCollection<T> ReadOnlySafe<T>(T[] list) Parameters list T[] Returns ReadOnlyCollection<T> If the list is null, it will return an empty read-only list. Type Parameters T ReadOnly<T>(T[]) Turn a list into a read-only list public static ReadOnlyCollection<T> ReadOnly<T>(T[] list) Parameters list T[] Returns ReadOnlyCollection<T> Type Parameters T Remove<T>(long, long, T[]) Remove items from the target list. public static T[] Remove<T>(long index, long length, T[] list) Parameters index long The target index to remove from the target list. length long The length and number of items to remove from the list from the index. list T[] The list from which items will be removed. Returns T[] Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Remove<T>(long, long, ref T[]) Remove items from the target list. public static void Remove<T>(long index, long length, ref T[] list) Parameters index long The target index to remove from the target list. length long The length and number of items to remove from the list from the index. list T[] The list from which items will be removed. Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Remove<T>(long, T[]) Remove items from the target list. public static T[] Remove<T>(long index, T[] list) Parameters index long The target index to remove from the target list. list T[] The list from which items will be removed. Returns T[] Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Remove<T>(long, ref T[]) Remove items from the target list. public static void Remove<T>(long index, ref T[] list) Parameters index long The target index to remove from the target list. list T[] The list from which items will be removed. Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Remove<T>(T, T[]) Remove items from the target list. public static T[] Remove<T>(T item, T[] list) Parameters item T The target item to remove from the target list. list T[] The list from which items will be removed. Returns T[] Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Remove<T>(T, ref T[]) Remove items from the target list. public static void Remove<T>(T item, ref T[] list) Parameters item T The target item to remove from the target list. list T[] The list from which items will be removed. Type Parameters T Exceptions ArgumentNullException IndexOutOfRangeException Resize<T>(ref T[], int) Changes the number of elements of a one-dimensional array to the specified new size. public static void Resize<T>(ref T[] array, int newSize) Parameters array T[] newSize int Type Parameters T Resize<T>(ref T[], long) Changes the number of elements of a one-dimensional array to the specified new size. public static void Resize<T>(ref T[] array, long newSize) Parameters array T[] newSize long Type Parameters T Exceptions ArgumentOutOfRangeException Reverse(Array) Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public static void Reverse(Array array) Parameters array Array The one-dimensional Array to reverse. Reverse(Array, int, int) Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public static void Reverse(Array array, int index, int length) Parameters array Array The one-dimensional Array to reverse. index int The starting index of the section to reverse. length int The number of elements in the section to reverse. Reverse(Array, long, long) Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public static void Reverse(Array array, long index, long length) Parameters array Array The one-dimensional Array to reverse. index long The starting index of the section to reverse. length long The number of elements in the section to reverse. Exceptions ArgumentNullException RankException ArgumentOutOfRangeException SeparateList<T>(T[], long, out T[], out T[]) Separate a list into two using an index. public static void SeparateList<T>(T[] array, long separationIndex, out T[] part1, out T[] part2) Parameters array T[] The list that will be separated. separationIndex long The index where the list will be separated. part1 T[] part2 T[] Type Parameters T Exceptions ArgumentNullException RankException ArgumentOutOfRangeException TakeStretch<T>(long, long, T[]) This function performs a cut in a list. public static T[] TakeStretch<T>(long index, long length, T[] list) Parameters index long The index where the clipping will begin. length long The index where the clipping will begin. list T[] The list that will be cut. Returns T[] The function will return a list of items that were cut from the original list. The original list will not be modified. Type Parameters T Exceptions ArgumentNullException ArgumentException IndexOutOfRangeException"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ArrayToIEnumerator-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ArrayToIEnumerator-1.html",
    "title": "Class ArrayToIEnumerator<T> | Cobilas Documentation",
    "keywords": "Class ArrayToIEnumerator<T> Namespace Cobilas.Collections Assembly Cobilas.Core.dll Transforms an array into an enumerator. public class ArrayToIEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters T Inheritance object ArrayToIEnumerator<T> Implements IEnumerator<T> IDisposable IEnumerator Derived ICollectionToIEnumerator<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors ArrayToIEnumerator() Internal constructor. protected ArrayToIEnumerator() ArrayToIEnumerator(T[]) public ArrayToIEnumerator(T[] list) Parameters list T[] Fields current protected T current Field Value T index protected long index Field Value long list protected T[] list Field Value T[] Properties Current Gets the element in the collection at the current position of the enumerator. public virtual T Current { get; } Property Value T Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Internal disposal of the object. protected virtual void Dispose(bool disposing) Parameters disposing bool MoveNext() Advances the enumerator to the next element of the collection. public virtual bool MoveNext() Returns bool Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public virtual void Reset()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ILongCollection-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ILongCollection-1.html",
    "title": "Interface ILongCollection<T> | Cobilas Documentation",
    "keywords": "Interface ILongCollection<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Defines methods for manipulating Long generic collections. public interface ILongCollection<T> : IEnumerable<T>, IEnumerable Type Parameters T The type of the elements in the collection. Inherited Members IEnumerable<T>.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Count Gets the number of elements contained in the ILongCollection<T>. long Count { get; } Property Value long IsReadOnly Gets a value indicating whether the ILongCollection<T> is read-only. bool IsReadOnly { get; } Property Value bool Methods Add(T) Adds an item to the ILongCollection<T>. void Add(T item) Parameters item T The object to add to the ILongCollection<T>. Clear() Removes all items from the ILongCollection<T>. void Clear() Contains(T) Determines whether the ILongCollection<T> contains a specific value. bool Contains(T item) Parameters item T The object to locate in the ILongCollection<T>. Returns bool true if item is found in the ILongCollection<T>; otherwise, false. CopyTo(T[], long) Copies the elements of the ILongCollection<T> to an Array, starting at a particular Array index. void CopyTo(T[] array, long arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ILongCollection<T>. The Array must have zero-based indexing. arrayIndex long The zero-based index in array at which copying begins. Remove(T) Removes the first occurrence of a specific object from the ILongCollection<T>. bool Remove(T item) Parameters item T The object to remove from the ILongCollection<T>. Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ILongList-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ILongList-1.html",
    "title": "Interface ILongList<T> | Cobilas Documentation",
    "keywords": "Interface ILongList<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Represents a long collection of objects that can be accessed individually by index. public interface ILongList<T> : ILongCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the list. Inherited Members ILongCollection<T>.Count ILongCollection<T>.IsReadOnly ILongCollection<T>.Add(T) ILongCollection<T>.Clear() ILongCollection<T>.Contains(T) ILongCollection<T>.CopyTo(T[], long) ILongCollection<T>.Remove(T) IEnumerable<T>.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties this[long] Gets or sets the element at the specified index. T this[long index] { get; set; } Parameters index long Property Value T Methods IndexOf(T) Determines the index of a specific item in the ILongList<T>. long IndexOf(T item) Parameters item T The object to locate in the ILongList<T>. Returns long The index of item if found in the list; otherwise, -1. Insert(long, T) Inserts an item to the ILongList<T> at the specified index. void Insert(long index, T item) Parameters index long The zero-based index at which item should be inserted. item T The object to insert into the ILongList<T>. RemoveAt(long) Removes the ILongList<T> item at the specified index. void RemoveAt(long index) Parameters index long The zero-based index of the item to remove."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.IReadOnlyLongCollection-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.IReadOnlyLongCollection-1.html",
    "title": "Interface IReadOnlyLongCollection<T> | Cobilas Documentation",
    "keywords": "Interface IReadOnlyLongCollection<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Represents a long, read-only, strongly typed collection of elements. public interface IReadOnlyLongCollection<out T> : IEnumerable<T>, IEnumerable Type Parameters T The type of the elements. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. Inherited Members IEnumerable<T>.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Count Gets the number of elements in the collection. long Count { get; } Property Value long"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.IReadOnlyLongList-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.IReadOnlyLongList-1.html",
    "title": "Interface IReadOnlyLongList<T> | Cobilas Documentation",
    "keywords": "Interface IReadOnlyLongList<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Represents a long read-only collection of elements that can be accessed by index. public interface IReadOnlyLongList<out T> : IReadOnlyLongCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the read-only list. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics. Inherited Members IReadOnlyLongCollection<T>.Count IEnumerable<T>.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties this[long] Gets the element at the specified index in the read-only list. T this[long index] { get; } Parameters index long Property Value T"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.LongList-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.LongList-1.html",
    "title": "Class LongList<T> | Cobilas Documentation",
    "keywords": "Class LongList<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Represents a long, strongly typed list of objects that can be accessed by index. Provides methods for searching, sorting, and manipulating lists. [Serializable] public class LongList<T> : ILongList<T>, ILongCollection<T>, IReadOnlyLongList<T>, IReadOnlyLongCollection<T>, IEnumerable<T>, ILongList, ILongCollection, IEnumerable, ICloneable Type Parameters T The type of elements in the list. Inheritance object LongList<T> Implements ILongList<T> ILongCollection<T> IReadOnlyLongList<T> IReadOnlyLongCollection<T> IEnumerable<T> ILongList ILongCollection IEnumerable ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors LongList() Creates a new instance of the object. public LongList() LongList(IEnumerable<T>) Creates a new instance of the object. public LongList(IEnumerable<T> collection) Parameters collection IEnumerable<T> LongList(long) Creates a new instance of the object. public LongList(long capacity) Parameters capacity long LongList(params T[]) Creates a new instance of the object. public LongList(params T[] collection) Parameters collection T[] Properties Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. public long Capacity { get; set; } Property Value long Count Gets the number of elements contained in the ILongCollection<T>. public long Count { get; } Property Value long IsReadOnly Gets a value indicating whether the ILongCollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool this[long] Gets or sets the element at the specified index. public T this[long index] { get; set; } Parameters index long Property Value T Methods Add(T) Adds an item to the ILongCollection<T>. public void Add(T item) Parameters item T The object to add to the ILongCollection<T>. AddRange(IEnumerable<T>) Adds the elements of the specified collection to the end of the LongList<T>. public void AddRange(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection whose elements should be added to the end of the LongList<T>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type. AsReadOnly() Returns a read-only ReadOnlyLongCollection< T > wrapper for the current collection. public ReadOnlyLongCollection<T> AsReadOnly() Returns ReadOnlyLongCollection<T> Clear() Removes all items from the ILongCollection<T>. public void Clear() Clone() Creates a new object that is a copy of the current instance. public object Clone() Returns object A new object that is a copy of this instance. Contains(Predicate<T>) Determines whether the ILongCollection<T> contains a specific value. public bool Contains(Predicate<T> match) Parameters match Predicate<T> The match parameter allows you to create custom comparison logic. Returns bool true if item is found in the ILongCollection<T>; otherwise, false. Contains(T) Determines whether the ILongCollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the ILongCollection<T>. Returns bool true if item is found in the ILongCollection<T>; otherwise, false. ConvertAll<TOutput>(Converter<T, TOutput>) Converts an array of one type to an array of another type. public TOutput[] ConvertAll<TOutput>(Converter<T, TOutput> converter) Parameters converter Converter<T, TOutput> A Converter<TInput, TOutput> that converts each element from one type to another type. Returns TOutput[] An array of the target type containing the converted elements from the source array. Type Parameters TOutput The type of the elements of the target array. Exceptions ArgumentNullException RankException CopyTo(T[], long) Copies the elements of the ILongCollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, long arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ILongCollection<T>. The Array must have zero-based indexing. arrayIndex long The zero-based index in array at which copying begins. Find(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Array. public T Find(Predicate<T> match) Parameters match Predicate<T> Returns T Exceptions ArgumentNullException RankException FindAll(Predicate<T>) Retrieves all elements that match the conditions defined by the specified predicate. public T[] FindAll(Predicate<T> match) Parameters match Predicate<T> Returns T[] Exceptions ArgumentNullException RankException FindIndex(long, long, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public long FindIndex(long startIndex, long count, Predicate<T> match) Parameters startIndex long count long match Predicate<T> Returns long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindIndex(long, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public long FindIndex(long startIndex, Predicate<T> match) Parameters startIndex long match Predicate<T> Returns long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindIndex(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the zero-based index of the first occurrence within the range of elements in the Array that starts at the specified index and contains the specified number of elements. public long FindIndex(Predicate<T> match) Parameters match Predicate<T> Returns long FindLast(Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate and returns the first occurrence in the entire Array. public T FindLast(Predicate<T> match) Parameters match Predicate<T> Returns T Exceptions ArgumentNullException RankException FindLastIndex(long, long, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public long FindLastIndex(long startIndex, long count, Predicate<T> match) Parameters startIndex long count long match Predicate<T> Returns long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex(long, Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public long FindLastIndex(long startIndex, Predicate<T> match) Parameters startIndex long match Predicate<T> Returns long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException FindLastIndex(Predicate<T>) Searches for an element that matches the conditions defined by a specified predicate and returns the zero-based index of the last occurrence in an Array or part of it. public long FindLastIndex(Predicate<T> match) Parameters match Predicate<T> Returns long Exceptions ArgumentNullException RankException ArgumentOutOfRangeException ForEach(Action<T>) Performs the specified action on each element of the LongList<T>. public void ForEach(Action<T> action) Parameters action Action<T> The Action<T> delegate to perform on each element of the LongList<T>. Exceptions ArgumentNullException InvalidOperationException GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. GetRange(long, long) Creates a shallow copy of a range of elements in the source LongList<T>. public LongList<T> GetRange(long index, long count) Parameters index long The zero-based LongList<T> index at which the range starts. count long The number of elements in the range. Returns LongList<T> A shallow copy of a range of elements in the source LongList<T>. Exceptions ArgumentOutOfRangeException IndexOf(T) Determines the index of a specific item in the ILongList<T>. public long IndexOf(T item) Parameters item T The object to locate in the ILongList<T>. Returns long The index of item if found in the list; otherwise, -1. Insert(long, T) Inserts an item to the ILongList<T> at the specified index. public void Insert(long index, T item) Parameters index long The zero-based index at which item should be inserted. item T The object to insert into the ILongList<T>. InsertRange(long, IEnumerable<T>) Inserts the elements of a collection into the LongList<T> at the specified index. public void InsertRange(long index, IEnumerable<T> collection) Parameters index long The zero-based index at which the new elements should be inserted. collection IEnumerable<T> The collection whose elements should be inserted into the LongList<T>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type. Remove(T) Removes the first occurrence of a specific object from the ILongCollection<T>. public bool Remove(T item) Parameters item T The object to remove from the ILongCollection<T>. Returns bool RemoveAll(Predicate<T>) Removes all the elements that match the conditions defined by the specified predicate. public long RemoveAll(Predicate<T> match) Parameters match Predicate<T> The Predicate<T> delegate that defines the conditions of the elements to remove. Returns long The number of elements removed from the LongList<T>. Exceptions ArgumentNullException RemoveAt(long) Removes the ILongList<T> item at the specified index. public void RemoveAt(long index) Parameters index long The zero-based index of the item to remove. RemoveRamge(long, long) Removes a range of elements from the LongList<T> public void RemoveRamge(long index, long count) Parameters index long The zero-based starting index of the range of elements to remove. count long The number of elements to remove. Reverse() Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public void Reverse() Reverse(long, long) Reverses the order of the elements in a one-dimensional Array or in a portion of the Array. public void Reverse(long index, long length) Parameters index long The starting index of the section to reverse. length long The number of elements in the section to reverse. Exceptions ArgumentNullException RankException ArgumentOutOfRangeException ToArray() Copies the elements of the LongList<T> to a new array. public T[] ToArray() Returns T[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ReadOnlyLongCollection-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.ReadOnlyLongCollection-1.html",
    "title": "Class ReadOnlyLongCollection<T> | Cobilas Documentation",
    "keywords": "Class ReadOnlyLongCollection<T> Namespace Cobilas.Collections.Generic Assembly Cobilas.Core.dll Provides the base class for a read-only generic Long collection. [Serializable] public class ReadOnlyLongCollection<T> : ILongList, ILongCollection, ILongList<T>, ILongCollection<T>, IReadOnlyLongList<T>, IReadOnlyLongCollection<T>, IEnumerable<T>, IEnumerable, ICloneable Type Parameters T The type of elements in the collection. Inheritance object ReadOnlyLongCollection<T> Implements ILongList ILongCollection ILongList<T> ILongCollection<T> IReadOnlyLongList<T> IReadOnlyLongCollection<T> IEnumerable<T> IEnumerable ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors ReadOnlyLongCollection(IEnumerable<T>) Creates a new instance of the object. public ReadOnlyLongCollection(IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> Properties Count Gets the number of elements contained in the ILongCollection. public long Count { get; } Property Value long this[long] Gets the element at the specified index in the read-only list. public T this[long index] { get; } Parameters index long Property Value T Methods Clone() Creates a new object that is a copy of the current instance. public object Clone() Returns object A new object that is a copy of this instance. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.Generic.html",
    "title": "Namespace Cobilas.Collections.Generic | Cobilas Documentation",
    "keywords": "Namespace Cobilas.Collections.Generic Classes LongList<T> Represents a long, strongly typed list of objects that can be accessed by index. Provides methods for searching, sorting, and manipulating lists. ReadOnlyLongCollection<T> Provides the base class for a read-only generic Long collection. Interfaces ILongCollection<T> Defines methods for manipulating Long generic collections. ILongList<T> Represents a long collection of objects that can be accessed individually by index. IReadOnlyLongCollection<T> Represents a long, read-only, strongly typed collection of elements. IReadOnlyLongList<T> Represents a long read-only collection of elements that can be accessed by index."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ICollectionToIEnumerator-1.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ICollectionToIEnumerator-1.html",
    "title": "Class ICollectionToIEnumerator<T> | Cobilas Documentation",
    "keywords": "Class ICollectionToIEnumerator<T> Namespace Cobilas.Collections Assembly Cobilas.Core.dll Transforms a collection into an enumerator. public class ICollectionToIEnumerator<T> : ArrayToIEnumerator<T>, IEnumerator<T>, IDisposable, IEnumerator Type Parameters T Inheritance object ArrayToIEnumerator<T> ICollectionToIEnumerator<T> Implements IEnumerator<T> IDisposable IEnumerator Inherited Members ArrayToIEnumerator<T>.list ArrayToIEnumerator<T>.index ArrayToIEnumerator<T>.current ArrayToIEnumerator<T>.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors ICollectionToIEnumerator(ICollection<T>) public ICollectionToIEnumerator(ICollection<T> collection) Parameters collection ICollection<T> Properties Current Gets the element in the collection at the current position of the enumerator. public override T Current { get; } Property Value T Methods Dispose(bool) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. protected override void Dispose(bool disposing) Parameters disposing bool MoveNext() Advances the enumerator to the next element of the collection. public override bool MoveNext() Returns bool Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public override void Reset()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ILongCollection.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ILongCollection.html",
    "title": "Interface ILongCollection | Cobilas Documentation",
    "keywords": "Interface ILongCollection Namespace Cobilas.Collections Assembly Cobilas.Core.dll Defines size, enumerators, and synchronization methods for all long non-generic collections. public interface ILongCollection : IEnumerable Inherited Members IEnumerable.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Count Gets the number of elements contained in the ILongCollection. long Count { get; } Property Value long IsSynchronized Gets a value indicating whether access to the ILongCollection is synchronized (thread safe). bool IsSynchronized { get; } Property Value bool SyncRoot Gets an object that can be used to synchronize access to the ILongCollection. object SyncRoot { get; } Property Value object Methods CopyTo(Array, long) Copies the elements of the ILongCollection to an Array, starting at a particular Array index. void CopyTo(Array array, long index) Parameters array Array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. index long The zero-based index in array at which copying begins."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ILongList.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.ILongList.html",
    "title": "Interface ILongList | Cobilas Documentation",
    "keywords": "Interface ILongList Namespace Cobilas.Collections Assembly Cobilas.Core.dll Represents a long, non-generic collection of objects that can be accessed individually by index. public interface ILongList : ILongCollection, IEnumerable Inherited Members ILongCollection.Count ILongCollection.IsSynchronized ILongCollection.SyncRoot ILongCollection.CopyTo(Array, long) IEnumerable.GetEnumerator() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties IsFixedSize Gets a value indicating whether the ILongList has a fixed size. bool IsFixedSize { get; } Property Value bool IsReadOnly Gets a value indicating whether the ILongList is read-only. bool IsReadOnly { get; } Property Value bool this[long] Gets or sets the element at the specified index. object this[long index] { get; set; } Parameters index long The zero-based index of the element to get or set. Property Value object Methods Add(object) Adds an item to the ILongList. long Add(object value) Parameters value object The object to add to the ILongList. Returns long The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. Clear() Removes all items from the ILongList. void Clear() Contains(object) Determines whether the ILongList contains a specific value. bool Contains(object value) Parameters value object The object to locate in the ILongList. Returns bool true if the Object is found in the ILongList; otherwise, false. IndexOf(object) Determines the index of a specific item in the ILongList. long IndexOf(object value) Parameters value object The object to locate in the ILongList. Returns long The index of value if found in the list; otherwise, -1. Insert(long, object) Inserts an item to the ILongList at the specified index. void Insert(long index, object value) Parameters index long The zero-based index at which value should be inserted. value object The object to insert into the ILongList. Remove(object) Removes the first occurrence of a specific object from the ILongList. void Remove(object value) Parameters value object The object to remove from the ILongList. RemoveAt(long) Removes the ILongList item at the specified index. void RemoveAt(long index) Parameters index long The zero-based index of the item to remove."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Collections.html",
    "title": "Namespace Cobilas.Collections | Cobilas Documentation",
    "keywords": "Namespace Cobilas.Collections Classes ArrayManipulation Array manipulation class. ArrayToIEnumerator<T> Transforms an array into an enumerator. ICollectionToIEnumerator<T> Transforms a collection into an enumerator. Interfaces ILongCollection Defines size, enumerators, and synchronization methods for all long non-generic collections. ILongList Represents a long, non-generic collection of objects that can be accessed individually by index."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFBase.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFBase.html",
    "title": "Class ATLFBase | Cobilas Documentation",
    "keywords": "Class ATLFBase Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll Base class for all ATLF classes. public abstract class ATLFBase : IDisposable Inheritance object ATLFBase Implements IDisposable Derived ATLFReader ATLFWriter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties CloseFlow This property is used to close the workflow automatically. This property should be used in cases where you directly access a stream. Example: when a flow is called using the File.Open(string) method. protected abstract bool CloseFlow { get; set; } Property Value bool Closed Indicate whether the flow has been closed. public abstract bool Closed { get; protected set; } Property Value bool Encoding Sets or returns the encoding used. public abstract Encoding Encoding { get; set; } Property Value Encoding Indent Determines whether text should be indented. public abstract bool Indent { get; set; } Property Value bool NodeCount The number of ATLF nodes stored. public abstract long NodeCount { get; } Property Value long Nodes Where ATLF nodes are stored. protected abstract ATLFNode[] Nodes { get; set; } Property Value ATLFNode[] RefObject Sets or returns the current stream. protected abstract MarshalByRefObject RefObject { get; set; } Property Value MarshalByRefObject TargetVersion Represents the version that the ATLF object is using. public abstract string TargetVersion { get; set; } Property Value string Methods Close() Allows you to close the current flow. public abstract void Close() Dispose() Allows you to discard the current stream. public abstract void Dispose()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFException.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFException.html",
    "title": "Class ATLFException | Cobilas Documentation",
    "keywords": "Class ATLFException Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll [Serializable] public class ATLFException : Exception, ISerializable, _Exception Inheritance object Exception ATLFException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors ATLFException() public ATLFException() ATLFException(SerializationInfo, StreamingContext) protected ATLFException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext ATLFException(string) public ATLFException(string message) Parameters message string ATLFException(string, Exception) public ATLFException(string message, Exception inner) Parameters message string inner Exception Methods ATLFClosed() msg:The ATLFWriter object has already been closed. public static InvalidOperationException ATLFClosed() Returns InvalidOperationException ATLFFlowAfterClosing() msg:It is not possible to release resources to the flow after closing the ATLF object. public static InvalidOperationException ATLFFlowAfterClosing() Returns InvalidOperationException ATLFReaderAfterClosing() public static InvalidOperationException ATLFReaderAfterClosing() Returns InvalidOperationException ATLFReaderTagAfterClosing() public static InvalidOperationException ATLFReaderTagAfterClosing() Returns InvalidOperationException ATLFTagsAfterClosing() public static InvalidOperationException ATLFTagsAfterClosing() Returns InvalidOperationException GetATLFException(string, params object[]) public static ATLFException GetATLFException(string format, params object[] args) Parameters format string args object[] Returns ATLFException"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFNode.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFNode.html",
    "title": "Struct ATLFNode | Cobilas Documentation",
    "keywords": "Struct ATLFNode Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll Represents an ATLF node. public struct ATLFNode : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Name public string Name { get; } Property Value string NodeType public ATLFNodeType NodeType { get; } Property Value ATLFNodeType Value public string Value { get; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFNodeType.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFNodeType.html",
    "title": "Enum ATLFNodeType | Cobilas Documentation",
    "keywords": "Enum ATLFNodeType Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll Represents the ATLF node type. public enum ATLFNodeType : byte Extension Methods Enum_CB_Extension.Format(Enum, object, string) Enum_CB_Extension.GetEnumPair(Enum) Enum_CB_Extension.GetEnumPairs(Enum) Enum_CB_Extension.GetName(Enum) Enum_CB_Extension.GetName(Enum, object) Enum_CB_Extension.GetNames(Enum) Enum_CB_Extension.HasFlag(Enum, params Enum[]) Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Fields Comment = 0 ATLF Comment. Spacing = 2 The spacing used in the ATLF file. Tag = 1 ATLF element."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFReader.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFReader.html",
    "title": "Class ATLFReader | Cobilas Documentation",
    "keywords": "Class ATLFReader Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll Base class for ATLF read classes. public abstract class ATLFReader : ATLFBase, IDisposable, IEnumerable<ATLFNode>, IEnumerable Inheritance object ATLFBase ATLFReader Implements IDisposable IEnumerable<ATLFNode> IEnumerable Derived ATLFSBReader ATLFTBReader Inherited Members ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Methods Create(Stream) public static ATLFReader Create(Stream stream) Parameters stream Stream Returns ATLFReader Create(TextReader) public static ATLFReader Create(TextReader text) Parameters text TextReader Returns ATLFReader Create(string) public static ATLFReader Create(string filePath) Parameters filePath string Returns ATLFReader Create(StringBuilder) public static ATLFReader Create(StringBuilder builder) Parameters builder StringBuilder Returns ATLFReader Create<T>(Stream) public static T Create<T>(Stream stream) where T : ATLFSBReader Parameters stream Stream Returns T Type Parameters T Create<T>(TextReader) public static T Create<T>(TextReader text) where T : ATLFTBReader Parameters text TextReader Returns T Type Parameters T Create<T>(string) public static T Create<T>(string filePath) where T : ATLFSBReader Parameters filePath string Returns T Type Parameters T Create<T>(StringBuilder) public static T Create<T>(StringBuilder builder) where T : ATLFTBReader Parameters builder StringBuilder Returns T Type Parameters T GetATLFDecoding(string) Gets the ATLF encoding. protected abstract ATLFDecoding GetATLFDecoding(string targetVersion) Parameters targetVersion string Returns ATLFDecoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. GetAllComments() Gets all comments from the ATLF file. public abstract ATLFNode[] GetAllComments() Returns ATLFNode[] GetEnumerator() Gets all nodes within the buffer. public abstract IEnumerator<ATLFNode> GetEnumerator() Returns IEnumerator<ATLFNode> GetHeader() Gets the ATLF header tags. public abstract ATLFNode[] GetHeader() Returns ATLFNode[] GetTag(string) Gets the value of the tag. public abstract string GetTag(string name) Parameters name string The name of the target tag. Returns string GetTagGroup(string) Gets a group of ATLF tags within a path. public abstract ATLFNode[] GetTagGroup(string path) Parameters path string Returns ATLFNode[] Returns a list of ATLF tags according to a path. Example: there are three nodes with the name com.cob.lib.tag1, com.cob.lib.tag2 and com.cob.cli.tag-1 and passing in the path parameter com.cob.lib the tags tag1 and tag2 will be obtained. Reader() Starts the process of reading the ATLF file. public abstract void Reader()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFSBReader.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFSBReader.html",
    "title": "Class ATLFSBReader | Cobilas Documentation",
    "keywords": "Class ATLFSBReader Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public abstract class ATLFSBReader : ATLFReader, IDisposable, IEnumerable<ATLFNode>, IEnumerable Inheritance object ATLFBase ATLFReader ATLFSBReader Implements IDisposable IEnumerable<ATLFNode> IEnumerable Derived ATLFStreamReader Inherited Members ATLFReader.Reader() ATLFReader.GetHeader() ATLFReader.GetTag(string) ATLFReader.GetAllComments() ATLFReader.GetTagGroup(string) ATLFReader.GetEnumerator() ATLFReader.GetATLFDecoding(string) ATLFReader.Create<T>(Stream) ATLFReader.Create<T>(string) ATLFReader.Create<T>(TextReader) ATLFReader.Create<T>(StringBuilder) ATLFReader.Create(Stream) ATLFReader.Create(string) ATLFReader.Create(TextReader) ATLFReader.Create(StringBuilder) ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Stream Represents the stream converted to Stream. protected abstract Stream Stream { get; set; } Property Value Stream"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFSBWriter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFSBWriter.html",
    "title": "Class ATLFSBWriter | Cobilas Documentation",
    "keywords": "Class ATLFSBWriter Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public abstract class ATLFSBWriter : ATLFWriter, IDisposable Inheritance object ATLFBase ATLFWriter ATLFSBWriter Implements IDisposable Derived ATLFStreamWriter Inherited Members ATLFWriter.IndentChars ATLFWriter.Flush() ATLFWriter.WriteHeader() ATLFWriter.WriteComment(string) ATLFWriter.WriteWhitespace(string) ATLFWriter.WriteNode(string, string) ATLFWriter.WriteWhitespace(int, string) ATLFWriter.GetATLFEncoding(string) ATLFWriter.AddNode(string, string, ATLFNodeType) ATLFWriter.Create<T>(Stream) ATLFWriter.Create<T>(string) ATLFWriter.Create<T>(TextWriter) ATLFWriter.Create<T>(StringBuilder) ATLFWriter.Create<T>(StringBuilder, IFormatProvider) ATLFWriter.Create(Stream) ATLFWriter.Create(string) ATLFWriter.Create(TextWriter) ATLFWriter.Create(StringBuilder) ATLFWriter.Create(StringBuilder, IFormatProvider) ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Stream Represents the stream converted to Stream. protected abstract Stream Stream { get; set; } Property Value Stream"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFStreamReader.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFStreamReader.html",
    "title": "Class ATLFStreamReader | Cobilas Documentation",
    "keywords": "Class ATLFStreamReader Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public class ATLFStreamReader : ATLFSBReader, IDisposable, IEnumerable<ATLFNode>, IEnumerable Inheritance object ATLFBase ATLFReader ATLFSBReader ATLFStreamReader Implements IDisposable IEnumerable<ATLFNode> IEnumerable Inherited Members ATLFReader.Create<T>(Stream) ATLFReader.Create<T>(string) ATLFReader.Create<T>(TextReader) ATLFReader.Create<T>(StringBuilder) ATLFReader.Create(Stream) ATLFReader.Create(string) ATLFReader.Create(TextReader) ATLFReader.Create(StringBuilder) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties CloseFlow This property is used to close the workflow automatically. This property should be used in cases where you directly access a stream. Example: when a flow is called using the File.Open(string) method. protected override bool CloseFlow { get; set; } Property Value bool Closed Indicate whether the flow has been closed. public override bool Closed { get; protected set; } Property Value bool Encoding Sets or returns the encoding used. public override Encoding Encoding { get; set; } Property Value Encoding Indent Determines whether text should be indented. public override bool Indent { get; set; } Property Value bool NodeCount The number of ATLF nodes stored. public override long NodeCount { get; } Property Value long Nodes Where ATLF nodes are stored. protected override ATLFNode[] Nodes { get; set; } Property Value ATLFNode[] RefObject Sets or returns the current stream. protected override MarshalByRefObject RefObject { get; set; } Property Value MarshalByRefObject Stream Represents the stream converted to Stream. protected override Stream Stream { get; set; } Property Value Stream TargetVersion Represents the version that the ATLF object is using. public override string TargetVersion { get; set; } Property Value string Methods Close() Allows you to close the current flow. public override void Close() Dispose() Allows you to discard the current stream. public override void Dispose() Dispose(bool) Performs an internal disposal of the object. protected virtual void Dispose(bool disposing) Parameters disposing bool ~ATLFStreamReader() protected ~ATLFStreamReader() GetATLFDecoding(string) Gets the ATLF encoding. protected override ATLFDecoding GetATLFDecoding(string targetVersion) Parameters targetVersion string Returns ATLFDecoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. GetAllComments() Gets all comments from the ATLF file. public override ATLFNode[] GetAllComments() Returns ATLFNode[] GetEnumerator() Gets all nodes within the buffer. public override IEnumerator<ATLFNode> GetEnumerator() Returns IEnumerator<ATLFNode> GetHeader() Gets the ATLF header tags. public override ATLFNode[] GetHeader() Returns ATLFNode[] GetTag(string) Gets the value of the tag. public override string GetTag(string name) Parameters name string The name of the target tag. Returns string GetTagGroup(string) Gets a group of ATLF tags within a path. public override ATLFNode[] GetTagGroup(string path) Parameters path string Returns ATLFNode[] Returns a list of ATLF tags according to a path. Example: there are three nodes with the name com.cob.lib.tag1, com.cob.lib.tag2 and com.cob.cli.tag-1 and passing in the path parameter com.cob.lib the tags tag1 and tag2 will be obtained. Reader() Starts the process of reading the ATLF file. public override void Reader()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFStreamWriter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFStreamWriter.html",
    "title": "Class ATLFStreamWriter | Cobilas Documentation",
    "keywords": "Class ATLFStreamWriter Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public class ATLFStreamWriter : ATLFSBWriter, IDisposable Inheritance object ATLFBase ATLFWriter ATLFSBWriter ATLFStreamWriter Implements IDisposable Inherited Members ATLFWriter.Create<T>(Stream) ATLFWriter.Create<T>(string) ATLFWriter.Create<T>(TextWriter) ATLFWriter.Create<T>(StringBuilder) ATLFWriter.Create<T>(StringBuilder, IFormatProvider) ATLFWriter.Create(Stream) ATLFWriter.Create(string) ATLFWriter.Create(TextWriter) ATLFWriter.Create(StringBuilder) ATLFWriter.Create(StringBuilder, IFormatProvider) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties CloseFlow This property is used to close the workflow automatically. This property should be used in cases where you directly access a stream. Example: when a flow is called using the File.Open(string) method. protected override bool CloseFlow { get; set; } Property Value bool Closed Indicate whether the flow has been closed. public override bool Closed { get; protected set; } Property Value bool Encoding Sets or returns the encoding used. public override Encoding Encoding { get; set; } Property Value Encoding Indent Determines whether text should be indented. public override bool Indent { get; set; } Property Value bool IndentChars Represents the character of indentation. public override string IndentChars { get; set; } Property Value string NodeCount The number of ATLF nodes stored. public override long NodeCount { get; } Property Value long Nodes Where ATLF nodes are stored. protected override ATLFNode[] Nodes { get; set; } Property Value ATLFNode[] RefObject Sets or returns the current stream. protected override MarshalByRefObject RefObject { get; set; } Property Value MarshalByRefObject Stream Represents the stream converted to Stream. protected override Stream Stream { get; set; } Property Value Stream TargetVersion Represents the version that the ATLF object is using. public override string TargetVersion { get; set; } Property Value string Methods AddNode(string, string, ATLFNodeType) Adds a new node to the buffer. protected override void AddNode(string name, string value, ATLFNodeType nodeType) Parameters name string value string nodeType ATLFNodeType Close() Allows you to close the current flow. public override void Close() Dispose() Allows you to discard the current stream. public override void Dispose() Dispose(bool) Performs an internal disposal of the object. protected virtual void Dispose(bool disposing) Parameters disposing bool ~ATLFStreamWriter() protected ~ATLFStreamWriter() Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() GetATLFEncoding(string) Gets the ATLF encoding. protected override ATLFEncoding GetATLFEncoding(string targetVersion) Parameters targetVersion string Returns ATLFEncoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. WriteComment(string) Write a comment in the stream. public override void WriteComment(string value) Parameters value string Write the message. WriteHeader() Writes the atlf header to the stream. public override void WriteHeader() WriteIndentation() Performs automatic indentation. protected void WriteIndentation() WriteNode(string, string) Writes an ATLF node to the stream. public override void WriteNode(string name, string value) Parameters name string value string WriteWhitespace(int, string) Writes an escape character to the stream. public override void WriteWhitespace(int count, string spacing) Parameters count int spacing string WriteWhitespace(string) Writes an escape character to the stream. public override void WriteWhitespace(string spacing) Parameters spacing string"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTBReader.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTBReader.html",
    "title": "Class ATLFTBReader | Cobilas Documentation",
    "keywords": "Class ATLFTBReader Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public abstract class ATLFTBReader : ATLFReader, IDisposable, IEnumerable<ATLFNode>, IEnumerable Inheritance object ATLFBase ATLFReader ATLFTBReader Implements IDisposable IEnumerable<ATLFNode> IEnumerable Derived ATLFTextReader Inherited Members ATLFReader.Reader() ATLFReader.GetHeader() ATLFReader.GetTag(string) ATLFReader.GetAllComments() ATLFReader.GetTagGroup(string) ATLFReader.GetEnumerator() ATLFReader.GetATLFDecoding(string) ATLFReader.Create<T>(Stream) ATLFReader.Create<T>(string) ATLFReader.Create<T>(TextReader) ATLFReader.Create<T>(StringBuilder) ATLFReader.Create(Stream) ATLFReader.Create(string) ATLFReader.Create(TextReader) ATLFReader.Create(StringBuilder) ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Stream Represents the stream converted to TextWriter. protected abstract TextReader Stream { get; set; } Property Value TextReader"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTBWriter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTBWriter.html",
    "title": "Class ATLFTBWriter | Cobilas Documentation",
    "keywords": "Class ATLFTBWriter Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public abstract class ATLFTBWriter : ATLFWriter, IDisposable Inheritance object ATLFBase ATLFWriter ATLFTBWriter Implements IDisposable Derived ATLFTextWriter Inherited Members ATLFWriter.IndentChars ATLFWriter.Flush() ATLFWriter.WriteHeader() ATLFWriter.WriteComment(string) ATLFWriter.WriteWhitespace(string) ATLFWriter.WriteNode(string, string) ATLFWriter.WriteWhitespace(int, string) ATLFWriter.GetATLFEncoding(string) ATLFWriter.AddNode(string, string, ATLFNodeType) ATLFWriter.Create<T>(Stream) ATLFWriter.Create<T>(string) ATLFWriter.Create<T>(TextWriter) ATLFWriter.Create<T>(StringBuilder) ATLFWriter.Create<T>(StringBuilder, IFormatProvider) ATLFWriter.Create(Stream) ATLFWriter.Create(string) ATLFWriter.Create(TextWriter) ATLFWriter.Create(StringBuilder) ATLFWriter.Create(StringBuilder, IFormatProvider) ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Stream Represents the stream converted to TextWriter. protected abstract TextWriter Stream { get; set; } Property Value TextWriter"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTextReader.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTextReader.html",
    "title": "Class ATLFTextReader | Cobilas Documentation",
    "keywords": "Class ATLFTextReader Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public class ATLFTextReader : ATLFTBReader, IDisposable, IEnumerable<ATLFNode>, IEnumerable Inheritance object ATLFBase ATLFReader ATLFTBReader ATLFTextReader Implements IDisposable IEnumerable<ATLFNode> IEnumerable Inherited Members ATLFReader.Create<T>(Stream) ATLFReader.Create<T>(string) ATLFReader.Create<T>(TextReader) ATLFReader.Create<T>(StringBuilder) ATLFReader.Create(Stream) ATLFReader.Create(string) ATLFReader.Create(TextReader) ATLFReader.Create(StringBuilder) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties CloseFlow This property is used to close the workflow automatically. This property should be used in cases where you directly access a stream. Example: when a flow is called using the File.Open(string) method. protected override bool CloseFlow { get; set; } Property Value bool Closed Indicate whether the flow has been closed. public override bool Closed { get; protected set; } Property Value bool Encoding Sets or returns the encoding used. public override Encoding Encoding { get; set; } Property Value Encoding Indent Determines whether text should be indented. public override bool Indent { get; set; } Property Value bool NodeCount The number of ATLF nodes stored. public override long NodeCount { get; } Property Value long Nodes Where ATLF nodes are stored. protected override ATLFNode[] Nodes { get; set; } Property Value ATLFNode[] RefObject Sets or returns the current stream. protected override MarshalByRefObject RefObject { get; set; } Property Value MarshalByRefObject Stream Represents the stream converted to TextWriter. protected override TextReader Stream { get; set; } Property Value TextReader TargetVersion Represents the version that the ATLF object is using. public override string TargetVersion { get; set; } Property Value string Methods Close() Allows you to close the current flow. public override void Close() Dispose() Allows you to discard the current stream. public override void Dispose() Dispose(bool) Performs an internal disposal of the object. protected virtual void Dispose(bool disposing) Parameters disposing bool ~ATLFTextReader() protected ~ATLFTextReader() GetATLFDecoding(string) Gets the ATLF encoding. protected override ATLFDecoding GetATLFDecoding(string targetVersion) Parameters targetVersion string Returns ATLFDecoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. GetAllComments() Gets all comments from the ATLF file. public override ATLFNode[] GetAllComments() Returns ATLFNode[] GetEnumerator() Gets all nodes within the buffer. public override IEnumerator<ATLFNode> GetEnumerator() Returns IEnumerator<ATLFNode> GetHeader() Gets the ATLF header tags. public override ATLFNode[] GetHeader() Returns ATLFNode[] GetTag(string) Gets the value of the tag. public override string GetTag(string name) Parameters name string The name of the target tag. Returns string GetTagGroup(string) Gets a group of ATLF tags within a path. public override ATLFNode[] GetTagGroup(string path) Parameters path string Returns ATLFNode[] Returns a list of ATLF tags according to a path. Example: there are three nodes with the name com.cob.lib.tag1, com.cob.lib.tag2 and com.cob.cli.tag-1 and passing in the path parameter com.cob.lib the tags tag1 and tag2 will be obtained. Reader() Starts the process of reading the ATLF file. public override void Reader()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTextWriter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFTextWriter.html",
    "title": "Class ATLFTextWriter | Cobilas Documentation",
    "keywords": "Class ATLFTextWriter Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll public class ATLFTextWriter : ATLFTBWriter, IDisposable Inheritance object ATLFBase ATLFWriter ATLFTBWriter ATLFTextWriter Implements IDisposable Inherited Members ATLFWriter.Create<T>(Stream) ATLFWriter.Create<T>(string) ATLFWriter.Create<T>(TextWriter) ATLFWriter.Create<T>(StringBuilder) ATLFWriter.Create<T>(StringBuilder, IFormatProvider) ATLFWriter.Create(Stream) ATLFWriter.Create(string) ATLFWriter.Create(TextWriter) ATLFWriter.Create(StringBuilder) ATLFWriter.Create(StringBuilder, IFormatProvider) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties CloseFlow This property is used to close the workflow automatically. This property should be used in cases where you directly access a stream. Example: when a flow is called using the File.Open(string) method. protected override bool CloseFlow { get; set; } Property Value bool Closed Indicate whether the flow has been closed. public override bool Closed { get; protected set; } Property Value bool Encoding Sets or returns the encoding used. public override Encoding Encoding { get; set; } Property Value Encoding Indent Determines whether text should be indented. public override bool Indent { get; set; } Property Value bool IndentChars Represents the character of indentation. public override string IndentChars { get; set; } Property Value string NodeCount The number of ATLF nodes stored. public override long NodeCount { get; } Property Value long Returns the number of nodes already written. Nodes Where ATLF nodes are stored. protected override ATLFNode[] Nodes { get; set; } Property Value ATLFNode[] RefObject Sets or returns the current stream. protected override MarshalByRefObject RefObject { get; set; } Property Value MarshalByRefObject Stream Represents the stream converted to TextWriter. protected override TextWriter Stream { get; set; } Property Value TextWriter TargetVersion Represents the version that the ATLF object is using. public override string TargetVersion { get; set; } Property Value string By default the value is string.Empty which represents the current version. Methods AddNode(string, string, ATLFNodeType) Adds a new node to the buffer. protected override void AddNode(string name, string value, ATLFNodeType nodeType) Parameters name string value string nodeType ATLFNodeType Close() Allows you to close the current flow. public override void Close() Dispose() Allows you to discard the current stream. public override void Dispose() Dispose(bool) Performs an internal disposal of the object. protected virtual void Dispose(bool disposing) Parameters disposing bool ~ATLFTextWriter() protected ~ATLFTextWriter() Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() GetATLFEncoding(string) Gets the ATLF encoding. protected override ATLFEncoding GetATLFEncoding(string targetVersion) Parameters targetVersion string Returns ATLFEncoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. WriteComment(string) Write a comment in the stream. public override void WriteComment(string value) Parameters value string Write the message. WriteHeader() Writes the atlf header to the stream. public override void WriteHeader() WriteIndentation() Performs automatic indentation. protected void WriteIndentation() WriteNode(string, string) Writes an ATLF node to the stream. public override void WriteNode(string name, string value) Parameters name string value string WriteWhitespace(int, string) Writes an escape character to the stream. public override void WriteWhitespace(int count, string spacing) Parameters count int spacing string WriteWhitespace(string) Writes an escape character to the stream. public override void WriteWhitespace(string spacing) Parameters spacing string"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFWriter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.ATLFWriter.html",
    "title": "Class ATLFWriter | Cobilas Documentation",
    "keywords": "Class ATLFWriter Namespace Cobilas.IO.Atlf Assembly Cobilas.Core.dll Base class for ATLF writing classes. public abstract class ATLFWriter : ATLFBase, IDisposable Inheritance object ATLFBase ATLFWriter Implements IDisposable Derived ATLFSBWriter ATLFTBWriter Inherited Members ATLFBase.NodeCount ATLFBase.Indent ATLFBase.Encoding ATLFBase.TargetVersion ATLFBase.Closed ATLFBase.CloseFlow ATLFBase.Nodes ATLFBase.RefObject ATLFBase.Close() ATLFBase.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties IndentChars Represents the character of indentation. public abstract string IndentChars { get; set; } Property Value string Methods AddNode(string, string, ATLFNodeType) Adds a new node to the buffer. protected abstract void AddNode(string name, string value, ATLFNodeType nodeType) Parameters name string value string nodeType ATLFNodeType Create(Stream) public static ATLFWriter Create(Stream stream) Parameters stream Stream Returns ATLFWriter Create(TextWriter) public static ATLFWriter Create(TextWriter text) Parameters text TextWriter Returns ATLFWriter Create(string) public static ATLFWriter Create(string filePath) Parameters filePath string Returns ATLFWriter Create(StringBuilder) public static ATLFWriter Create(StringBuilder text) Parameters text StringBuilder Returns ATLFWriter Create(StringBuilder, IFormatProvider) public static ATLFWriter Create(StringBuilder text, IFormatProvider formatProvider) Parameters text StringBuilder formatProvider IFormatProvider Returns ATLFWriter Create<T>(Stream) public static T Create<T>(Stream stream) where T : ATLFSBWriter Parameters stream Stream Returns T Type Parameters T Create<T>(TextWriter) public static T Create<T>(TextWriter text) where T : ATLFTBWriter Parameters text TextWriter Returns T Type Parameters T Create<T>(string) public static T Create<T>(string filePath) where T : ATLFSBWriter Parameters filePath string Returns T Type Parameters T Create<T>(StringBuilder) public static T Create<T>(StringBuilder text) where T : ATLFTBWriter Parameters text StringBuilder Returns T Type Parameters T Create<T>(StringBuilder, IFormatProvider) public static T Create<T>(StringBuilder text, IFormatProvider formatProvider) where T : ATLFTBWriter Parameters text StringBuilder formatProvider IFormatProvider Returns T Type Parameters T Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public abstract void Flush() GetATLFEncoding(string) Gets the ATLF encoding. protected abstract ATLFEncoding GetATLFEncoding(string targetVersion) Parameters targetVersion string Returns ATLFEncoding The method returns the encoder corresponding to the version passed in the targetVersion parameter. If the previous version does not exist, the default version will be returned. WriteComment(string) Write a comment in the stream. public abstract void WriteComment(string value) Parameters value string Write the message. WriteHeader() Writes the atlf header to the stream. public abstract void WriteHeader() WriteNode(string, string) Writes an ATLF node to the stream. public abstract void WriteNode(string name, string value) Parameters name string value string WriteWhitespace(int, string) Writes an escape character to the stream. public abstract void WriteWhitespace(int count, string value) Parameters count int value string WriteWhitespace(string) Writes an escape character to the stream. public abstract void WriteWhitespace(string value) Parameters value string"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.CharacterCursor.LineEndColumn.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.CharacterCursor.LineEndColumn.html",
    "title": "Struct CharacterCursor.LineEndColumn | Cobilas Documentation",
    "keywords": "Struct CharacterCursor.LineEndColumn Namespace Cobilas.IO.Atlf.Components Assembly Cobilas.Core.dll Represents the current column, row and index of the reading cursor. public readonly struct CharacterCursor.LineEndColumn Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors LineEndColumn(long, long, long) public LineEndColumn(long line, long column, long index) Parameters line long column long index long Properties Column Returns the column where the reading cursor is. public long Column { get; } Property Value long Default Default value.(L:1, C:1, I:0) public static CharacterCursor.LineEndColumn Default { get; } Property Value CharacterCursor.LineEndColumn Index Returns the index of where the reading cursor is. public long Index { get; } Property Value long Line Returns the line where the reading cursor is. public long Line { get; } Property Value long Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.CharacterCursor.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.CharacterCursor.html",
    "title": "Class CharacterCursor | Cobilas Documentation",
    "keywords": "Class CharacterCursor Namespace Cobilas.IO.Atlf.Components Assembly Cobilas.Core.dll Allows you to read and modify a string of characters. public sealed class CharacterCursor : IDisposable Inheritance object CharacterCursor Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors CharacterCursor(byte[], Encoding) public CharacterCursor(byte[] bytes, Encoding encoding) Parameters bytes byte[] encoding Encoding CharacterCursor(char[]) public CharacterCursor(char[] characters) Parameters characters char[] CharacterCursor(string) public CharacterCursor(string text) Parameters text string CharacterCursor(StringBuilder) public CharacterCursor(StringBuilder text) Parameters text StringBuilder Properties Column Returns the current reading cursor column. public long Column { get; } Property Value long Count Returns the length of the string. public long Count { get; } Property Value long CurrentCharacter Returns the current character. public char CurrentCharacter { get; } Property Value char Cursor Returns a current representation of the row, column, and index of the string being read. public CharacterCursor.LineEndColumn Cursor { get; } Property Value CharacterCursor.LineEndColumn Index Returns the current index of the string being read. public long Index { get; } Property Value long this[long] public char this[long index] { get; } Parameters index long Property Value char Line Returns the current line of the reading cursor. public long Line { get; } Property Value long Methods AddEscape(char) Add escape character. public void AddEscape(char escape) Parameters escape char CharIsEqualToIndex(char) Compare a character with the current character. public bool CharIsEqualToIndex(char character) Parameters character char Returns bool CharIsEqualToIndex(params char[]) Compare a character with the current character. public bool CharIsEqualToIndex(params char[] characters) Parameters characters char[] Returns bool CharIsEqualToIndex(string) Compare a character with the current character. public bool CharIsEqualToIndex(string text) Parameters text string Returns bool CharIsEqualToIndex(params string[]) Compare a character with the current character. public bool CharIsEqualToIndex(params string[] texts) Parameters texts string[] Returns bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() MoveToCharacter() Move the reading cursor to the next character. public bool MoveToCharacter() Returns bool The method will return true whenever there are characters to read. MoveToCharacter(long) Move the reading cursor to the next character. public bool MoveToCharacter(long index) Parameters index long How many jumps the cursor must make to move to the next character. Returns bool The method will return true whenever there are characters to read. Reset() Reset the position of the index, line and column of the reading course. public void Reset() SliceText(long, long) Allows you to make a cut in the character string. public string SliceText(long index, long count) Parameters index long The index that will start the clipping. count long The number of characters that will be cut. Returns string The method will return a string containing the string of characters that were cut. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Components.html",
    "title": "Namespace Cobilas.IO.Atlf.Components | Cobilas Documentation",
    "keywords": "Namespace Cobilas.IO.Atlf.Components Classes CharacterCursor Allows you to read and modify a string of characters. Structs CharacterCursor.LineEndColumn Represents the current column, row and index of the reading cursor."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFDecoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFDecoding.html",
    "title": "Class ATLFDecoding | Cobilas Documentation",
    "keywords": "Class ATLFDecoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll Decoding base class. public abstract class ATLFDecoding Inheritance object ATLFDecoding Derived ATLFVS10Decoding NullATLFDecoding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Fields Null Represents a null value of type NullATLFDecoding. public static readonly ATLFDecoding Null Field Value ATLFDecoding Properties Version Represents the decoder version. public abstract string Version { get; } Property Value string Methods Reader(params object[]) Read a list of objects. public abstract ATLFNode[] Reader(params object[] args) Parameters args object[] Returns ATLFNode[] Reader4Byte(params object[]) Read a list of objects. public abstract ATLFNode[] Reader4Byte(params object[] args) Parameters args object[] Returns ATLFNode[] ValidCharacter(char) Checks whether the character is valid. protected abstract bool ValidCharacter(char c) Parameters c char Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFEncoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFEncoding.html",
    "title": "Class ATLFEncoding | Cobilas Documentation",
    "keywords": "Class ATLFEncoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll Encoding base class. public abstract class ATLFEncoding Inheritance object ATLFEncoding Derived ATLFVS10Encoding NullATLFEncoding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Fields Null Represents a null value of type NullATLFEncoding. public static readonly ATLFEncoding Null Field Value ATLFEncoding Properties Version Represents the encoder version. public abstract string Version { get; } Property Value string Methods Writer(params object[]) Writes a list of objects. public abstract string Writer(params object[] args) Parameters args object[] Returns string Writer4Byte(params object[]) Writes a list of objects. public abstract byte[] Writer4Byte(params object[] args) Parameters args object[] Returns byte[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFVS10Decoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFVS10Decoding.html",
    "title": "Class ATLFVS10Decoding | Cobilas Documentation",
    "keywords": "Class ATLFVS10Decoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll public class ATLFVS10Decoding : ATLFDecoding Inheritance object ATLFDecoding ATLFVS10Decoding Inherited Members ATLFDecoding.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Version Represents the decoder version. public override string Version { get; } Property Value string Methods GetComment(CharacterCursor) protected virtual ATLFNode GetComment(CharacterCursor cursor) Parameters cursor CharacterCursor Returns ATLFNode GetTag(CharacterCursor) protected virtual ATLFNode GetTag(CharacterCursor cursor) Parameters cursor CharacterCursor Returns ATLFNode GetTag(CharacterCursor, ATLFNodeType) protected virtual ATLFNode GetTag(CharacterCursor cursor, ATLFNodeType nodeType) Parameters cursor CharacterCursor nodeType ATLFNodeType Returns ATLFNode Reader(CharacterCursor) protected virtual ATLFNode[] Reader(CharacterCursor cursor) Parameters cursor CharacterCursor Returns ATLFNode[] Reader(params object[]) Read a list of objects. public override ATLFNode[] Reader(params object[] args) Parameters args object[] args[0] = string Returns ATLFNode[] Reader4Byte(params object[]) Read a list of objects. public override ATLFNode[] Reader4Byte(params object[] args) Parameters args object[] args[0] = byte[] args[1] = Encoding Returns ATLFNode[] ValidCharacter(char) Checks whether the character is valid. protected override bool ValidCharacter(char c) Parameters c char Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFVS10Encoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.ATLFVS10Encoding.html",
    "title": "Class ATLFVS10Encoding | Cobilas Documentation",
    "keywords": "Class ATLFVS10Encoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll public class ATLFVS10Encoding : ATLFEncoding Inheritance object ATLFEncoding ATLFVS10Encoding Inherited Members ATLFEncoding.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Version Represents the encoder version. public override string Version { get; } Property Value string Methods Writer(ATLFNode[]) protected virtual string Writer(ATLFNode[] nodes) Parameters nodes ATLFNode[] Returns string Writer(params object[]) Writes a list of objects. public override string Writer(params object[] args) Parameters args object[] args[0] = ATLFNode[] Returns string Writer4Byte(params object[]) Writes a list of objects. public override byte[] Writer4Byte(params object[] args) Parameters args object[] args[0] = ATLFNode[] args[1] = Encoding Returns byte[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.EncodingsCollection.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.EncodingsCollection.html",
    "title": "Class EncodingsCollection | Cobilas Documentation",
    "keywords": "Class EncodingsCollection Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll Represents a collection of ATLF encoding and decoding. public static class EncodingsCollection Inheritance object EncodingsCollection Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ContainsDecoding(string) Checks whether a certain version of the ATLF decoder exists. public static bool ContainsDecoding(string version) Parameters version string Returns bool ContainsEncoding(string) Checks whether a given version of the ATLF encoder exists. public static bool ContainsEncoding(string version) Parameters version string Returns bool GetDecoding(string) Gets a specific version of the ATLF decoder. public static ATLFDecoding GetDecoding(string version) Parameters version string Returns ATLFDecoding GetDecodingVersionList() Gets a list of ATLF decoder versions. public static string[] GetDecodingVersionList() Returns string[] GetEncoding(string) Gets a specific version of the ATLF encoder. public static ATLFEncoding GetEncoding(string version) Parameters version string Returns ATLFEncoding GetEncodingVersionList() Gets a list of ATLF encoder versions. public static string[] GetEncodingVersionList() Returns string[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.NullATLFDecoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.NullATLFDecoding.html",
    "title": "Class NullATLFDecoding | Cobilas Documentation",
    "keywords": "Class NullATLFDecoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll public sealed class NullATLFDecoding : ATLFDecoding Inheritance object ATLFDecoding NullATLFDecoding Inherited Members ATLFDecoding.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Version Represents the decoder version. public override string Version { get; } Property Value string Methods Reader(params object[]) Read a list of objects. public override ATLFNode[] Reader(params object[] args) Parameters args object[] Returns ATLFNode[] Reader4Byte(params object[]) Read a list of objects. public override ATLFNode[] Reader4Byte(params object[] args) Parameters args object[] Returns ATLFNode[] ValidCharacter(char) Checks whether the character is valid. protected override bool ValidCharacter(char c) Parameters c char Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.NullATLFEncoding.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.NullATLFEncoding.html",
    "title": "Class NullATLFEncoding | Cobilas Documentation",
    "keywords": "Class NullATLFEncoding Namespace Cobilas.IO.Atlf.Text Assembly Cobilas.Core.dll public sealed class NullATLFEncoding : ATLFEncoding Inheritance object ATLFEncoding NullATLFEncoding Inherited Members ATLFEncoding.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Version Represents the encoder version. public override string Version { get; } Property Value string Methods Writer(params object[]) Writes a list of objects. public override string Writer(params object[] args) Parameters args object[] Returns string Writer4Byte(params object[]) Writes a list of objects. public override byte[] Writer4Byte(params object[] args) Parameters args object[] Returns byte[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.Text.html",
    "title": "Namespace Cobilas.IO.Atlf.Text | Cobilas Documentation",
    "keywords": "Namespace Cobilas.IO.Atlf.Text Classes ATLFDecoding Decoding base class. ATLFEncoding Encoding base class. ATLFVS10Decoding ATLFVS10Encoding EncodingsCollection Represents a collection of ATLF encoding and decoding. NullATLFDecoding NullATLFEncoding"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Atlf.html",
    "title": "Namespace Cobilas.IO.Atlf | Cobilas Documentation",
    "keywords": "Namespace Cobilas.IO.Atlf Classes ATLFBase Base class for all ATLF classes. ATLFException ATLFReader Base class for ATLF read classes. ATLFSBReader ATLFSBWriter ATLFStreamReader ATLFStreamWriter ATLFTBReader ATLFTBWriter ATLFTextReader ATLFTextWriter ATLFWriter Base class for ATLF writing classes. Structs ATLFNode Represents an ATLF node. Enums ATLFNodeType Represents the ATLF node type."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Binary.ScratchObject.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Binary.ScratchObject.html",
    "title": "Class ScratchObject | Cobilas Documentation",
    "keywords": "Class ScratchObject Namespace Cobilas.IO.Serialization.Binary Assembly Cobilas.Core.dll Base sketch object. [Serializable] public abstract class ScratchObject Inheritance object ScratchObject Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Name Draft name. public abstract string Name { get; } Property Value string Methods LoadScratchObject(string) Loads an object ScratchObject from a file. public static ScratchObject LoadScratchObject(string filePath) Parameters filePath string File path. Returns ScratchObject UnloadScratchObject(ScratchObject, string) Downloads draft object to a file. public static void UnloadScratchObject(ScratchObject scratch, string filePath) Parameters scratch ScratchObject Scratch object. filePath string Path of the file where the object will be downloaded. UnloadScratchObject(ScratchObject, string, string) Downloads draft object to a file. public static void UnloadScratchObject(ScratchObject scratch, string folderPath, string extension = \"sobj\") Parameters scratch ScratchObject Scratch object. folderPath string Path of the directory where the file will be created. extension string File extension. UnloadScratchObject(ScratchObject, string, string, string) Downloads draft object to a file. public static void UnloadScratchObject(ScratchObject scratch, string folderPath, string name, string extension = \"sobj\") Parameters scratch ScratchObject Scratch object. folderPath string Path of the directory where the file will be created. name string File name. extension string File extension."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Binary.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Binary.html",
    "title": "Namespace Cobilas.IO.Serialization.Binary | Cobilas Documentation",
    "keywords": "Namespace Cobilas.IO.Serialization.Binary Classes ScratchObject Base sketch object."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.Json.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.Json.html",
    "title": "Class Json | Cobilas Documentation",
    "keywords": "Class Json Namespace Cobilas.IO.Serialization.Json Assembly Cobilas.Core.dll public static class Json Inheritance object Json Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Deserialize(string) Deserializes the JSON to a .NET object using Newtonsoft.Json.JsonSerializerSettings. public static object Deserialize(string value) Parameters value string The JSON to deserialize. Returns object Deserialize(string, JsonSerializerSettings) Deserializes the JSON to a .NET object using Newtonsoft.Json.JsonSerializerSettings. public static object Deserialize(string value, JsonSerializerSettings settings) Parameters value string The JSON to deserialize. settings JsonSerializerSettings The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If this is null, default serialization settings will be used. Returns object Deserialize<T>(string) Deserializes the JSON to a .NET object using Newtonsoft.Json.JsonSerializerSettings. public static T Deserialize<T>(string value) Parameters value string The JSON to deserialize. Returns T Type Parameters T Deserialize<T>(string, JsonSerializerSettings) Deserializes the JSON to a .NET object using Newtonsoft.Json.JsonSerializerSettings. public static T Deserialize<T>(string value, JsonSerializerSettings settings) Parameters value string The JSON to deserialize. settings JsonSerializerSettings The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If this is null, default serialization settings will be used. Returns T Type Parameters T Serialize(object) Serializes the specified object to a JSON string using Newtonsoft.Json.JsonSerializerSettings. public static string Serialize(object value) Parameters value object The object to serialize. Returns string Serialize(object, JsonSerializerSettings) Serializes the specified object to a JSON string using Newtonsoft.Json.JsonSerializerSettings. public static string Serialize(object value, JsonSerializerSettings settings) Parameters value object The object to serialize. settings JsonSerializerSettings The Newtonsoft.Json.JsonSerializerSettings used to serialize the object. If this is null, default serialization settings will be used. Returns string Serialize(object, bool) Serializes the specified object to a JSON string using Newtonsoft.Json.JsonSerializerSettings. public static string Serialize(object value, bool Indented) Parameters value object The object to serialize. Indented bool This parameter allows you to format the json file. Returns string"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.JsonContractResolver.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.JsonContractResolver.html",
    "title": "Class JsonContractResolver | Cobilas Documentation",
    "keywords": "Class JsonContractResolver Namespace Cobilas.IO.Serialization.Json Assembly Cobilas.Core.dll Used by Newtonsoft.Json.JsonSerializer to resolve a Newtonsoft.Json.Serialization.JsonContract for a given Type. public class JsonContractResolver : DefaultContractResolver, IContractResolver Inheritance object DefaultContractResolver JsonContractResolver Implements IContractResolver Inherited Members DefaultContractResolver.ResolveContract(Type) DefaultContractResolver.GetSerializableMembers(Type) DefaultContractResolver.CreateObjectContract(Type) DefaultContractResolver.CreateConstructorParameters(ConstructorInfo, JsonPropertyCollection) DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty, ParameterInfo) DefaultContractResolver.ResolveContractConverter(Type) DefaultContractResolver.CreateDictionaryContract(Type) DefaultContractResolver.CreateArrayContract(Type) DefaultContractResolver.CreatePrimitiveContract(Type) DefaultContractResolver.CreateLinqContract(Type) DefaultContractResolver.CreateISerializableContract(Type) DefaultContractResolver.CreateDynamicContract(Type) DefaultContractResolver.CreateStringContract(Type) DefaultContractResolver.CreateContract(Type) DefaultContractResolver.CreateMemberValueProvider(MemberInfo) DefaultContractResolver.CreateProperty(MemberInfo, MemberSerialization) DefaultContractResolver.ResolvePropertyName(string) DefaultContractResolver.ResolveExtensionDataName(string) DefaultContractResolver.ResolveDictionaryKey(string) DefaultContractResolver.GetResolvedPropertyName(string) DefaultContractResolver.DynamicCodeGeneration DefaultContractResolver.DefaultMembersSearchFlags DefaultContractResolver.SerializeCompilerGeneratedMembers DefaultContractResolver.IgnoreSerializableInterface DefaultContractResolver.IgnoreSerializableAttribute DefaultContractResolver.IgnoreIsSpecifiedMembers DefaultContractResolver.IgnoreShouldSerializeMembers DefaultContractResolver.NamingStrategy object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Methods CreateProperties(Type, MemberSerialization) Creates properties for the given Newtonsoft.Json.Serialization.JsonContract. protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization) Parameters type Type The type to create properties for. memberSerialization MemberSerialization The member serialization mode for the type. Returns IList<JsonProperty> Properties for the given Newtonsoft.Json.Serialization.JsonContract."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.IO.Serialization.Json.html",
    "title": "Namespace Cobilas.IO.Serialization.Json | Cobilas Documentation",
    "keywords": "Namespace Cobilas.IO.Serialization.Json Classes Json JsonContractResolver Used by Newtonsoft.Json.JsonSerializer to resolve a Newtonsoft.Json.Serialization.JsonContract for a given Type."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Interrupter.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Interrupter.html",
    "title": "Struct Interrupter | Cobilas Documentation",
    "keywords": "Struct Interrupter Namespace Cobilas Assembly Cobilas.Core.dll Represents a list of switches. [Serializable] public struct Interrupter : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors Interrupter(int) Only one switch specifying the index will be used, the others will remain at false value. public Interrupter(int Capacity) Parameters Capacity int How many switches. Interrupter(int, bool) Only one switch specifying the index will be used, the others will remain at false value. public Interrupter(int Capacity, bool UseASwitch) Parameters Capacity int How many switches. UseASwitch bool Allows you to use one switch at a time. Properties CurrentIndex Returns the current switch index. public int CurrentIndex { get; } Property Value int this[int] Gets or sets a switch when specifying an index. public bool this[int Index] { get; set; } Parameters Index int Property Value bool UseASwitch This property allows the exchange of a single switch for multiple switches and vice versa. public bool UseASwitch { get; set; } Property Value bool Methods Dispose() Resource disposal. public void Dispose() ToString() Returns a text representation of the object. public override string ToString() Returns string"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.BasicCalculation.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.BasicCalculation.html",
    "title": "Class BasicCalculation | Cobilas Documentation",
    "keywords": "Class BasicCalculation Namespace Cobilas.Numeric Assembly Cobilas.Core.dll Basic functions of mathematical operations. public class BasicCalculation : CalculationsCollection Inheritance object CalculationsCollection BasicCalculation Inherited Members CalculationsCollection.Merge(CalculationsCollection, CalculationsCollection) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Calculations The list of calculation functions. public override MathOperator[] Calculations { get; protected set; } Property Value MathOperator[] OverwriteCalculations The list of calculation functions that will replace other calculation functions. public override MathOperator[] OverwriteCalculations { get; protected set; } Property Value MathOperator[] Methods Clac(double, string, double) Function responsible for calling a calculation function specified the sign of the mathematical operation. public override double Clac(double V1, string S, double V2) Parameters V1 double S string mathematical operator. V2 double Returns double Initialization() Function to initialize the calculation functions. public override void Initialization()"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.CalculationsCollection.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.CalculationsCollection.html",
    "title": "Class CalculationsCollection | Cobilas Documentation",
    "keywords": "Class CalculationsCollection Namespace Cobilas.Numeric Assembly Cobilas.Core.dll Base class used to store calculation and calculation overwriting functions. public abstract class CalculationsCollection Inheritance object CalculationsCollection Derived BasicCalculation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Calculations The list of calculation functions. public abstract MathOperator[] Calculations { get; protected set; } Property Value MathOperator[] OverwriteCalculations The list of calculation functions that will replace other calculation functions. public abstract MathOperator[] OverwriteCalculations { get; protected set; } Property Value MathOperator[] Methods Clac(double, string, double) Function responsible for calling a calculation function specified the sign of the mathematical operation. public abstract double Clac(double V1, string S, double V2) Parameters V1 double S string mathematical operator. V2 double Returns double Initialization() Function to initialize the calculation functions. public abstract void Initialization() Merge(CalculationsCollection, CalculationsCollection) Merge two collections of calculations. public static CalculationsCollection Merge(CalculationsCollection A, CalculationsCollection B) Parameters A CalculationsCollection B CalculationsCollection Returns CalculationsCollection"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.BitArray_Binary_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.BitArray_Binary_Extension.html",
    "title": "Class BitArray_Binary_Extension | Cobilas Documentation",
    "keywords": "Class BitArray_Binary_Extension Namespace Cobilas.Numeric.Convert Assembly Cobilas.Core.dll public static class BitArray_Binary_Extension Inheritance object BitArray_Binary_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods BitToDecimal(BitArray) Convert BitArray to decimal. public static decimal BitToDecimal(this BitArray array) Parameters array BitArray Returns decimal GetBinaryArray(BitArray) Transforms a BitArray into a byte list. public static byte[] GetBinaryArray(this BitArray array) Parameters array BitArray Returns byte[] SetBinaryArray(BitArray, byte[]) Defines a list of bytes in the BitArray object. public static void SetBinaryArray(this BitArray array, byte[] binaryArray) Parameters array BitArray binaryArray byte[]"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.String_Hexadecimal_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.String_Hexadecimal_Extension.html",
    "title": "Class String_Hexadecimal_Extension | Cobilas Documentation",
    "keywords": "Class String_Hexadecimal_Extension Namespace Cobilas.Numeric.Convert Assembly Cobilas.Core.dll public static class String_Hexadecimal_Extension Inheritance object String_Hexadecimal_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HexToDecimal(string) Converts hexadecimal value to decimal. public static decimal HexToDecimal(this string str) Parameters str string Returns decimal IsHexadecimal(string) Checks whether the text value is a hexadecimal value. public static bool IsHexadecimal(this string str) Parameters str string Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.Convert.html",
    "title": "Namespace Cobilas.Numeric.Convert | Cobilas Documentation",
    "keywords": "Namespace Cobilas.Numeric.Convert Classes BitArray_Binary_Extension String_Hexadecimal_Extension"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.MathOperator.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.MathOperator.html",
    "title": "Struct MathOperator | Cobilas Documentation",
    "keywords": "Struct MathOperator Namespace Cobilas.Numeric Assembly Cobilas.Core.dll It represents the mathematical signal and performs its mathematical operation. public readonly struct MathOperator : IEquatable<string>, IEquatable<byte>, IEquatable<SignalOrientation> Implements IEquatable<string> IEquatable<byte> IEquatable<SignalOrientation> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors MathOperator(char, Func<double, double, double>, SignalOrientation) public MathOperator(char signal, Func<double, double, double> function, SignalOrientation orientation) Parameters signal char The sign of the mathematical operation. function Func<double, double, double> The function that performs the mathematical operation. orientation SignalOrientation Indicates the direction where the operation numbers will be obtained. MathOperator(char, Func<double, double, double>, SignalOrientation, byte) public MathOperator(char signal, Func<double, double, double> function, SignalOrientation orientation, byte executionLevel) Parameters signal char The sign of the mathematical operation. function Func<double, double, double> The function that performs the mathematical operation. orientation SignalOrientation Indicates the direction where the operation numbers will be obtained. executionLevel byte The order of execution of the mathematical operation. MathOperator(string, Func<double, double, double>, SignalOrientation) public MathOperator(string signal, Func<double, double, double> function, SignalOrientation orientation) Parameters signal string The sign of the mathematical operation. function Func<double, double, double> The function that performs the mathematical operation. orientation SignalOrientation Indicates the direction where the operation numbers will be obtained. MathOperator(string, Func<double, double, double>, SignalOrientation, byte) public MathOperator(string signal, Func<double, double, double> function, SignalOrientation orientation, byte executionLevel) Parameters signal string The sign of the mathematical operation. function Func<double, double, double> The function that performs the mathematical operation. orientation SignalOrientation Indicates the direction where the operation numbers will be obtained. executionLevel byte The order of execution of the mathematical operation. Properties ExecutionLevel The order of execution of the mathematical operation. public byte ExecutionLevel { get; } Property Value byte Function The function that performs the mathematical operation. public Delegate Function { get; } Property Value Delegate Orientation Indicates the direction where the operation numbers will be obtained. public SignalOrientation Orientation { get; } Property Value SignalOrientation Signal The sign of the mathematical operation. public string Signal { get; } Property Value string Methods Equals(SignalOrientation) Performs the comparison between MathOperator and SignalOrientation. public bool Equals(SignalOrientation other) Parameters other SignalOrientation Returns bool Equals(byte) Performs the comparison between MathOperator and byte. public bool Equals(byte other) Parameters other byte Returns bool Equals(object) Performs the comparison between MathOperator and object. public override bool Equals(object obj) Parameters obj object Returns bool Equals(string) Performs the comparison between MathOperator and string. public bool Equals(string other) Parameters other string Returns bool GetHashCode() Return the hash code for this instance. public override int GetHashCode() Returns int Operators operator ==(MathOperator, SignalOrientation) public static bool operator ==(MathOperator A, SignalOrientation B) Parameters A MathOperator B SignalOrientation Returns bool operator ==(MathOperator, byte) public static bool operator ==(MathOperator A, byte B) Parameters A MathOperator B byte Returns bool operator ==(MathOperator, string) public static bool operator ==(MathOperator A, string B) Parameters A MathOperator B string Returns bool operator ==(SignalOrientation, MathOperator) public static bool operator ==(SignalOrientation A, MathOperator B) Parameters A SignalOrientation B MathOperator Returns bool operator ==(byte, MathOperator) public static bool operator ==(byte A, MathOperator B) Parameters A byte B MathOperator Returns bool operator ==(string, MathOperator) public static bool operator ==(string A, MathOperator B) Parameters A string B MathOperator Returns bool operator !=(MathOperator, SignalOrientation) public static bool operator !=(MathOperator A, SignalOrientation B) Parameters A MathOperator B SignalOrientation Returns bool operator !=(MathOperator, byte) public static bool operator !=(MathOperator A, byte B) Parameters A MathOperator B byte Returns bool operator !=(MathOperator, string) public static bool operator !=(MathOperator A, string B) Parameters A MathOperator B string Returns bool operator !=(SignalOrientation, MathOperator) public static bool operator !=(SignalOrientation A, MathOperator B) Parameters A SignalOrientation B MathOperator Returns bool operator !=(byte, MathOperator) public static bool operator !=(byte A, MathOperator B) Parameters A byte B MathOperator Returns bool operator !=(string, MathOperator) public static bool operator !=(string A, MathOperator B) Parameters A string B MathOperator Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.ParseCalculation.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.ParseCalculation.html",
    "title": "Class ParseCalculation | Cobilas Documentation",
    "keywords": "Class ParseCalculation Namespace Cobilas.Numeric Assembly Cobilas.Core.dll public static class ParseCalculation Inheritance object ParseCalculation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Collections All collections of mathematical operations created. public static CalculationsCollection[] Collections { get; } Property Value CalculationsCollection[] Methods DebugLogCalc(string) Take a text containing a mathematical formula and perform the calculation. Prints the mathematical formula and its result. public static double DebugLogCalc(string text) Parameters text string Returns double Parse(string) Take a text containing a mathematical formula and perform the calculation. public static double Parse(string text) Parameters text string Returns double PrintConsoleCalc(string) Take a text containing a mathematical formula and perform the calculation. Prints the mathematical formula and its result. public static double PrintConsoleCalc(string text) Parameters text string Returns double"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.SignalOrientation.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.SignalOrientation.html",
    "title": "Enum SignalOrientation | Cobilas Documentation",
    "keywords": "Enum SignalOrientation Namespace Cobilas.Numeric Assembly Cobilas.Core.dll Indicates the direction where the operation numbers will be obtained. public enum SignalOrientation : byte Extension Methods Enum_CB_Extension.Format(Enum, object, string) Enum_CB_Extension.GetEnumPair(Enum) Enum_CB_Extension.GetEnumPairs(Enum) Enum_CB_Extension.GetName(Enum) Enum_CB_Extension.GetName(Enum, object) Enum_CB_Extension.GetNames(Enum) Enum_CB_Extension.HasFlag(Enum, params Enum[]) Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Fields both = 1 2<+>2=4 Need two numbers on the sign side. left = 2 2<sqr=4 You need the numbers on the left side of the sign. none = 0 None right = 3 sqr>2=4 You need the numbers on the right side of the sign."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Numeric.html",
    "title": "Namespace Cobilas.Numeric | Cobilas Documentation",
    "keywords": "Namespace Cobilas.Numeric Classes BasicCalculation Basic functions of mathematical operations. CalculationsCollection Base class used to store calculation and calculation overwriting functions. ParseCalculation Structs MathOperator It represents the mathematical signal and performs its mathematical operation. Enums SignalOrientation Indicates the direction where the operation numbers will be obtained."
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Threading.Tasks.TaskPool.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Threading.Tasks.TaskPool.html",
    "title": "Class TaskPool | Cobilas Documentation",
    "keywords": "Class TaskPool Namespace Cobilas.Threading.Tasks Assembly Cobilas.Core.dll public static class TaskPool Inheritance object TaskPool Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Count Returns the number of allocated tasks. public static int Count { get; } Property Value int NonVacantTaskCount The number of tasks that are not vacant. public static int NonVacantTaskCount { get; } Property Value int VacantTaskCount The number of tasks that are already vacant. public static int VacantTaskCount { get; } Property Value int Methods InitTask(Action) The number of tasks that are not vacant. public static void InitTask(Action action) Parameters action Action InitTask(Action, out Task) The number of tasks that are not vacant. public static void InitTask(Action action, out Task task) Parameters action Action task Task InitTask<TRes>(Func<TRes>) The number of tasks that are not vacant. public static void InitTask<TRes>(Func<TRes> func) Parameters func Func<TRes> Type Parameters TRes InitTask<TRes>(Func<TRes>, out Task<TRes>) The number of tasks that are not vacant. public static void InitTask<TRes>(Func<TRes> func, out Task<TRes> res) Parameters func Func<TRes> res Task<TRes> Type Parameters TRes"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.Threading.Tasks.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.Threading.Tasks.html",
    "title": "Namespace Cobilas.Threading.Tasks | Cobilas Documentation",
    "keywords": "Namespace Cobilas.Threading.Tasks Classes TaskPool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.TypeUtilitarian.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.TypeUtilitarian.html",
    "title": "Class TypeUtilitarian | Cobilas Documentation",
    "keywords": "Class TypeUtilitarian Namespace Cobilas Assembly Cobilas.Core.dll Utility static class to obtain type or assembly. public static class TypeUtilitarian Inheritance object TypeUtilitarian Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAssemblies() Get all assemblies for the current domain. public static Assembly[] GetAssemblies() Returns Assembly[] GetType(string) Get a specific type. public static Type GetType(string fullName) Parameters fullName string The full name of the type. (example:System.String) Returns Type GetTypes() Get all types of assembly. public static Type[] GetTypes() Returns Type[] TypeExist(string) Checks if the type exists. public static bool TypeExist(string fullName) Parameters fullName string The full name of the type. (example:System.String) Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/Cobilas.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/Cobilas.html",
    "title": "Namespace Cobilas | Cobilas Documentation",
    "keywords": "Namespace Cobilas Classes TypeUtilitarian Utility static class to obtain type or assembly. Structs Interrupter Represents a list of switches."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Char_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Char_CB_Extension.html",
    "title": "Class Char_CB_Extension | Cobilas Documentation",
    "keywords": "Class Char_CB_Extension Namespace System Assembly Cobilas.Core.dll public static class Char_CB_Extension Inheritance object Char_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods EscapeSequenceToString(char) Method that interprets a char value. public static string EscapeSequenceToString(this char c) Parameters c char Returns string The method returns a value of type EscapeSequence representing the type of escape sequence. The return is converted to a string. InterpretEscapeSequence(char) Method that interprets a char value. public static EscapeSequence InterpretEscapeSequence(this char c) Parameters c char Returns EscapeSequence The method returns a value of type EscapeSequence representing the type of escape sequence. ToSByte(char) public static sbyte ToSByte(this char c) Parameters c char Returns sbyte"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Enum_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Enum_CB_Extension.html",
    "title": "Class Enum_CB_Extension | Cobilas Documentation",
    "keywords": "Class Enum_CB_Extension Namespace System Assembly Cobilas.Core.dll public static class Enum_CB_Extension Inheritance object Enum_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Format(Enum, object, string) Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format. public static string Format(this Enum E, object value, string format) Parameters E Enum The target enumerator. value object The value to convert. format string The output format to use. Returns string A string representation of value. Exceptions ArgumentNullException The enumType, value, or format parameter is null. ArgumentException The enumType parameter is not an Enum type. -or- The value is from an enumeration that differs in type from enumType. -or- The type of value is not an underlying type of enumType. FormatException The format parameter contains an invalid value. InvalidOperationException format equals \"X\", but the enumeration type is unknown. GetEnumPair(Enum) Gets the tag with the current assigned value. public static KeyValuePair<string, int> GetEnumPair(this Enum E) Parameters E Enum The target enumerator. Returns KeyValuePair<string, int> GetEnumPairs(Enum) Gets a list of all tags along with their assigned values. public static KeyValuePair<string, int>[] GetEnumPairs(this Enum E) Parameters E Enum The target enumerator. Returns KeyValuePair<string, int>[] Returns a list of all tags along with their assigned values or an empty list. Exceptions ArgumentNullException enumType is null. GetName(Enum) Retrieves the name of the constant in the specified enumeration that has the specified value. public static string GetName(this Enum E) Parameters E Enum The target enumerator. Returns string A string containing the name of the enumerated constant in enumType whose value is value; or null if no such constant is found. Exceptions ArgumentNullException enumType is null. ArgumentException enumType is not an Enum. -or- value is neither of type enumType nor does it have the same underlying type as enumType. GetName(Enum, object) Retrieves the name of the constant in the specified enumeration that has the specified value. public static string GetName(this Enum E, object value) Parameters E Enum The target enumerator. value object The value of a particular enumerated constant in terms of its underlying type. Returns string A string containing the name of the enumerated constant in enumType whose value is value; or null if no such constant is found. Exceptions ArgumentNullException enumType is null. ArgumentException enumType is not an Enum. -or- value is neither of type enumType nor does it have the same underlying type as enumType. GetNames(Enum) Retrieves an array of the names of the constants in a specified enumeration. public static string[] GetNames(this Enum E) Parameters E Enum The target enumerator. Returns string[] A string array of the names of the constants in enumType. Exceptions ArgumentNullException enumType is null. ArgumentException enumType parameter is not an Enum. HasFlag(Enum, params Enum[]) Determines whether one or more bit fields are set in the current instance. public static bool HasFlag(this Enum E, params Enum[] flags) Parameters E Enum The target enumerator. flags Enum[] Comparison tags. Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.EscapeSequence.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.EscapeSequence.html",
    "title": "Enum EscapeSequence | Cobilas Documentation",
    "keywords": "Enum EscapeSequence Namespace System Assembly Cobilas.Core.dll Represents an escape sequence. public enum EscapeSequence Extension Methods Enum_CB_Extension.Format(Enum, object, string) Enum_CB_Extension.GetEnumPair(Enum) Enum_CB_Extension.GetEnumPairs(Enum) Enum_CB_Extension.GetName(Enum) Enum_CB_Extension.GetName(Enum, object) Enum_CB_Extension.GetNames(Enum) Enum_CB_Extension.HasFlag(Enum, params Enum[]) Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Fields Alert = 5 Represents the escape sequence.(\\a) BackSlash = 3 Represents the escape sequence.(\\) Backspace = 6 Represents the escape sequence.(\\b) CarriageReturn = 9 Represents the escape sequence.(\\r) DoubleQuote = 2 Represents the escape sequence.(\") FormFeed = 7 Represents the escape sequence.(\\f) HorizontalTab = 10 Represents the escape sequence.(\\t) NewLine = 8 Represents the escape sequence.(\\n) None = 0 Represents no escape sequence. Null = 4 Represents the escape sequence.(\\0) SingleQuote = 1 Represents the escape sequence.(') VerticalTab = 11 Represents the escape sequence.(\\v)"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.IO.Stream_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.IO.Stream_CB_Extension.html",
    "title": "Class Stream_CB_Extension | Cobilas Documentation",
    "keywords": "Class Stream_CB_Extension Namespace System.IO Assembly Cobilas.Core.dll public static class Stream_CB_Extension Inheritance object Stream_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GenerateGuid(Stream) Generates a Guid object from the current flow. public static Guid GenerateGuid(this Stream F) Parameters F Stream Target stream. Returns Guid The method returns a Guid value by reading a copy of the current stream. GetChars(Stream) Gets an array of characters from the current stream. Encoding.UTF8 is used by default in the method. public static char[] GetChars(this Stream F) Parameters F Stream Target stream. Returns char[] GetChars(Stream, Encoding) Gets an array of characters from the current stream. public static char[] GetChars(this Stream F, Encoding encoding) Parameters F Stream Target stream. encoding Encoding The Encoding used to write to the current stream. Returns char[] GetString(Stream) Gets a string from the current stream. Encoding.UTF8 is used by default in the method. public static string GetString(this Stream F) Parameters F Stream Target stream. Returns string GetString(Stream, Encoding) Gets a string from the current stream. public static string GetString(this Stream F, Encoding encoding) Parameters F Stream Target stream. encoding Encoding The Encoding used to write to the current stream. Returns string Read(Stream) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public static byte[] Read(this Stream F) Parameters F Stream Target stream. Returns byte[] Exceptions ArgumentException ArgumentNullException ArgumentOutOfRangeException IOException NotSupportedException ObjectDisposedException Write(Stream, byte[]) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public static void Write(this Stream F, byte[] bytes) Parameters F Stream Target stream. bytes byte[] An array of bytes. This method copies count bytes from buffer to the current stream. Exceptions ArgumentException ArgumentNullException ArgumentOutOfRangeException IOException NotSupportedException ObjectDisposedException Write(Stream, char[]) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Encoding.UTF8 is used by default in the method. public static void Write(this Stream F, char[] chars) Parameters F Stream Target stream. chars char[] The list of characters that will be written to the current stream. Exceptions ArgumentException ArgumentNullException ArgumentOutOfRangeException IOException NotSupportedException ObjectDisposedException Write(Stream, char[], Encoding) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public static void Write(this Stream F, char[] chars, Encoding encoding) Parameters F Stream Target stream. chars char[] The list of characters that will be written to the current stream. encoding Encoding The Encoding used to write to the current stream. Exceptions ArgumentException ArgumentNullException ArgumentOutOfRangeException IOException NotSupportedException ObjectDisposedException Write(Stream, string) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Encoding.UTF8 is used by default in the method. public static void Write(this Stream F, string text) Parameters F Stream Target stream. text string The text that will be written in the current stream. Write(Stream, string, Encoding) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public static void Write(this Stream F, string text, Encoding encoding) Parameters F Stream Target stream. text string The text that will be written in the current stream. encoding Encoding The Encoding used to write to the current stream. Exceptions ArgumentException ArgumentNullException IOException NotSupportedException ObjectDisposedException"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.IO.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.IO.html",
    "title": "Namespace System.IO | Cobilas Documentation",
    "keywords": "Namespace System.IO Classes Stream_CB_Extension"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Object_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Object_CB_Extension.html",
    "title": "Class Object_CB_Extension | Cobilas Documentation",
    "keywords": "Class Object_CB_Extension Namespace System Assembly Cobilas.Core.dll public static class Object_CB_Extension Inheritance object Object_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CompareType(object, Type) Compares the object's type to a specified type. public static bool CompareType(this object O, Type type) Parameters O object The target object of comparison. type Type The specified comparison type. Returns bool CompareType(object, params Type[]) Compares the object's type to a specified list of types. public static bool CompareType(this object O, params Type[] types) Parameters O object The target object of comparison. types Type[] The specified comparison types. Returns bool CompareTypeAndSubType(object, Type) Compares class type and the class it inherits. public static bool CompareTypeAndSubType(this object O, Type type) Parameters O object type Type Returns bool CompareTypeAndSubType(object, Type, bool) Compares class type and the class it inherits. public static bool CompareTypeAndSubType(this object O, Type type, bool IncludeInterface) Parameters O object type Type IncludeInterface bool Returns bool CompareTypeAndSubType<T>(object) Compares class type and the class it inherits. public static bool CompareTypeAndSubType<T>(this object O) Parameters O object Returns bool Type Parameters T CompareTypeAndSubType<T>(object, bool) Compares class type and the class it inherits. public static bool CompareTypeAndSubType<T>(this object O, bool IncludeInterface) Parameters O object IncludeInterface bool Returns bool Type Parameters T CompareType<T>(object) Compares the object's type with a specified generic type. public static bool CompareType<T>(this object O) Parameters O object The target object of comparison. Returns bool Type Parameters T The generic comparison type specified."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Reflection.FieldInfo_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Reflection.FieldInfo_CB_Extension.html",
    "title": "Class FieldInfo_CB_Extension | Cobilas Documentation",
    "keywords": "Class FieldInfo_CB_Extension Namespace System.Reflection Assembly Cobilas.Core.dll public static class FieldInfo_CB_Extension Inheritance object FieldInfo_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsBackingField(FieldInfo) Determines whether the field is a background field used by automatic properties. public static bool IsBackingField(this FieldInfo F) Parameters F FieldInfo Target field. Returns bool Returns true when it is a background field and false when it is not a background field."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Reflection.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Reflection.html",
    "title": "Namespace System.Reflection | Cobilas Documentation",
    "keywords": "Namespace System.Reflection Classes FieldInfo_CB_Extension"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.HashAlgorithm_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.HashAlgorithm_CB_Extension.html",
    "title": "Class HashAlgorithm_CB_Extension | Cobilas Documentation",
    "keywords": "Class HashAlgorithm_CB_Extension Namespace System.Security.Cryptography Assembly Cobilas.Core.dll public static class HashAlgorithm_CB_Extension Inheritance object HashAlgorithm_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ComputeHash(HashAlgorithm, string) Computes the hash value for the specified byte array. public static byte[] ComputeHash(this HashAlgorithm H, string FilePath) Parameters H HashAlgorithm Target object. FilePath string The full path of the file. Returns byte[] The computed hash code. Exceptions ArgumentNullException ObjectDisposedException ArgumentException PathTooLongException DirectoryNotFoundException IOException UnauthorizedAccessException FileNotFoundException NotSupportedException SecurityException ComputeHashToString(HashAlgorithm, byte[]) Computes the hash value for the specified byte array. public static HashString ComputeHashToString(this HashAlgorithm H, byte[] buffer) Parameters H HashAlgorithm Target object. buffer byte[] The input to compute the hash code for. Returns HashString The computed hash code for string. Exceptions ArgumentNullException ObjectDisposedException ComputeHashToString(HashAlgorithm, byte[], int, int) Computes the hash value for the specified region of the specified byte array. public static HashString ComputeHashToString(this HashAlgorithm H, byte[] buffer, int offset, int count) Parameters H HashAlgorithm Target object. buffer byte[] The input to compute the hash code for. offset int The offset into the byte array from which to begin using data. count int The number of bytes in the array to use as data. Returns HashString The computed hash code for string. Exceptions ArgumentException ArgumentNullException ArgumentOutOfRangeException ObjectDisposedException ComputeHashToString(HashAlgorithm, Stream) Computes the hash value for the specified Stream object. public static HashString ComputeHashToString(this HashAlgorithm H, Stream inputStream) Parameters H HashAlgorithm Target object. inputStream Stream The input to compute the hash code for. Returns HashString The computed hash code for string. Exceptions ObjectDisposedException ComputeHashToString(HashAlgorithm, string) Computes the hash value for the specified byte array. public static HashString ComputeHashToString(this HashAlgorithm H, string FilePath) Parameters H HashAlgorithm Target object. FilePath string The full path of the file. Returns HashString The computed hash code for string. Exceptions ArgumentNullException ObjectDisposedException ArgumentException PathTooLongException DirectoryNotFoundException IOException UnauthorizedAccessException FileNotFoundException NotSupportedException SecurityException"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.HashString.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.HashString.html",
    "title": "Struct HashString | Cobilas Documentation",
    "keywords": "Struct HashString Namespace System.Security.Cryptography Assembly Cobilas.Core.dll The HashString structure can be used to transform a list of bytes with a minimum length of 16 into a string or Guid. public readonly struct HashString : IEquatable<HashString>, IComparable<HashString>, IEquatable<string>, IFormattable Implements IEquatable<HashString> IComparable<HashString> IEquatable<string> IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors HashString(byte[]) Initializes a HashString object using a list of bytes with a minimum length of 16. public HashString(byte[] hash) Parameters hash byte[] Exceptions ArgumentNullException ArgumentException Fields Empty A read-only instance of type HashString whose value is all zero. public static readonly HashString Empty Field Value HashString Methods CompareTo(HashString) Compares this instance to a specified HashString object and returns an indication of their relative values. public int CompareTo(HashString other) Parameters other HashString An object to compare to this instance. Returns int A signed number indicating the relative values of this instance and value. Return value Description A negative integer This instance is less than value. Zero This instance is equal to value. A positive integer This instance is greater than value. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(HashString) Indicates whether the current object is equal to another object of the same type. public bool Equals(HashString other) Parameters other HashString An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(string) Indicates whether the current object is equal to another object of the same type. public bool Equals(string other) Parameters other string An object to compare with this object. Use Guid.ToString() or convert a list of bytes to a string using a StringBuilder or similar. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns a string representation of the value of this instance in registry format. public override string ToString() Returns string The value of this Guid, formatted by using the \"D\" format specifier as follows: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is \"382c74c3-721d-4f34-80e5-57657b6cbc27\". To convert the hexadecimal digits from a through f to uppercase, call the System.String.ToUpper method on the returned string. ToString(string) Returns a string representation of the value of this Guid instance, according to the provided format specifier. public string ToString(string format) Parameters format string A single format specifier that indicates how to format the value of this Guid. The format parameter can be \"N\", \"D\", \"B\", \"P\", or \"X\". If format is null or an empty string (\"\"), \"D\" is used. Returns string The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format. Exceptions FormatException The value of format is not null, an empty string (\"\"), \"N\", \"D\", \"B\", \"P\", or \"X\". ToString(string, IFormatProvider) Returns a string representation of the value of this instance of the Guid class, according to the provided format specifier and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) Parameters format string A single format specifier that indicates how to format the value of this Guid. The format parameter can be \"N\", \"D\", \"B\", \"P\", or \"X\". If format is null or an empty string (\"\"), \"D\" is used. formatProvider IFormatProvider (Reserved) An object that supplies culture-specific formatting information. Returns string The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format. Operators explicit operator Guid(HashString) Explicit conversion from HashString object to Guid. public static explicit operator Guid(HashString hash) Parameters hash HashString Returns Guid implicit operator string(HashString) Implicit conversion from HashString to string type. public static implicit operator string(HashString hash) Parameters hash HashString Returns string"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Security.Cryptography.html",
    "title": "Namespace System.Security.Cryptography | Cobilas Documentation",
    "keywords": "Namespace System.Security.Cryptography Classes HashAlgorithm_CB_Extension Structs HashString The HashString structure can be used to transform a list of bytes with a minimum length of 16 into a string or Guid."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.String_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.String_CB_Extension.html",
    "title": "Class String_CB_Extension | Cobilas Documentation",
    "keywords": "Class String_CB_Extension Namespace System Assembly Cobilas.Core.dll public static class String_CB_Extension Inheritance object String_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Contains(string, params char[]) Returns a value indicating whether a specified substring occurs within this string. public static bool Contains(this string S, params char[] value) Parameters S string value char[] Returns bool ToByte(string) public static byte ToByte(this string S) Parameters S string Returns byte ToByte(string, NumberStyles, IFormatProvider) public static byte ToByte(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns byte ToByte(string, IFormatProvider) public static byte ToByte(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns byte ToDecimal(string) public static decimal ToDecimal(this string S) Parameters S string Returns decimal ToDecimal(string, NumberStyles, IFormatProvider) public static decimal ToDecimal(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns decimal ToDecimal(string, IFormatProvider) public static decimal ToDecimal(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns decimal ToDouble(string) public static double ToDouble(this string S) Parameters S string Returns double ToDouble(string, NumberStyles, IFormatProvider) public static double ToDouble(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns double ToDouble(string, IFormatProvider) public static double ToDouble(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns double ToFloat(string) public static float ToFloat(this string S) Parameters S string Returns float ToFloat(string, NumberStyles, IFormatProvider) public static float ToFloat(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns float ToFloat(string, IFormatProvider) public static float ToFloat(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns float ToInt(string) public static int ToInt(this string S) Parameters S string Returns int ToInt(string, NumberStyles, IFormatProvider) public static int ToInt(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns int ToInt(string, IFormatProvider) public static int ToInt(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns int ToLong(string) public static long ToLong(this string S) Parameters S string Returns long ToLong(string, NumberStyles, IFormatProvider) public static long ToLong(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns long ToLong(string, IFormatProvider) public static long ToLong(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns long ToSByte(string) public static sbyte ToSByte(this string S) Parameters S string Returns sbyte ToSByte(string, NumberStyles, IFormatProvider) public static sbyte ToSByte(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns sbyte ToSByte(string, IFormatProvider) public static sbyte ToSByte(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns sbyte ToShort(string) public static short ToShort(this string S) Parameters S string Returns short ToShort(string, NumberStyles, IFormatProvider) public static short ToShort(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns short ToShort(string, IFormatProvider) public static short ToShort(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns short ToUInt(string) public static uint ToUInt(this string S) Parameters S string Returns uint ToUInt(string, NumberStyles, IFormatProvider) public static uint ToUInt(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns uint ToUInt(string, IFormatProvider) public static uint ToUInt(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns uint ToULong(string) public static ulong ToULong(this string S) Parameters S string Returns ulong ToULong(string, NumberStyles, IFormatProvider) public static ulong ToULong(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns ulong ToULong(string, IFormatProvider) public static ulong ToULong(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns ulong ToUShort(string) public static ushort ToUShort(this string S) Parameters S string Returns ushort ToUShort(string, NumberStyles, IFormatProvider) public static ushort ToUShort(this string S, NumberStyles style, IFormatProvider formatProvider) Parameters S string style NumberStyles formatProvider IFormatProvider Returns ushort ToUShort(string, IFormatProvider) public static ushort ToUShort(this string S, IFormatProvider formatProvider) Parameters S string formatProvider IFormatProvider Returns ushort"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Type_CB_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Type_CB_Extension.html",
    "title": "Class Type_CB_Extension | Cobilas Documentation",
    "keywords": "Class Type_CB_Extension Namespace System Assembly Cobilas.Core.dll public static class Type_CB_Extension Inheritance object Type_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Activator(Type) Creates an instance of an object from a type. public static object Activator(this Type type) Parameters type Type Returns object Activator<T>(Type) Creates an instance of an object from a type. public static T Activator<T>(this Type type) Parameters type Type Returns T Type Parameters T GetAttribute<T>(Type) Gets the type attribute. public static T GetAttribute<T>(this Type type) where T : Attribute Parameters type Type Returns T Type Parameters T The generic type used to obtain the target attribute. GetAttribute<T>(Type, bool) Gets the type attribute. public static T GetAttribute<T>(this Type type, bool inherit) where T : Attribute Parameters type Type inherit bool true to get attributes marked as inherited. Returns T Type Parameters T The generic type used to obtain the target attribute. GetAttributes<T>(Type) Gets all attributes of the type. public static T[] GetAttributes<T>(this Type type) where T : Attribute Parameters type Type Returns T[] Type Parameters T The generic type used to obtain the target attribute. GetAttributes<T>(Type, bool) Gets all attributes of the type. public static T[] GetAttributes<T>(this Type type, bool inherit) where T : Attribute Parameters type Type inherit bool true to get attributes marked as inherited. Returns T[] Type Parameters T The generic type used to obtain the target attribute."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.CB_XML_Extension.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.CB_XML_Extension.html",
    "title": "Class CB_XML_Extension | Cobilas Documentation",
    "keywords": "Class CB_XML_Extension Namespace System.Xml Assembly Cobilas.Core.dll Extension that adds reading and writing functions for XML. public static class CB_XML_Extension Inheritance object CB_XML_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadXMLIRW(XmlReader) Reads an XML document and returns an XMLIRWElement. public static XMLIRWElement ReadXMLIRW(this XmlReader reader) Parameters reader XmlReader Returns XMLIRWElement WriterXMLIRW(XmlWriter, XMLIRWElement) Uses an XMLIRWElement to write to the xml document. public static void WriterXMLIRW(this XmlWriter writer, XMLIRWElement element) Parameters writer XmlWriter element XMLIRWElement"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.ITextValue.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.ITextValue.html",
    "title": "Interface ITextValue | Cobilas Documentation",
    "keywords": "Interface ITextValue Namespace System.Xml Assembly Cobilas.Core.dll Interface for text XMLIRW elements. public interface ITextValue Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties Text Returns or sets the text of the XMLIRW element. XMLIRWText Text { get; set; } Property Value XMLIRWText"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.IXMLIRWCollection.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.IXMLIRWCollection.html",
    "title": "Interface IXMLIRWCollection | Cobilas Documentation",
    "keywords": "Interface IXMLIRWCollection Namespace System.Xml Assembly Cobilas.Core.dll Represents a collection of XMLIRW. public interface IXMLIRWCollection : IEnumerable<XMLIRW>, IEnumerable, IDisposable Inherited Members IEnumerable<XMLIRW>.GetEnumerator() IDisposable.Dispose() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Properties AttributeCount Gets the count of attributes on the element. int AttributeCount { get; } Property Value int Attributes Gets the attributes on the element. IEnumerable<XMLIRW> Attributes { get; } Property Value IEnumerable<XMLIRW> IsEmpty Checks whether the element has sub-elements or attributes. bool IsEmpty { get; } Property Value bool NoAttributes Checks whether the element has attributes. bool NoAttributes { get; } Property Value bool NoElements Checks whether the element has sub-elements. bool NoElements { get; } Property Value bool ValueIsEmpty Checks whether the element has a text value. bool ValueIsEmpty { get; } Property Value bool Methods Add(XMLIRW) Adds a new XMLIRW element. bool Add(XMLIRW element) Parameters element XMLIRW Returns bool Returns true when the element is added XMLIRW."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRW.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRW.html",
    "title": "Class XMLIRW | Cobilas Documentation",
    "keywords": "Class XMLIRW Namespace System.Xml Assembly Cobilas.Core.dll Base class for IRW class. public abstract class XMLIRW : IDisposable Inheritance object XMLIRW Implements IDisposable Derived XMLIRWAttribute XMLIRWCDATA XMLIRWComment XMLIRWDeclaration XMLIRWDocType XMLIRWElement XMLIRWProcessingInstruction XMLIRWText Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRW() Creates a new instance of the XMLIRW element. protected XMLIRW() XMLIRW(string) Creates a new instance of the XMLIRW element. protected XMLIRW(string name) Parameters name string XMLIRW(string, XmlNodeType) Creates a new instance of the XMLIRW element. protected XMLIRW(string name, XmlNodeType type) Parameters name string type XmlNodeType XMLIRW(XMLIRW, string) Creates a new instance of the XMLIRW element. protected XMLIRW(XMLIRW parent, string name) Parameters parent XMLIRW name string XMLIRW(XMLIRW, string, XmlNodeType) Creates a new instance of the XMLIRW element. protected XMLIRW(XMLIRW parent, string name, XmlNodeType type) Parameters parent XMLIRW name string type XmlNodeType Properties Name Returns or sets the name of the XMLIRW object. public abstract string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public abstract XMLIRW Parent { get; set; } Property Value XMLIRW Type Returns or sets the type of the XMLIRW element. public abstract XmlNodeType Type { get; set; } Property Value XmlNodeType Methods Dispose() Discard the resources of the XMLIRW element. public abstract void Dispose() ToString() Creates a string representation of the object. public override string ToString() Returns string"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWAttribute.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWAttribute.html",
    "title": "Class XMLIRWAttribute | Cobilas Documentation",
    "keywords": "Class XMLIRWAttribute Namespace System.Xml Assembly Cobilas.Core.dll Represents an XML element of type Attribute. public class XMLIRWAttribute : XMLIRW, IDisposable, ITextValue Inheritance object XMLIRW XMLIRWAttribute Implements IDisposable ITextValue Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWAttribute(string, object) Creates a new instance of the XMLIRW element. public XMLIRWAttribute(string name, object value) Parameters name string value object XMLIRWAttribute(string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWAttribute(string, object) constructor.\")] public XMLIRWAttribute(string name, XMLIRWValue value) Parameters name string value XMLIRWValue XMLIRWAttribute(XMLIRWElement, string, object) Creates a new instance of the XMLIRW element. public XMLIRWAttribute(XMLIRWElement parent, string name, object value) Parameters parent XMLIRWElement name string value object XMLIRWAttribute(XMLIRWElement, string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWAttribute(XMLIRWElement, string, object) constructor.\")] public XMLIRWAttribute(XMLIRWElement parent, string name, XMLIRWValue value) Parameters parent XMLIRWElement name string value XMLIRWValue Properties Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Text Returns or sets the text of the XMLIRW element. public XMLIRWText Text { get; set; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value Returns or sets the text of the XMLIRW element. [Obsolete(\"Use the Text property.\")] public XMLIRWValue Value { get; set; } Property Value XMLIRWValue Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWAttribute() Called when the object is finished. protected ~XMLIRWAttribute()"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWCDATA.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWCDATA.html",
    "title": "Class XMLIRWCDATA | Cobilas Documentation",
    "keywords": "Class XMLIRWCDATA Namespace System.Xml Assembly Cobilas.Core.dll Represents an XML element of type CDATA. public class XMLIRWCDATA : XMLIRW, IDisposable, ITextValue Inheritance object XMLIRW XMLIRWCDATA Implements IDisposable ITextValue Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWCDATA(object) Creates a new instance of the XMLIRW element. public XMLIRWCDATA(object value) Parameters value object XMLIRWCDATA(string, object) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(object) constructor.\")] public XMLIRWCDATA(string name, object value) Parameters name string value object XMLIRWCDATA(string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(object) constructor.\")] public XMLIRWCDATA(string name, XMLIRWValue value) Parameters name string value XMLIRWValue XMLIRWCDATA(XMLIRW, object) Creates a new instance of the XMLIRW element. public XMLIRWCDATA(XMLIRW parent, object value) Parameters parent XMLIRW value object XMLIRWCDATA(XMLIRW, string, object) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(XMLIRW, object) constructor.\")] public XMLIRWCDATA(XMLIRW parent, string name, object value) Parameters parent XMLIRW name string value object XMLIRWCDATA(XMLIRW, string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(XMLIRW, object) constructor.\")] public XMLIRWCDATA(XMLIRW parent, string name, XMLIRWValue value) Parameters parent XMLIRW name string value XMLIRWValue XMLIRWCDATA(XMLIRW, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(XMLIRW, object) constructor.\")] public XMLIRWCDATA(XMLIRW parent, XMLIRWValue value) Parameters parent XMLIRW value XMLIRWValue XMLIRWCDATA(XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWCDATA(object) constructor.\")] public XMLIRWCDATA(XMLIRWValue value) Parameters value XMLIRWValue Properties Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Text Returns or sets the text of the XMLIRW element. public XMLIRWText Text { get; set; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value Returns or sets the text of the XMLIRW element. [Obsolete(\"Use the Text property.\")] public XMLIRWValue Value { get; } Property Value XMLIRWValue Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWCDATA() Called when the object is finished. protected ~XMLIRWCDATA()"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWComment.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWComment.html",
    "title": "Class XMLIRWComment | Cobilas Documentation",
    "keywords": "Class XMLIRWComment Namespace System.Xml Assembly Cobilas.Core.dll Represents an XML element of type Comment. public class XMLIRWComment : XMLIRW, ITextValue, IDisposable Inheritance object XMLIRW XMLIRWComment Implements ITextValue IDisposable Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWComment(object) Creates a new instance of the XMLIRW element. public XMLIRWComment(object value) Parameters value object XMLIRWComment(XMLIRW, object) Creates a new instance of the XMLIRW element. public XMLIRWComment(XMLIRW parent, object value) Parameters parent XMLIRW value object XMLIRWComment(XMLIRW, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWComment(XMLIRW, object) constructor.\")] public XMLIRWComment(XMLIRW parent, XMLIRWValue value) Parameters parent XMLIRW value XMLIRWValue XMLIRWComment(XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWComment(object) constructor.\")] public XMLIRWComment(XMLIRWValue value) Parameters value XMLIRWValue Properties Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Text Returns or sets the text of the XMLIRW element. public XMLIRWText Text { get; set; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value Returns or sets the text of the XMLIRW element. [Obsolete(\"Use the Text property.\")] public XMLIRWValue Value { get; } Property Value XMLIRWValue Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWComment() Called when the object is finished. protected ~XMLIRWComment()"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWDeclaration.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWDeclaration.html",
    "title": "Class XMLIRWDeclaration | Cobilas Documentation",
    "keywords": "Class XMLIRWDeclaration Namespace System.Xml Assembly Cobilas.Core.dll Represents an xml declaration. public class XMLIRWDeclaration : XMLIRW, IDisposable Inheritance object XMLIRW XMLIRWDeclaration Implements IDisposable Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWDeclaration() Creates a new instance of the XMLIRW element. public XMLIRWDeclaration() XMLIRWDeclaration(string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(string version) Parameters version string XMLIRWDeclaration(string, string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(string version, string encoding) Parameters version string encoding string XMLIRWDeclaration(string, string, string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(string version, string encoding, string standalone) Parameters version string encoding string standalone string XMLIRWDeclaration(XMLIRW) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(XMLIRW parent) Parameters parent XMLIRW XMLIRWDeclaration(XMLIRW, string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(XMLIRW parent, string version) Parameters parent XMLIRW version string XMLIRWDeclaration(XMLIRW, string, string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(XMLIRW parent, string version, string encoding) Parameters parent XMLIRW version string encoding string XMLIRWDeclaration(XMLIRW, string, string, string) Creates a new instance of the XMLIRW element. public XMLIRWDeclaration(XMLIRW parent, string version, string encoding, string standalone) Parameters parent XMLIRW version string encoding string standalone string Properties Encoding Gets or sets the encoding level of the XML document. public string Encoding { get; protected set; } Property Value string Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Standalone Gets or sets the value of the standalone attribute. public string Standalone { get; protected set; } Property Value string Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Version Gets the XML version of the document. public string Version { get; protected set; } Property Value string Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose()"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWDocType.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWDocType.html",
    "title": "Class XMLIRWDocType | Cobilas Documentation",
    "keywords": "Class XMLIRWDocType Namespace System.Xml Assembly Cobilas.Core.dll Represents an XML element of type DocType. public class XMLIRWDocType : XMLIRW, IDisposable Inheritance object XMLIRW XMLIRWDocType Implements IDisposable Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWDocType(string, object, object, object) Creates a new instance of the XMLIRW element. public XMLIRWDocType(string name, object pudid, object sysid, object subset) Parameters name string pudid object sysid object subset object XMLIRWDocType(string, XMLIRWValue, XMLIRWValue, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWDocType(string, object, object, object) constructor.\")] public XMLIRWDocType(string name, XMLIRWValue pudid, XMLIRWValue sysid, XMLIRWValue subset) Parameters name string pudid XMLIRWValue sysid XMLIRWValue subset XMLIRWValue XMLIRWDocType(XMLIRW, string, object, object, object) Creates a new instance of the XMLIRW element. public XMLIRWDocType(XMLIRW parent, string name, object pudid, object sysid, object subset) Parameters parent XMLIRW name string pudid object sysid object subset object XMLIRWDocType(XMLIRW, string, XMLIRWValue, XMLIRWValue, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWDocType(XMLIRW, string, object, object, object) constructor.\")] public XMLIRWDocType(XMLIRW parent, string name, XMLIRWValue pudid, XMLIRWValue sysid, XMLIRWValue subset) Parameters parent XMLIRW name string pudid XMLIRWValue sysid XMLIRWValue subset XMLIRWValue Properties Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW PudID Gets the value of the public identifier on the DOCTYPE declaration. public XMLIRWText PudID { get; } Property Value XMLIRWText SubSet Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration. public XMLIRWText SubSet { get; } Property Value XMLIRWText SysID Gets the value of the system identifier on the DOCTYPE declaration. public XMLIRWText SysID { get; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWDocType() Called when the object is finished. protected ~XMLIRWDocType()"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWElement.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWElement.html",
    "title": "Class XMLIRWElement | Cobilas Documentation",
    "keywords": "Class XMLIRWElement Namespace System.Xml Assembly Cobilas.Core.dll XML improved reader and writer element. public class XMLIRWElement : XMLIRW, ITextValue, IXMLIRWCollection, IEnumerable<XMLIRW>, IEnumerable, IDisposable Inheritance object XMLIRW XMLIRWElement Implements ITextValue IXMLIRWCollection IEnumerable<XMLIRW> IEnumerable IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWElement(string) Creates a new instance of the XMLIRW element. public XMLIRWElement(string name) Parameters name string XMLIRWElement(string, object) Creates a new instance of the XMLIRW element. public XMLIRWElement(string name, object value) Parameters name string value object XMLIRWElement(string, object, params XMLIRW[]) Creates a new instance of the XMLIRW element. public XMLIRWElement(string name, object value, params XMLIRW[] itens) Parameters name string value object itens XMLIRW[] XMLIRWElement(string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWElement(string, object) constructor.\")] public XMLIRWElement(string name, XMLIRWValue value) Parameters name string value XMLIRWValue XMLIRWElement(string, XMLIRWValue, params XMLIRW[]) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWElement(string, object, params XMLIRW[]) constructor.\")] public XMLIRWElement(string name, XMLIRWValue value, params XMLIRW[] itens) Parameters name string value XMLIRWValue itens XMLIRW[] XMLIRWElement(string, params XMLIRW[]) Creates a new instance of the XMLIRW element. public XMLIRWElement(string name, params XMLIRW[] itens) Parameters name string itens XMLIRW[] XMLIRWElement(XMLIRW, string, object) Creates a new instance of the XMLIRW element. public XMLIRWElement(XMLIRW parent, string name, object value) Parameters parent XMLIRW name string value object XMLIRWElement(XMLIRW, string, object, params XMLIRW[]) Creates a new instance of the XMLIRW element. public XMLIRWElement(XMLIRW parent, string name, object value, params XMLIRW[] itens) Parameters parent XMLIRW name string value object itens XMLIRW[] XMLIRWElement(XMLIRW, string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWElement(XMLIRW, string, object) constructor.\")] public XMLIRWElement(XMLIRW parent, string name, XMLIRWValue value) Parameters parent XMLIRW name string value XMLIRWValue XMLIRWElement(XMLIRW, string, XMLIRWValue, params XMLIRW[]) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWElement(XMLIRW, string, object, params XMLIRW[]) constructor.\")] public XMLIRWElement(XMLIRW parent, string name, XMLIRWValue value, params XMLIRW[] itens) Parameters parent XMLIRW name string value XMLIRWValue itens XMLIRW[] XMLIRWElement(XMLIRW, string, params XMLIRW[]) Creates a new instance of the XMLIRW element. public XMLIRWElement(XMLIRW parent, string name, params XMLIRW[] itens) Parameters parent XMLIRW name string itens XMLIRW[] Properties AttributeCount Gets the count of attributes on the element. public int AttributeCount { get; } Property Value int Attributes Gets the attributes on the element. public IEnumerable<XMLIRW> Attributes { get; } Property Value IEnumerable<XMLIRW> IsEmpty Checks whether the element has sub-elements or attributes. public bool IsEmpty { get; } Property Value bool Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string NoAttributes Checks whether the element has attributes. public bool NoAttributes { get; } Property Value bool NoElements Checks whether the element has sub-elements. public bool NoElements { get; } Property Value bool Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Text Returns or sets the text of the XMLIRW element. public XMLIRWText Text { get; set; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value Returns or sets the text of the XMLIRW element. [Obsolete(\"Use the Text property.\")] public XMLIRWValue Value { get; set; } Property Value XMLIRWValue ValueIsEmpty Checks whether the element has a text value. public bool ValueIsEmpty { get; } Property Value bool Methods Add(XMLIRW) Adds a new XMLIRW element. public bool Add(XMLIRW element) Parameters element XMLIRW Returns bool Returns true when the element is added XMLIRW. Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWElement() Called when the object is finished. protected ~XMLIRWElement() GetEnumerator() Returns an enumerator that iterates through a collection. public IEnumerator<XMLIRW> GetEnumerator() Returns IEnumerator<XMLIRW> ToString() Creates a string representation of the object. public override string ToString() Returns string"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWProcessingInstruction.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWProcessingInstruction.html",
    "title": "Class XMLIRWProcessingInstruction | Cobilas Documentation",
    "keywords": "Class XMLIRWProcessingInstruction Namespace System.Xml Assembly Cobilas.Core.dll Represents an XML element of type ProcessingInstruction. public class XMLIRWProcessingInstruction : XMLIRW, ITextValue, IEnumerable<XMLIRWAttribute>, IEnumerable, IDisposable Inheritance object XMLIRW XMLIRWProcessingInstruction Implements ITextValue IEnumerable<XMLIRWAttribute> IEnumerable IDisposable Inherited Members XMLIRW.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWProcessingInstruction(string, object) Creates a new instance of the XMLIRW element. public XMLIRWProcessingInstruction(string name, object value) Parameters name string value object XMLIRWProcessingInstruction(string, XMLIRWAttribute[]) Creates a new instance of the XMLIRW element. public XMLIRWProcessingInstruction(string name, XMLIRWAttribute[] attributes) Parameters name string attributes XMLIRWAttribute[] XMLIRWProcessingInstruction(string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWProcessingInstruction(string, object) constructor.\")] public XMLIRWProcessingInstruction(string name, XMLIRWValue value) Parameters name string value XMLIRWValue XMLIRWProcessingInstruction(XMLIRW, string, object) Creates a new instance of the XMLIRW element. public XMLIRWProcessingInstruction(XMLIRW parent, string name, object value) Parameters parent XMLIRW name string value object XMLIRWProcessingInstruction(XMLIRW, string, XMLIRWAttribute[]) Creates a new instance of the XMLIRW element. public XMLIRWProcessingInstruction(XMLIRW parent, string name, XMLIRWAttribute[] attributes) Parameters parent XMLIRW name string attributes XMLIRWAttribute[] XMLIRWProcessingInstruction(XMLIRW, string, XMLIRWValue) Creates a new instance of the XMLIRW element. [Obsolete(\"Use the XMLIRWProcessingInstruction(XMLIRW, string, object) constructor.\")] public XMLIRWProcessingInstruction(XMLIRW parent, string name, XMLIRWValue value) Parameters parent XMLIRW name string value XMLIRWValue Properties AttributeCount Returns the number of attributes in the list. public int AttributeCount { get; } Property Value int IsAttributeList Checks whether the value is a list of attributes. public bool IsAttributeList { get; } Property Value bool Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Text Returns or sets the text of the XMLIRW element. public XMLIRWText Text { get; set; } Property Value XMLIRWText Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value Returns or sets the text of the XMLIRW element. [Obsolete(\"Use the Text property.\")] public XMLIRWValue Value { get; set; } Property Value XMLIRWValue Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() Dispose(bool) Discard the resources of the XMLIRW element. protected virtual void Dispose(bool disposing) Parameters disposing bool ~XMLIRWProcessingInstruction() Called when the object is finished. protected ~XMLIRWProcessingInstruction() GetEnumerator() Returns an enumerator that iterates through a collection. public IEnumerator<XMLIRWAttribute> GetEnumerator() Returns IEnumerator<XMLIRWAttribute>"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWText.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWText.html",
    "title": "Class XMLIRWText | Cobilas Documentation",
    "keywords": "Class XMLIRWText Namespace System.Xml Assembly Cobilas.Core.dll Represents XML text. public class XMLIRWText : XMLIRW, IDisposable, IConvertible Inheritance object XMLIRW XMLIRWText Implements IDisposable IConvertible Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWText(object) Creates a new instance of the XMLIRW element. public XMLIRWText(object textValue) Parameters textValue object XMLIRWText(XMLIRW, object) Creates a new instance of the XMLIRW element. public XMLIRWText(XMLIRW parent, object textValue) Parameters parent XMLIRW textValue object Fields textValue The value of the XML text. protected object textValue Field Value object Properties Empty Creates an empty instance. public static XMLIRWText Empty { get; } Property Value XMLIRWText IsNull Check if the value is null. public bool IsNull { get; } Property Value bool Name Returns or sets the name of the XMLIRW object. public override string Name { get; set; } Property Value string Parent Returns or sets the name of the parent object of the XMLIRW element. public override XMLIRW Parent { get; set; } Property Value XMLIRW Type Returns or sets the type of the XMLIRW element. public override XmlNodeType Type { get; set; } Property Value XmlNodeType Value The value of the XML text. public object Value { get; } Property Value object Methods Dispose() Discard the resources of the XMLIRW element. public override void Dispose() ToString() Creates a string representation of the object. public override string ToString() Returns string ToString(IFormatProvider) Creates a string representation of the object. public string ToString(IFormatProvider provider) Parameters provider IFormatProvider Returns string Operators explicit operator bool(XMLIRWText) Provide a conversion from type XMLIRWText to bool. public static explicit operator bool(XMLIRWText text) Parameters text XMLIRWText Returns bool explicit operator byte(XMLIRWText) Provide a conversion from type XMLIRWText to byte. public static explicit operator byte(XMLIRWText text) Parameters text XMLIRWText Returns byte explicit operator char[](XMLIRWText) Provide a conversion from type XMLIRWText to char[]. public static explicit operator char[](XMLIRWText text) Parameters text XMLIRWText Returns char[] explicit operator DateTime(XMLIRWText) Provide a conversion from type XMLIRWText to DateTime. public static explicit operator DateTime(XMLIRWText text) Parameters text XMLIRWText Returns DateTime explicit operator decimal(XMLIRWText) Provide a conversion from type XMLIRWText to decimal. public static explicit operator decimal(XMLIRWText text) Parameters text XMLIRWText Returns decimal explicit operator double(XMLIRWText) Provide a conversion from type XMLIRWText to double. public static explicit operator double(XMLIRWText text) Parameters text XMLIRWText Returns double explicit operator short(XMLIRWText) Provide a conversion from type XMLIRWText to short. public static explicit operator short(XMLIRWText text) Parameters text XMLIRWText Returns short explicit operator int(XMLIRWText) Provide a conversion from type XMLIRWText to int. public static explicit operator int(XMLIRWText text) Parameters text XMLIRWText Returns int explicit operator long(XMLIRWText) Provide a conversion from type XMLIRWText to long. public static explicit operator long(XMLIRWText text) Parameters text XMLIRWText Returns long explicit operator sbyte(XMLIRWText) Provide a conversion from type XMLIRWText to sbyte. public static explicit operator sbyte(XMLIRWText text) Parameters text XMLIRWText Returns sbyte explicit operator float(XMLIRWText) Provide a conversion from type XMLIRWText to float. public static explicit operator float(XMLIRWText text) Parameters text XMLIRWText Returns float explicit operator string(XMLIRWText) Provide a conversion from type XMLIRWText to string. public static explicit operator string(XMLIRWText text) Parameters text XMLIRWText Returns string explicit operator ushort(XMLIRWText) Provide a conversion from type XMLIRWText to ushort. public static explicit operator ushort(XMLIRWText text) Parameters text XMLIRWText Returns ushort explicit operator uint(XMLIRWText) Provide a conversion from type XMLIRWText to uint. public static explicit operator uint(XMLIRWText text) Parameters text XMLIRWText Returns uint explicit operator ulong(XMLIRWText) Provide a conversion from type XMLIRWText to ulong. public static explicit operator ulong(XMLIRWText text) Parameters text XMLIRWText Returns ulong implicit operator XMLIRWText(bool) Provide a conversion from type bool to XMLIRWText. public static implicit operator XMLIRWText(bool text) Parameters text bool Returns XMLIRWText implicit operator XMLIRWText(byte) Provide a conversion from type byte to XMLIRWText. public static implicit operator XMLIRWText(byte text) Parameters text byte Returns XMLIRWText implicit operator XMLIRWText(char[]) Provide a conversion from type char[] to XMLIRWText. public static implicit operator XMLIRWText(char[] text) Parameters text char[] Returns XMLIRWText implicit operator XMLIRWText(DateTime) Provide a conversion from type DateTime to XMLIRWText. public static implicit operator XMLIRWText(DateTime text) Parameters text DateTime Returns XMLIRWText implicit operator XMLIRWText(decimal) Provide a conversion from type decimal to XMLIRWText. public static implicit operator XMLIRWText(decimal text) Parameters text decimal Returns XMLIRWText implicit operator XMLIRWText(double) Provide a conversion from type double to XMLIRWText. public static implicit operator XMLIRWText(double text) Parameters text double Returns XMLIRWText implicit operator XMLIRWText(short) Provide a conversion from type short to XMLIRWText. public static implicit operator XMLIRWText(short text) Parameters text short Returns XMLIRWText implicit operator XMLIRWText(int) Provide a conversion from type int to XMLIRWText. public static implicit operator XMLIRWText(int text) Parameters text int Returns XMLIRWText implicit operator XMLIRWText(long) Provide a conversion from type long to XMLIRWText. public static implicit operator XMLIRWText(long text) Parameters text long Returns XMLIRWText implicit operator XMLIRWText(sbyte) Provide a conversion from type sbyte to XMLIRWText. public static implicit operator XMLIRWText(sbyte text) Parameters text sbyte Returns XMLIRWText implicit operator XMLIRWText(float) Provide a conversion from type float to XMLIRWText. public static implicit operator XMLIRWText(float text) Parameters text float Returns XMLIRWText implicit operator XMLIRWText(string) Provide a conversion from type string to XMLIRWText. public static implicit operator XMLIRWText(string text) Parameters text string Returns XMLIRWText implicit operator XMLIRWText(ushort) Provide a conversion from type ushort to XMLIRWText. public static implicit operator XMLIRWText(ushort text) Parameters text ushort Returns XMLIRWText implicit operator XMLIRWText(uint) Provide a conversion from type uint to XMLIRWText. public static implicit operator XMLIRWText(uint text) Parameters text uint Returns XMLIRWText implicit operator XMLIRWText(ulong) Provide a conversion from type ulong to XMLIRWText. public static implicit operator XMLIRWText(ulong text) Parameters text ulong Returns XMLIRWText"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWValue.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.XMLIRWValue.html",
    "title": "Struct XMLIRWValue | Cobilas Documentation",
    "keywords": "Struct XMLIRWValue Namespace System.Xml Assembly Cobilas.Core.dll Represents the value of a tag. [Obsolete(\"Use the XMLIRWText class to define values.\")] public struct XMLIRWValue : IDisposable, IEquatable<XMLIRWValue>, IConvertible Implements IDisposable IEquatable<XMLIRWValue> IConvertible Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Object_CB_Extension.CompareType(object, Type) Object_CB_Extension.CompareType(object, params Type[]) Object_CB_Extension.CompareTypeAndSubType(object, Type) Object_CB_Extension.CompareTypeAndSubType(object, Type, bool) Object_CB_Extension.CompareTypeAndSubType<T>(object) Object_CB_Extension.CompareTypeAndSubType<T>(object, bool) Object_CB_Extension.CompareType<T>(object) Constructors XMLIRWValue(object) public XMLIRWValue(object value) Parameters value object Fields Empty Represents an empty value. public static readonly XMLIRWValue Empty Field Value XMLIRWValue Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(XMLIRWValue) Indicates whether the current object is equal to another object of the same type. public bool Equals(XMLIRWValue other) Parameters other XMLIRWValue An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(IFormatProvider) Converts the value of this instance to an equivalent string using the specified culture-specific formatting information. public string ToString(IFormatProvider provider) Parameters provider IFormatProvider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns string A string instance equivalent to the value of this instance. Operators operator ==(XMLIRWValue, XMLIRWValue) public static bool operator ==(XMLIRWValue left, XMLIRWValue right) Parameters left XMLIRWValue right XMLIRWValue Returns bool explicit operator string(XMLIRWValue) public static explicit operator string(XMLIRWValue V) Parameters V XMLIRWValue Returns string operator !=(XMLIRWValue, XMLIRWValue) public static bool operator !=(XMLIRWValue left, XMLIRWValue right) Parameters left XMLIRWValue right XMLIRWValue Returns bool"
  },
  "com.cobilas.cs.lib.core.net4x.api/System.Xml.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.Xml.html",
    "title": "Namespace System.Xml | Cobilas Documentation",
    "keywords": "Namespace System.Xml Classes CB_XML_Extension Extension that adds reading and writing functions for XML. XMLIRW Base class for IRW class. XMLIRWAttribute Represents an XML element of type Attribute. XMLIRWCDATA Represents an XML element of type CDATA. XMLIRWComment Represents an XML element of type Comment. XMLIRWDeclaration Represents an xml declaration. XMLIRWDocType Represents an XML element of type DocType. XMLIRWElement XML improved reader and writer element. XMLIRWProcessingInstruction Represents an XML element of type ProcessingInstruction. XMLIRWText Represents XML text. Structs XMLIRWValue Represents the value of a tag. Interfaces ITextValue Interface for text XMLIRW elements. IXMLIRWCollection Represents a collection of XMLIRW."
  },
  "com.cobilas.cs.lib.core.net4x.api/System.html": {
    "href": "com.cobilas.cs.lib.core.net4x.api/System.html",
    "title": "Namespace System | Cobilas Documentation",
    "keywords": "Namespace System Classes Char_CB_Extension Enum_CB_Extension Object_CB_Extension String_CB_Extension Type_CB_Extension Enums EscapeSequence Represents an escape sequence."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Coroutine.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Coroutine.html",
    "title": "Class Coroutine | Cobilas Documentation",
    "keywords": "Class Coroutine Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public sealed class Coroutine : IEnumerable, IDisposable Inheritance object Coroutine Implements IEnumerable IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors Coroutine(IEnumerator?, string?) public Coroutine(IEnumerator? enumerator, string? iD) Parameters enumerator IEnumerator iD string Properties ID public string ID { get; } Property Value string IsCancellationRequested public bool IsCancellationRequested { get; } Property Value bool IsRunning public bool IsRunning { get; } Property Value bool Methods Cancel() public void Cancel() CancelAfter(int) public void CancelAfter(int millisecondsDelay) Parameters millisecondsDelay int CancelAfter(TimeSpan) public void CancelAfter(TimeSpan delay) Parameters delay TimeSpan Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~Coroutine() protected ~Coroutine()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.CoroutineManager.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.CoroutineManager.html",
    "title": "Class CoroutineManager | Cobilas Documentation",
    "keywords": "Class CoroutineManager Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll [RunTimeInitializationClass(\"CoroutineManager\")] public class CoroutineManager : Node, IDisposable Inheritance object Object Node CoroutineManager Implements IDisposable Inherited Members Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Input(InputEvent) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Methods GenID() Generates an ID to be used in a coroutine. public static string GenID() Returns string StartCoroutine(IEnumerator?) Starts a collating process from an IEnumerator. public static Coroutine StartCoroutine(IEnumerator? enumerator) Parameters enumerator IEnumerator Returns Coroutine StopAllCoroutines() Ends all open Coroutines. public static void StopAllCoroutines() StopCoroutine(Coroutine?) Ends all open Coroutines. public static void StopCoroutine(Coroutine? Coroutine) Parameters Coroutine Coroutine _PhysicsProcess(float) Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant. delta is in seconds. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetPhysicsProcess(bool). Corresponds to the Godot.Node.NotificationPhysicsProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _PhysicsProcess(float delta) Parameters delta float _Process(float) Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the delta time since the previous frame is not constant. delta is in seconds. It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetProcess(bool). Corresponds to the Godot.Node.NotificationProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _Process(float delta) Parameters delta float _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.FixedRunTimeSecond.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.FixedRunTimeSecond.html",
    "title": "Struct FixedRunTimeSecond | Cobilas Documentation",
    "keywords": "Struct FixedRunTimeSecond Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public readonly struct FixedRunTimeSecond : IYieldFixedUpdate, IYieldCoroutine Implements IYieldFixedUpdate IYieldCoroutine Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors FixedRunTimeSecond(double) public FixedRunTimeSecond(double second) Parameters second double"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDDirectory.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDDirectory.html",
    "title": "Class GDDirectory | Cobilas Documentation",
    "keywords": "Class GDDirectory Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public sealed class GDDirectory : GDFileBase, IDisposable Inheritance object GDFileBase GDDirectory Implements IDisposable Inherited Members GDFileBase.Null object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Properties Attribute public override GDFileAttributes Attribute { get; protected set; } Property Value GDFileAttributes Count public int Count { get; } Property Value int Name public override string Name { get; } Property Value string NameWithoutExtension public override string NameWithoutExtension { get; } Property Value string Parent public override GDFileBase Parent { get; protected set; } Property Value GDFileBase Path public override string Path { get; protected set; } Property Value string Methods CreateDirectory(string?) public bool CreateDirectory(string? directoryName) Parameters directoryName string Returns bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() ~GDDirectory() protected ~GDDirectory() GetDirectories() public GDDirectory[] GetDirectories() Returns GDDirectory[] GetDirectory(string?, bool) public GDDirectory? GetDirectory(string? relativePath, bool isSubdirectory = false) Parameters relativePath string isSubdirectory bool Returns GDDirectory GetFile(string?, bool) public GDFile? GetFile(string? name, bool isSubdirectory = false) Parameters name string isSubdirectory bool Returns GDFile GetFiles(bool) public GDFile[] GetFiles(bool isSubdirectory = false) Parameters isSubdirectory bool Returns GDFile[] GetGDDirectory() public static GDDirectory? GetGDDirectory() Returns GDDirectory GetGDDirectory(string?) Opens an existing directory of the filesystem. The path argument can be within the project tree (res://folder), the user directory (user://folder) or an absolute path of the user filesystem (e.g. /tmp/folder or C:\\tmp\\folder). public static GDDirectory? GetGDDirectory(string? path) Parameters path string Returns GDDirectory RemoveDirectory(string?) public bool RemoveDirectory(string? directoryName) Parameters directoryName string Returns bool RemoveFile(string?) public bool RemoveFile(string? fileName) Parameters fileName string Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFeature.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFeature.html",
    "title": "Class GDFeature | Cobilas Documentation",
    "keywords": "Class GDFeature Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public static class GDFeature Inheritance object GDFeature Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties HasARM32 Running on a 32-bit ARM build. public static bool HasARM32 { get; } Property Value bool HasARM64 Running on a 64-bit ARM build. public static bool HasARM64 { get; } Property Value bool HasAndroid Running on Android. public static bool HasAndroid { get; } Property Value bool HasDebug Running on a debug build (including the editor). public static bool HasDebug { get; } Property Value bool HasETC1 Textures using ETC1 compression are supported. public static bool HasETC1 { get; } Property Value bool HasETC2 Textures using ETC2 compression are supported. public static bool HasETC2 { get; } Property Value bool HasEditor Running on an editor build. public static bool HasEditor { get; } Property Value bool HasHTML5 Running on HTML5. public static bool HasHTML5 { get; } Property Value bool HasIOS Running on iOS. public static bool HasIOS { get; } Property Value bool HasJavaScript JavaScript singleton is available. public static bool HasJavaScript { get; } Property Value bool HasMobile Host OS is a mobile platform. public static bool HasMobile { get; } Property Value bool HasOSX Running on macOS. public static bool HasOSX { get; } Property Value bool HasPC Host OS is a PC platform (desktop/laptop). public static bool HasPC { get; } Property Value bool HasPVRTC Textures using PVRTC compression are supported. public static bool HasPVRTC { get; } Property Value bool HasRelease Running on a release build. public static bool HasRelease { get; } Property Value bool HasS3TC Textures using S3TC (DXT/BC) compression are supported. public static bool HasS3TC { get; } Property Value bool HasServer Running on the headless server platform. public static bool HasServer { get; } Property Value bool HasStandalone Running on a non-editor build. public static bool HasStandalone { get; } Property Value bool HasUWP Running on UWP. public static bool HasUWP { get; } Property Value bool HasWeb Host OS is a Web browser. public static bool HasWeb { get; } Property Value bool HasWindows Running on Windows. public static bool HasWindows { get; } Property Value bool HasX11 Running on X11 (Linux/BSD desktop). public static bool HasX11 { get; } Property Value bool HasX32 Running on a 32-bit build (any architecture). public static bool HasX32 { get; } Property Value bool HasX64 Running on a 64-bit build (any architecture). public static bool HasX64 { get; } Property Value bool HasX86_32 Running on a 32-bit x86 build. public static bool HasX86_32 { get; } Property Value bool HasX86_64 Running on a 64-bit x86 build. public static bool HasX86_64 { get; } Property Value bool Methods HasFeature(string?) Returns true if the feature for the given feature tag is supported in the currently running instance, depending on the platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the Feature Tags documentation for more details. Note: Tag names are case-sensitive. public static bool HasFeature(string? tagName) Parameters tagName string Returns bool"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFile.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFile.html",
    "title": "Class GDFile | Cobilas Documentation",
    "keywords": "Class GDFile Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public class GDFile : GDFileBase, IDisposable Inheritance object GDFileBase GDFile Implements IDisposable Inherited Members GDFileBase.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Attribute public override GDFileAttributes Attribute { get; protected set; } Property Value GDFileAttributes Name public override string Name { get; } Property Value string NameWithoutExtension public override string NameWithoutExtension { get; } Property Value string Parent public override GDFileBase Parent { get; protected set; } Property Value GDFileBase Path public override string Path { get; protected set; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool ~GDFile() protected ~GDFile() Load() public Resource Load() Returns Resource Load<T>() public T Load<T>() where T : class Returns T Type Parameters T Read() public string Read() Returns string Write(byte[]?) public void Write(byte[]? buffer) Parameters buffer byte[]"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFileAttributes.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFileAttributes.html",
    "title": "Enum GDFileAttributes | Cobilas Documentation",
    "keywords": "Enum GDFileAttributes Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll Represents the file attributes. public enum GDFileAttributes : byte Fields Directory = 0 Indicates that it is a directory file. File = 1 Indicates that it is a file. Null = 3 Indicates that it is a null item(Exe: GDIONull)."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFileBase.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDFileBase.html",
    "title": "Class GDFileBase | Cobilas Documentation",
    "keywords": "Class GDFileBase Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public abstract class GDFileBase : IDisposable Inheritance object GDFileBase Implements IDisposable Derived GDDirectory GDFile GDIONull Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Attribute public abstract GDFileAttributes Attribute { get; protected set; } Property Value GDFileAttributes Name public abstract string Name { get; } Property Value string NameWithoutExtension public abstract string NameWithoutExtension { get; } Property Value string Null public static GDFileBase Null { get; } Property Value GDFileBase Parent public abstract GDFileBase Parent { get; protected set; } Property Value GDFileBase Path public abstract string Path { get; protected set; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public abstract void Dispose()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDIONull.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.GDIONull.html",
    "title": "Class GDIONull | Cobilas Documentation",
    "keywords": "Class GDIONull Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public sealed class GDIONull : GDFileBase, IDisposable Inheritance object GDFileBase GDIONull Implements IDisposable Inherited Members GDFileBase.Null object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Properties Attribute public override GDFileAttributes Attribute { get; protected set; } Property Value GDFileAttributes Name public override string Name { get; } Property Value string NameWithoutExtension public override string NameWithoutExtension { get; } Property Value string Parent public override GDFileBase Parent { get; protected set; } Property Value GDFileBase Path public override string Path { get; protected set; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Gizmos.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Gizmos.html",
    "title": "Class Gizmos | Cobilas Documentation",
    "keywords": "Class Gizmos Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll Gizmos are used to give visual debugging or setup aids in the Scene view. [RunTimeInitializationClass(Priority.StartLater, \"Gizmos\")] public class Gizmos : CanvasLayer, IDisposable Inheritance object Object Node CanvasLayer Gizmos Implements IDisposable Inherited Members CanvasLayer.SetLayer(int) CanvasLayer.GetLayer() CanvasLayer.SetVisible(bool) CanvasLayer.IsVisible() CanvasLayer.Show() CanvasLayer.Hide() CanvasLayer.SetTransform(Transform2D) CanvasLayer.GetTransform() CanvasLayer.GetFinalTransform() CanvasLayer.SetOffset(Vector2) CanvasLayer.GetOffset() CanvasLayer.SetRotation(float) CanvasLayer.GetRotation() CanvasLayer.SetRotationDegrees(float) CanvasLayer.GetRotationDegrees() CanvasLayer.SetScale(Vector2) CanvasLayer.GetScale() CanvasLayer.SetFollowViewport(bool) CanvasLayer.IsFollowingViewport() CanvasLayer.SetFollowViewportScale(float) CanvasLayer.GetFollowViewportScale() CanvasLayer.SetCustomViewport(Node) CanvasLayer.GetCustomViewport() CanvasLayer.GetCanvas() CanvasLayer.Layer CanvasLayer.Visible CanvasLayer.Offset CanvasLayer.RotationDegrees CanvasLayer.Rotation CanvasLayer.Scale CanvasLayer.Transform CanvasLayer.CustomViewport CanvasLayer.FollowViewportEnable CanvasLayer.FollowViewportScale Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Input(InputEvent) Node._PhysicsProcess(float) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Properties Color Sets the Color of the gizmos that are drawn next. public static Color Color { get; set; } Property Value Color Returns or sets the color of the next gizmo. Methods DrawArc(Vector2, float, float, float, int) public static void DrawArc(Vector2 center, float radius, float startAngle, float endAngle, int pointCount) Parameters center Vector2 radius float startAngle float endAngle float pointCount int DrawArc(Vector2, float, float, float, int, float) public static void DrawArc(Vector2 center, float radius, float startAngle, float endAngle, int pointCount, float width) Parameters center Vector2 radius float startAngle float endAngle float pointCount int width float DrawCircle(Vector2, float) public static void DrawCircle(Vector2 position, float radius) Parameters position Vector2 radius float DrawLine(Vector2, Vector2) public static void DrawLine(Vector2 start, Vector2 end) Parameters start Vector2 end Vector2 DrawLine(Vector2, Vector2, float) public static void DrawLine(Vector2 start, Vector2 end, float width) Parameters start Vector2 end Vector2 width float DrawMesh(Mesh, Texture, Texture?, Transform2D?) public static void DrawMesh(Mesh mesh, Texture texture, Texture? normalMap = null, Transform2D? transform = null) Parameters mesh Mesh texture Texture normalMap Texture transform Transform2D? DrawMultiline(Vector2[]) public static void DrawMultiline(Vector2[] points) Parameters points Vector2[] DrawMultiline(Vector2[], float) public static void DrawMultiline(Vector2[] points, float width) Parameters points Vector2[] width float DrawMultiline(List<Vector2>) public static void DrawMultiline(List<Vector2> points) Parameters points List<Vector2> DrawMultiline(List<Vector2>, float) public static void DrawMultiline(List<Vector2> points, float width) Parameters points List<Vector2> width float DrawRect(Rect2) public static void DrawRect(Rect2 rect) Parameters rect Rect2 DrawTexture(Texture, Vector2, Texture?) public static void DrawTexture(Texture texture, Vector2 position, Texture? normalMap = null) Parameters texture Texture position Vector2 normalMap Texture DrawTextureRect(Texture, Rect2, bool, bool, Texture?) public static void DrawTextureRect(Texture texture, Rect2 rect, bool tile, bool transpose = false, Texture? normalMap = null) Parameters texture Texture rect Rect2 tile bool transpose bool normalMap Texture DrawWireRect(Rect2) public static void DrawWireRect(Rect2 rect) Parameters rect Rect2 DrawWireRect(Rect2, float) public static void DrawWireRect(Rect2 rect, float width) Parameters rect Rect2 width float _Process(float) Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the delta time since the previous frame is not constant. delta is in seconds. It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetProcess(bool). Corresponds to the Godot.Node.NotificationProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _Process(float delta) Parameters delta float _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldCoroutine.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldCoroutine.html",
    "title": "Interface IYieldCoroutine | Cobilas Documentation",
    "keywords": "Interface IYieldCoroutine Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public interface IYieldCoroutine Properties Delay TimeSpan Delay { get; } Property Value TimeSpan"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldFixedUpdate.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldFixedUpdate.html",
    "title": "Interface IYieldFixedUpdate | Cobilas Documentation",
    "keywords": "Interface IYieldFixedUpdate Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public interface IYieldFixedUpdate : IYieldCoroutine Inherited Members IYieldCoroutine.Delay"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldUpdate.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldUpdate.html",
    "title": "Interface IYieldUpdate | Cobilas Documentation",
    "keywords": "Interface IYieldUpdate Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public interface IYieldUpdate : IYieldCoroutine Inherited Members IYieldCoroutine.Delay"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldVolatile.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.IYieldVolatile.html",
    "title": "Interface IYieldVolatile | Cobilas Documentation",
    "keywords": "Interface IYieldVolatile Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public interface IYieldVolatile : IYieldCoroutine Inherited Members IYieldCoroutine.Delay Properties IsPhysicsProcess bool IsPhysicsProcess { get; } Property Value bool"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.InputKeyBoard.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.InputKeyBoard.html",
    "title": "Class InputKeyBoard | Cobilas Documentation",
    "keywords": "Class InputKeyBoard Namespace Cobilas.GodotEngine.Utility.Input Assembly com.cobilas.godot.utility.dll [RunTimeInitializationClass(\"InputKeyBoard\")] public class InputKeyBoard : Node, IDisposable Inheritance object Object Node InputKeyBoard Implements IDisposable Inherited Members Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Process(float) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Properties DeltaScroll public static float DeltaScroll { get; } Property Value float DoubleClick public static bool DoubleClick { get; } Property Value bool MouseGlobalPosition public static Vector2 MouseGlobalPosition { get; } Property Value Vector2 MouseIndex public static int MouseIndex { get; } Property Value int MousePosition public static Vector2 MousePosition { get; } Property Value Vector2 Methods GetKeyDown(KeyList) public static bool GetKeyDown(KeyList key) Parameters key KeyList Returns bool GetKeyPress(KeyList) public static bool GetKeyPress(KeyList key) Parameters key KeyList Returns bool GetKeyUp(KeyList) public static bool GetKeyUp(KeyList key) Parameters key KeyList Returns bool GetMouseDown(MouseButton) public static bool GetMouseDown(MouseButton button) Parameters button MouseButton Returns bool GetMouseDown(int) public static bool GetMouseDown(int buttonIndex) Parameters buttonIndex int Returns bool GetMousePress(MouseButton) public static bool GetMousePress(MouseButton button) Parameters button MouseButton Returns bool GetMousePress(int) public static bool GetMousePress(int buttonIndex) Parameters buttonIndex int Returns bool GetMouseUp(MouseButton) public static bool GetMouseUp(MouseButton button) Parameters button MouseButton Returns bool GetMouseUp(int) public static bool GetMouseUp(int buttonIndex) Parameters buttonIndex int Returns bool _Input(InputEvent) Called when there is an input event. The input event propagates up through the node tree until a node consumes it. It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetProcessInput(bool). To consume the input event and stop it propagating further to other nodes, Godot.SceneTree.SetInputAsHandled() can be called. For gameplay input, Godot.Node._UnhandledInput(Godot.InputEvent) and Godot.Node._UnhandledKeyInput(Godot.InputEventKey) are usually a better fit as they allow the GUI to intercept the events first. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _Input(InputEvent @event) Parameters event InputEvent _PhysicsProcess(float) Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant. delta is in seconds. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetPhysicsProcess(bool). Corresponds to the Godot.Node.NotificationPhysicsProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _PhysicsProcess(float delta) Parameters delta float _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.KeyItem.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.KeyItem.html",
    "title": "Struct KeyItem | Cobilas Documentation",
    "keywords": "Struct KeyItem Namespace Cobilas.GodotEngine.Utility.Input Assembly com.cobilas.godot.utility.dll public struct KeyItem : IEquatable<KeyItem> Implements IEquatable<KeyItem> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields key public KeyList key Field Value KeyList onDestroy public bool onDestroy Field Value bool pressDelay public bool pressDelay Field Value bool status public KeyStatus status Field Value KeyStatus Properties Empyt public static KeyItem Empyt { get; } Property Value KeyItem Methods Equals(KeyItem) Indicates whether the current object is equal to another object of the same type. public bool Equals(KeyItem other) Parameters other KeyItem An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(KeyItem, KeyItem) public static bool operator ==(KeyItem A, KeyItem B) Parameters A KeyItem B KeyItem Returns bool operator !=(KeyItem, KeyItem) public static bool operator !=(KeyItem A, KeyItem B) Parameters A KeyItem B KeyItem Returns bool"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.KeyStatus.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.KeyStatus.html",
    "title": "Enum KeyStatus | Cobilas Documentation",
    "keywords": "Enum KeyStatus Namespace Cobilas.GodotEngine.Utility.Input Assembly com.cobilas.godot.utility.dll represents the state of a key. public enum KeyStatus : byte Fields Down = 3 Occurs when the key has been pressed. None = 0 No status detected. Press = 2 Occurs when the key is being pressed. Up = 1 Occurs when the key has been released."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.MouseButton.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.MouseButton.html",
    "title": "Enum MouseButton | Cobilas Documentation",
    "keywords": "Enum MouseButton Namespace Cobilas.GodotEngine.Utility.Input Assembly com.cobilas.godot.utility.dll Represents mouse triggers. public enum MouseButton Fields Left = 2 Left mouse trigger. Middle = 3 Middle mouse trigger (Scroll). Right = 1 Right mouse trigger. Unknown = 0 Unidentified trigger."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.MouseItem.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.MouseItem.html",
    "title": "Struct MouseItem | Cobilas Documentation",
    "keywords": "Struct MouseItem Namespace Cobilas.GodotEngine.Utility.Input Assembly com.cobilas.godot.utility.dll public struct MouseItem : IEquatable<MouseItem> Implements IEquatable<MouseItem> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields Index public int Index Field Value int onDestroy public bool onDestroy Field Value bool pressDelay public bool pressDelay Field Value bool status public KeyStatus status Field Value KeyStatus Properties Empyt public static MouseItem Empyt { get; } Property Value MouseItem Methods Equals(MouseItem) Indicates whether the current object is equal to another object of the same type. public bool Equals(MouseItem other) Parameters other MouseItem An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(MouseItem, MouseItem) public static bool operator ==(MouseItem A, MouseItem B) Parameters A MouseItem B MouseItem Returns bool operator !=(MouseItem, MouseItem) public static bool operator !=(MouseItem A, MouseItem B) Parameters A MouseItem B MouseItem Returns bool"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Input.html",
    "title": "Namespace Cobilas.GodotEngine.Utility.Input | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility.Input Classes InputKeyBoard Structs KeyItem MouseItem Enums KeyStatus represents the state of a key. MouseButton Represents mouse triggers."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IIntVector.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IIntVector.html",
    "title": "Interface IIntVector | Cobilas Documentation",
    "keywords": "Interface IIntVector Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public interface IIntVector : IFormattable Inherited Members IFormattable.ToString(string, IFormatProvider) Properties AxisCount int AxisCount { get; } Property Value int this[int] int this[int index] { get; set; } Parameters index int Property Value int aspect float aspect { get; } Property Value float ceilToInt IIntVector ceilToInt { get; } Property Value IIntVector floorToInt IIntVector floorToInt { get; } Property Value IIntVector magnitude float magnitude { get; } Property Value float sqrMagnitude int sqrMagnitude { get; } Property Value int Methods RoundToInt() IIntVector RoundToInt() Returns IIntVector ToString(string) string ToString(string format) Parameters format string Returns string"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IIntVectorGeneric-1.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IIntVectorGeneric-1.html",
    "title": "Interface IIntVectorGeneric<TVector> | Cobilas Documentation",
    "keywords": "Interface IIntVectorGeneric<TVector> Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public interface IIntVectorGeneric<TVector> : IEquatable<TVector>, IIntVector, IFormattable where TVector : IIntVector Type Parameters TVector Inherited Members IEquatable<TVector>.Equals(TVector) IIntVector.magnitude IIntVector.sqrMagnitude IIntVector.aspect IIntVector.AxisCount IIntVector.this[int] IIntVector.ToString(string) IFormattable.ToString(string, IFormatProvider) Properties ceilToInt TVector ceilToInt { get; } Property Value TVector floorToInt TVector floorToInt { get; } Property Value TVector Methods RoundToInt() TVector RoundToInt() Returns TVector"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVector-1.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVector-1.html",
    "title": "Interface IVector<TVector> | Cobilas Documentation",
    "keywords": "Interface IVector<TVector> Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public interface IVector<TVector> : IEquatable<TVector>, IVector, IFormattable where TVector : IVector Type Parameters TVector Inherited Members IEquatable<TVector>.Equals(TVector) IVector.magnitude IVector.sqrMagnitude IVector.aspect IVector.AxisCount IVector.this[int] IVector.ToString(string) IFormattable.ToString(string, IFormatProvider) Properties Normalized TVector Normalized { get; } Property Value TVector ceil TVector ceil { get; } Property Value TVector floor TVector floor { get; } Property Value TVector"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVector.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVector.html",
    "title": "Interface IVector | Cobilas Documentation",
    "keywords": "Interface IVector Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public interface IVector : IFormattable Inherited Members IFormattable.ToString(string, IFormatProvider) Properties AxisCount int AxisCount { get; } Property Value int this[int] float this[int index] { get; set; } Parameters index int Property Value float Normalized IVector Normalized { get; } Property Value IVector aspect float aspect { get; } Property Value float ceil IVector ceil { get; } Property Value IVector floor IVector floor { get; } Property Value IVector magnitude float magnitude { get; } Property Value float sqrMagnitude float sqrMagnitude { get; } Property Value float Methods Round() IVector Round() Returns IVector ToString(string) string ToString(string format) Parameters format string Returns string"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVectorGeneric-1.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.IVectorGeneric-1.html",
    "title": "Interface IVectorGeneric<TVector> | Cobilas Documentation",
    "keywords": "Interface IVectorGeneric<TVector> Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public interface IVectorGeneric<TVector> : IEquatable<TVector>, IVector, IFormattable where TVector : IVector Type Parameters TVector Inherited Members IEquatable<TVector>.Equals(TVector) IVector.magnitude IVector.sqrMagnitude IVector.aspect IVector.AxisCount IVector.this[int] IVector.ToString(string) IFormattable.ToString(string, IFormatProvider) Properties Normalized TVector Normalized { get; } Property Value TVector ceil TVector ceil { get; } Property Value TVector floor TVector floor { get; } Property Value TVector Methods Round() TVector Round() Returns TVector"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Quaternion.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Quaternion.html",
    "title": "Struct Quaternion | Cobilas Documentation",
    "keywords": "Struct Quaternion Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Quaternion : IEquatable<Quaternion>, IFormattable Implements IEquatable<Quaternion> IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Quaternion(Quaternion) public Quaternion(Quaternion vector) Parameters vector Quaternion Quaternion(Vector4D) public Quaternion(Vector4D vector) Parameters vector Vector4D Quaternion(float, float) public Quaternion(float x, float y) Parameters x float y float Quaternion(float, float, float) public Quaternion(float x, float y, float z) Parameters x float y float z float Quaternion(float, float, float, float) public Quaternion(float x, float y, float z, float w) Parameters x float y float z float w float Fields Deg2Rad public const double Deg2Rad = 0.017453292519943295 Field Value double KEpsilon public const float KEpsilon = 1E-06 Field Value float Rad2Deg public const double Rad2Deg = 57.29577951308232 Field Value double w public float w Field Value float x public float x Field Value float y public float y Field Value float z public float z Field Value float Properties Euler public readonly Vector3D Euler { get; } Property Value Vector3D Identity public static Quaternion Identity { get; } Property Value Quaternion Normalized public readonly Quaternion Normalized { get; } Property Value Quaternion Methods Angle(Quaternion, Quaternion) public static float Angle(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns float Dot(Quaternion, Quaternion) public static float Dot(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns float Equals(Quaternion) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Quaternion other) Parameters other Quaternion An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Normalize(Quaternion) public static Quaternion Normalize(Quaternion q) Parameters q Quaternion Returns Quaternion ToEuler(Quaternion) public static Vector3D ToEuler(Quaternion quaternion) Parameters quaternion Quaternion Returns Vector3D ToQuaternion(Vector3D) public static Quaternion ToQuaternion(Vector3D vector) Parameters vector Vector3D Returns Quaternion ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator ==(Quaternion, Quaternion) public static bool operator ==(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns bool operator !=(Quaternion, Quaternion) public static bool operator !=(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns bool operator *(Quaternion, Quaternion) public static Quaternion operator *(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns Quaternion operator *(Quaternion, Vector3D) public static Vector3D operator *(Quaternion rotation, Vector3D point) Parameters rotation Quaternion point Vector3D Returns Vector3D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector2D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector2D.html",
    "title": "Struct Vector2D | Cobilas Documentation",
    "keywords": "Struct Vector2D Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Vector2D : IVectorGeneric<Vector2D>, IEquatable<Vector2D>, IVector, IFormattable Implements IVectorGeneric<Vector2D> IEquatable<Vector2D> IVector IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Vector2D(Vector2D) public Vector2D(Vector2D vector) Parameters vector Vector2D Vector2D(Vector2) public Vector2D(Vector2 vector) Parameters vector Vector2 Vector2D(float, float) public Vector2D(float x, float y) Parameters x float y float Fields x public float x Field Value float y public float y Field Value float Properties AxisCount public readonly int AxisCount { get; } Property Value int Down public static Vector2D Down { get; } Property Value Vector2D this[int] public float this[int index] { readonly get; set; } Parameters index int Property Value float Left public static Vector2D Left { get; } Property Value Vector2D Normalized public readonly Vector2D Normalized { get; } Property Value Vector2D One public static Vector2D One { get; } Property Value Vector2D Right public static Vector2D Right { get; } Property Value Vector2D Up public static Vector2D Up { get; } Property Value Vector2D Zero public static Vector2D Zero { get; } Property Value Vector2D aspect public readonly float aspect { get; } Property Value float ceil public readonly Vector2D ceil { get; } Property Value Vector2D floor public readonly Vector2D floor { get; } Property Value Vector2D magnitude public readonly float magnitude { get; } Property Value float sqrMagnitude public readonly float sqrMagnitude { get; } Property Value float Methods Abs(in Vector2D) public static Vector2D Abs(in Vector2D a) Parameters a Vector2D Returns Vector2D Abs(bool, bool) public readonly Vector2D Abs(bool absX = true, bool absY = true) Parameters absX bool absY bool Returns Vector2D AngleTo(in Vector2D, in Vector2D) public static float AngleTo(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns float AngleToPoint(in Vector2D, in Vector2D) public static float AngleToPoint(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns float Aspect(in Vector2D) public static float Aspect(in Vector2D a) Parameters a Vector2D Returns float Ceil(in Vector2D) public static Vector2D Ceil(in Vector2D a) Parameters a Vector2D Returns Vector2D Cross(in Vector2D, in Vector2D) public static float Cross(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns float Distance(in Vector2D, in Vector2D) public static float Distance(in Vector2D a, in Vector2D b) Parameters a Vector2D b Vector2D Returns float Dot(in Vector2D, in Vector2D) public static float Dot(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns float Equals(Vector2D) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Vector2D other) Parameters other Vector2D An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor(in Vector2D) public static Vector2D Floor(in Vector2D a) Parameters a Vector2D Returns Vector2D GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Magnitude(in Vector2D) public static float Magnitude(in Vector2D a) Parameters a Vector2D Returns float Max(Vector2D, Vector2D) public static Vector2D Max(Vector2D lhs, Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns Vector2D Min(Vector2D, Vector2D) public static Vector2D Min(Vector2D lhs, Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns Vector2D Neg(in Vector2D) public static Vector2D Neg(in Vector2D a) Parameters a Vector2D Returns Vector2D Neg(bool, bool) public readonly Vector2D Neg(bool negX = true, bool negY = true) Parameters negX bool negY bool Returns Vector2D Normalize(in Vector2D) public static Vector2D Normalize(in Vector2D a) Parameters a Vector2D Returns Vector2D Round() public readonly Vector2D Round() Returns Vector2D Round(in Vector2D) public static Vector2D Round(in Vector2D a) Parameters a Vector2D Returns Vector2D SqrMagnitude(in Vector2D) public static float SqrMagnitude(in Vector2D a) Parameters a Vector2D Returns float ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator +(Vector2D, Vector2D) public static Vector2D operator +(Vector2D a, Vector2D b) Parameters a Vector2D b Vector2D Returns Vector2D operator /(Vector2D, Vector2D) public static Vector2D operator /(Vector2D a, Vector2D b) Parameters a Vector2D b Vector2D Returns Vector2D operator /(Vector2D, float) public static Vector2D operator /(Vector2D a, float b) Parameters a Vector2D b float Returns Vector2D operator ==(in Vector2D, in Vector2D) public static bool operator ==(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns bool implicit operator Vector3D(Vector2D) public static implicit operator Vector3D(Vector2D v) Parameters v Vector2D Returns Vector3D implicit operator Vector4D(Vector2D) public static implicit operator Vector4D(Vector2D v) Parameters v Vector2D Returns Vector4D implicit operator Vector2(Vector2D) public static implicit operator Vector2(Vector2D v) Parameters v Vector2D Returns Vector2 implicit operator Vector3(Vector2D) public static implicit operator Vector3(Vector2D v) Parameters v Vector2D Returns Vector3 implicit operator Vector2D(Vector2) public static implicit operator Vector2D(Vector2 v) Parameters v Vector2 Returns Vector2D implicit operator Vector2D(Vector3) public static implicit operator Vector2D(Vector3 v) Parameters v Vector3 Returns Vector2D operator !=(in Vector2D, in Vector2D) public static bool operator !=(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns bool operator *(Vector2D, Vector2D) public static Vector2D operator *(Vector2D a, Vector2D b) Parameters a Vector2D b Vector2D Returns Vector2D operator *(Vector2D, float) public static Vector2D operator *(Vector2D a, float b) Parameters a Vector2D b float Returns Vector2D operator -(Vector2D, Vector2D) public static Vector2D operator -(Vector2D a, Vector2D b) Parameters a Vector2D b Vector2D Returns Vector2D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector2DInt.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector2DInt.html",
    "title": "Struct Vector2DInt | Cobilas Documentation",
    "keywords": "Struct Vector2DInt Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Vector2DInt : IIntVectorGeneric<Vector2DInt>, IEquatable<Vector2DInt>, IIntVector, IFormattable Implements IIntVectorGeneric<Vector2DInt> IEquatable<Vector2DInt> IIntVector IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Vector2DInt(in Vector2DInt) public Vector2DInt(in Vector2DInt vector) Parameters vector Vector2DInt Vector2DInt(in int, in int) public Vector2DInt(in int x, in int y) Parameters x int y int Fields x public int x Field Value int y public int y Field Value int Properties AxisCount public readonly int AxisCount { get; } Property Value int Down public static Vector2DInt Down { get; } Property Value Vector2DInt this[int] public int this[int index] { readonly get; set; } Parameters index int Property Value int Left public static Vector2DInt Left { get; } Property Value Vector2DInt One public static Vector2DInt One { get; } Property Value Vector2DInt Right public static Vector2DInt Right { get; } Property Value Vector2DInt Up public static Vector2DInt Up { get; } Property Value Vector2DInt Zero public static Vector2DInt Zero { get; } Property Value Vector2DInt aspect public readonly float aspect { get; } Property Value float ceilToInt public readonly Vector2DInt ceilToInt { get; } Property Value Vector2DInt floorToInt public readonly Vector2DInt floorToInt { get; } Property Value Vector2DInt magnitude public readonly float magnitude { get; } Property Value float sqrMagnitude public readonly int sqrMagnitude { get; } Property Value int Methods Abs(in Vector2DInt) public static Vector2DInt Abs(in Vector2DInt a) Parameters a Vector2DInt Returns Vector2DInt Abs(bool, bool) public readonly Vector2DInt Abs(bool absX = true, bool absY = true) Parameters absX bool absY bool Returns Vector2DInt Aspect(in Vector2DInt) public static float Aspect(in Vector2DInt a) Parameters a Vector2DInt Returns float CeilToInt(in Vector2DInt) public static Vector2DInt CeilToInt(in Vector2DInt a) Parameters a Vector2DInt Returns Vector2DInt Distance(in Vector2DInt, in Vector2DInt) public static float Distance(in Vector2DInt a, in Vector2DInt b) Parameters a Vector2DInt b Vector2DInt Returns float Equals(Vector2DInt) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Vector2DInt other) Parameters other Vector2DInt An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FloorToInt(in Vector2DInt) public static Vector2DInt FloorToInt(in Vector2DInt a) Parameters a Vector2DInt Returns Vector2DInt GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Magnitude(in Vector2DInt) public static float Magnitude(in Vector2DInt a) Parameters a Vector2DInt Returns float Max(Vector2DInt, Vector2DInt) public static Vector2DInt Max(Vector2DInt lhs, Vector2DInt rhs) Parameters lhs Vector2DInt rhs Vector2DInt Returns Vector2DInt Min(Vector2DInt, Vector2DInt) public static Vector2DInt Min(Vector2DInt lhs, Vector2DInt rhs) Parameters lhs Vector2DInt rhs Vector2DInt Returns Vector2DInt Neg(in Vector2DInt) public static Vector2DInt Neg(in Vector2DInt a) Parameters a Vector2DInt Returns Vector2DInt Neg(bool, bool) public readonly Vector2DInt Neg(bool negX = true, bool negY = true) Parameters negX bool negY bool Returns Vector2DInt RoundToInt() public readonly Vector2DInt RoundToInt() Returns Vector2DInt RoundToInt(in Vector2DInt) public static Vector2DInt RoundToInt(in Vector2DInt a) Parameters a Vector2DInt Returns Vector2DInt SqrMagnitude(in Vector2DInt) public static int SqrMagnitude(in Vector2DInt a) Parameters a Vector2DInt Returns int ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator +(Vector2DInt, Vector2DInt) public static Vector2DInt operator +(Vector2DInt a, Vector2DInt b) Parameters a Vector2DInt b Vector2DInt Returns Vector2DInt operator /(Vector2DInt, Vector2DInt) public static Vector2DInt operator /(Vector2DInt a, Vector2DInt b) Parameters a Vector2DInt b Vector2DInt Returns Vector2DInt operator /(Vector2DInt, int) public static Vector2DInt operator /(Vector2DInt a, int b) Parameters a Vector2DInt b int Returns Vector2DInt operator ==(in Vector2DInt, in Vector2DInt) public static bool operator ==(in Vector2DInt lhs, in Vector2DInt rhs) Parameters lhs Vector2DInt rhs Vector2DInt Returns bool explicit operator Vector2DInt(Vector2D) public static explicit operator Vector2DInt(Vector2D v) Parameters v Vector2D Returns Vector2DInt explicit operator Vector2DInt(Vector3D) public static explicit operator Vector2DInt(Vector3D v) Parameters v Vector3D Returns Vector2DInt explicit operator Vector2DInt(Vector4D) public static explicit operator Vector2DInt(Vector4D v) Parameters v Vector4D Returns Vector2DInt explicit operator Vector2DInt(Vector2) public static explicit operator Vector2DInt(Vector2 v) Parameters v Vector2 Returns Vector2DInt implicit operator Vector2D(Vector2DInt) public static implicit operator Vector2D(Vector2DInt v) Parameters v Vector2DInt Returns Vector2D implicit operator Vector3D(Vector2DInt) public static implicit operator Vector3D(Vector2DInt v) Parameters v Vector2DInt Returns Vector3D implicit operator Vector3DInt(Vector2DInt) public static implicit operator Vector3DInt(Vector2DInt v) Parameters v Vector2DInt Returns Vector3DInt implicit operator Vector4D(Vector2DInt) public static implicit operator Vector4D(Vector2DInt v) Parameters v Vector2DInt Returns Vector4D implicit operator Vector2(Vector2DInt) public static implicit operator Vector2(Vector2DInt v) Parameters v Vector2DInt Returns Vector2 operator !=(in Vector2DInt, in Vector2DInt) public static bool operator !=(in Vector2DInt lhs, in Vector2DInt rhs) Parameters lhs Vector2DInt rhs Vector2DInt Returns bool operator *(Vector2DInt, Vector2DInt) public static Vector2DInt operator *(Vector2DInt a, Vector2DInt b) Parameters a Vector2DInt b Vector2DInt Returns Vector2DInt operator *(Vector2DInt, int) public static Vector2DInt operator *(Vector2DInt a, int b) Parameters a Vector2DInt b int Returns Vector2DInt operator -(Vector2DInt, Vector2DInt) public static Vector2DInt operator -(Vector2DInt a, Vector2DInt b) Parameters a Vector2DInt b Vector2DInt Returns Vector2DInt"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector3D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector3D.html",
    "title": "Struct Vector3D | Cobilas Documentation",
    "keywords": "Struct Vector3D Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Vector3D : IVectorGeneric<Vector3D>, IEquatable<Vector3D>, IVector, IFormattable Implements IVectorGeneric<Vector3D> IEquatable<Vector3D> IVector IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Vector3D(Vector3D) public Vector3D(Vector3D vector) Parameters vector Vector3D Vector3D(Vector3) public Vector3D(Vector3 vector) Parameters vector Vector3 Vector3D(float, float) public Vector3D(float x, float y) Parameters x float y float Vector3D(float, float, float) public Vector3D(float x, float y, float z) Parameters x float y float z float Fields x public float x Field Value float y public float y Field Value float z public float z Field Value float Properties AxisCount public readonly int AxisCount { get; } Property Value int Back public static Vector3D Back { get; } Property Value Vector3D Down public static Vector3D Down { get; } Property Value Vector3D Forward public static Vector3D Forward { get; } Property Value Vector3D this[int] public float this[int index] { readonly get; set; } Parameters index int Property Value float Left public static Vector3D Left { get; } Property Value Vector3D Normalized public readonly Vector3D Normalized { get; } Property Value Vector3D One public static Vector3D One { get; } Property Value Vector3D Right public static Vector3D Right { get; } Property Value Vector3D Up public static Vector3D Up { get; } Property Value Vector3D Zero public static Vector3D Zero { get; } Property Value Vector3D ceil public readonly Vector3D ceil { get; } Property Value Vector3D floor public readonly Vector3D floor { get; } Property Value Vector3D magnitude public readonly float magnitude { get; } Property Value float sqrMagnitude public readonly float sqrMagnitude { get; } Property Value float Methods Abs(in Vector3D) public static Vector3D Abs(in Vector3D a) Parameters a Vector3D Returns Vector3D Abs(bool, bool, bool) public readonly Vector3D Abs(bool absX = true, bool absY = true, bool absZ = true) Parameters absX bool absY bool absZ bool Returns Vector3D AngleTo(in Vector2D, in Vector2D) public static float AngleTo(in Vector2D lhs, in Vector2D rhs) Parameters lhs Vector2D rhs Vector2D Returns float Ceil(in Vector3D) public static Vector3D Ceil(in Vector3D a) Parameters a Vector3D Returns Vector3D Cross(in Vector3D, in Vector3D) public static Vector3D Cross(in Vector3D lhs, in Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns Vector3D Distance(in Vector3D, in Vector3D) public static float Distance(in Vector3D a, in Vector3D b) Parameters a Vector3D b Vector3D Returns float Dot(in Vector3D, in Vector3D) public static float Dot(in Vector3D lhs, in Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns float Equals(Vector3D) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Vector3D other) Parameters other Vector3D An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor(in Vector3D) public static Vector3D Floor(in Vector3D a) Parameters a Vector3D Returns Vector3D GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Magnitude(in Vector3D) public static float Magnitude(in Vector3D a) Parameters a Vector3D Returns float Max(Vector3D, Vector3D) public static Vector3D Max(Vector3D lhs, Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns Vector3D Min(Vector3D, Vector3D) public static Vector3D Min(Vector3D lhs, Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns Vector3D Neg(in Vector3D) public static Vector3D Neg(in Vector3D a) Parameters a Vector3D Returns Vector3D Neg(bool, bool, bool) public readonly Vector3D Neg(bool negX = true, bool negY = true, bool negZ = true) Parameters negX bool negY bool negZ bool Returns Vector3D Normalize(in Vector3D) public static Vector3D Normalize(in Vector3D a) Parameters a Vector3D Returns Vector3D Round() public readonly Vector3D Round() Returns Vector3D Round(in Vector3D) public static Vector3D Round(in Vector3D a) Parameters a Vector3D Returns Vector3D SqrMagnitude(in Vector3D) public static float SqrMagnitude(in Vector3D a) Parameters a Vector3D Returns float ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator +(Vector3D, Vector3D) public static Vector3D operator +(Vector3D a, Vector3D b) Parameters a Vector3D b Vector3D Returns Vector3D operator /(Vector3D, Vector3D) public static Vector3D operator /(Vector3D a, Vector3D b) Parameters a Vector3D b Vector3D Returns Vector3D operator /(Vector3D, float) public static Vector3D operator /(Vector3D a, float b) Parameters a Vector3D b float Returns Vector3D operator ==(in Vector3D, in Vector3D) public static bool operator ==(in Vector3D lhs, in Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns bool implicit operator Vector2D(Vector3D) public static implicit operator Vector2D(Vector3D v) Parameters v Vector3D Returns Vector2D implicit operator Vector4D(Vector3D) public static implicit operator Vector4D(Vector3D v) Parameters v Vector3D Returns Vector4D implicit operator Vector2(Vector3D) public static implicit operator Vector2(Vector3D v) Parameters v Vector3D Returns Vector2 implicit operator Vector3(Vector3D) public static implicit operator Vector3(Vector3D v) Parameters v Vector3D Returns Vector3 implicit operator Vector3D(Vector2) public static implicit operator Vector3D(Vector2 v) Parameters v Vector2 Returns Vector3D implicit operator Vector3D(Vector3) public static implicit operator Vector3D(Vector3 v) Parameters v Vector3 Returns Vector3D operator !=(in Vector3D, in Vector3D) public static bool operator !=(in Vector3D lhs, in Vector3D rhs) Parameters lhs Vector3D rhs Vector3D Returns bool operator *(Vector3D, Vector3D) public static Vector3D operator *(Vector3D a, Vector3D b) Parameters a Vector3D b Vector3D Returns Vector3D operator *(Vector3D, float) public static Vector3D operator *(Vector3D a, float b) Parameters a Vector3D b float Returns Vector3D operator -(Vector3D, Vector3D) public static Vector3D operator -(Vector3D a, Vector3D b) Parameters a Vector3D b Vector3D Returns Vector3D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector3DInt.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector3DInt.html",
    "title": "Struct Vector3DInt | Cobilas Documentation",
    "keywords": "Struct Vector3DInt Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Vector3DInt : IIntVectorGeneric<Vector3DInt>, IEquatable<Vector3DInt>, IIntVector, IFormattable Implements IIntVectorGeneric<Vector3DInt> IEquatable<Vector3DInt> IIntVector IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Vector3DInt(in Vector3DInt) public Vector3DInt(in Vector3DInt vector) Parameters vector Vector3DInt Vector3DInt(in int, in int) public Vector3DInt(in int x, in int y) Parameters x int y int Vector3DInt(in int, in int, in int) public Vector3DInt(in int x, in int y, in int z) Parameters x int y int z int Fields x public int x Field Value int y public int y Field Value int z public int z Field Value int Properties AxisCount public readonly int AxisCount { get; } Property Value int Back public static Vector3DInt Back { get; } Property Value Vector3DInt Down public static Vector3DInt Down { get; } Property Value Vector3DInt Forward public static Vector3DInt Forward { get; } Property Value Vector3DInt this[int] public int this[int index] { readonly get; set; } Parameters index int Property Value int Left public static Vector3DInt Left { get; } Property Value Vector3DInt One public static Vector3DInt One { get; } Property Value Vector3DInt Right public static Vector3DInt Right { get; } Property Value Vector3DInt Up public static Vector3DInt Up { get; } Property Value Vector3DInt Zero public static Vector3DInt Zero { get; } Property Value Vector3DInt ceilToInt public readonly Vector3DInt ceilToInt { get; } Property Value Vector3DInt floorToInt public readonly Vector3DInt floorToInt { get; } Property Value Vector3DInt magnitude public readonly float magnitude { get; } Property Value float sqrMagnitude public readonly int sqrMagnitude { get; } Property Value int Methods Abs(in Vector3DInt) public static Vector3DInt Abs(in Vector3DInt a) Parameters a Vector3DInt Returns Vector3DInt Abs(bool, bool, bool) public readonly Vector3DInt Abs(bool absX = true, bool absY = true, bool absZ = true) Parameters absX bool absY bool absZ bool Returns Vector3DInt CeilToInt(in Vector3DInt) public static Vector3DInt CeilToInt(in Vector3DInt a) Parameters a Vector3DInt Returns Vector3DInt Distance(in Vector3DInt, in Vector3DInt) public static float Distance(in Vector3DInt a, in Vector3DInt b) Parameters a Vector3DInt b Vector3DInt Returns float Equals(Vector3DInt) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Vector3DInt other) Parameters other Vector3DInt An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FloorToInt(in Vector3DInt) public static Vector3DInt FloorToInt(in Vector3DInt a) Parameters a Vector3DInt Returns Vector3DInt GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Magnitude(in Vector3DInt) public static float Magnitude(in Vector3DInt a) Parameters a Vector3DInt Returns float Max(Vector3DInt, Vector3DInt) public static Vector3DInt Max(Vector3DInt lhs, Vector3DInt rhs) Parameters lhs Vector3DInt rhs Vector3DInt Returns Vector3DInt Min(Vector3DInt, Vector3DInt) public static Vector3DInt Min(Vector3DInt lhs, Vector3DInt rhs) Parameters lhs Vector3DInt rhs Vector3DInt Returns Vector3DInt Neg(in Vector3DInt) public static Vector3DInt Neg(in Vector3DInt a) Parameters a Vector3DInt Returns Vector3DInt Neg(bool, bool, bool) public readonly Vector3DInt Neg(bool negX = true, bool negY = true, bool negZ = true) Parameters negX bool negY bool negZ bool Returns Vector3DInt RoundToInt() public readonly Vector3DInt RoundToInt() Returns Vector3DInt RoundToInt(in Vector3DInt) public static Vector3DInt RoundToInt(in Vector3DInt a) Parameters a Vector3DInt Returns Vector3DInt SqrMagnitude(in Vector3DInt) public static int SqrMagnitude(in Vector3DInt a) Parameters a Vector3DInt Returns int ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator +(Vector3DInt, Vector3DInt) public static Vector3DInt operator +(Vector3DInt a, Vector3DInt b) Parameters a Vector3DInt b Vector3DInt Returns Vector3DInt operator /(Vector3DInt, Vector3DInt) public static Vector3DInt operator /(Vector3DInt a, Vector3DInt b) Parameters a Vector3DInt b Vector3DInt Returns Vector3DInt operator /(Vector3DInt, int) public static Vector3DInt operator /(Vector3DInt a, int b) Parameters a Vector3DInt b int Returns Vector3DInt operator ==(in Vector3DInt, in Vector3DInt) public static bool operator ==(in Vector3DInt lhs, in Vector3DInt rhs) Parameters lhs Vector3DInt rhs Vector3DInt Returns bool explicit operator Vector3DInt(Vector2D) public static explicit operator Vector3DInt(Vector2D v) Parameters v Vector2D Returns Vector3DInt explicit operator Vector3DInt(Vector3D) public static explicit operator Vector3DInt(Vector3D v) Parameters v Vector3D Returns Vector3DInt explicit operator Vector3DInt(Vector4D) public static explicit operator Vector3DInt(Vector4D v) Parameters v Vector4D Returns Vector3DInt explicit operator Vector3DInt(Vector2) public static explicit operator Vector3DInt(Vector2 v) Parameters v Vector2 Returns Vector3DInt implicit operator Vector2D(Vector3DInt) public static implicit operator Vector2D(Vector3DInt v) Parameters v Vector3DInt Returns Vector2D implicit operator Vector2DInt(Vector3DInt) public static implicit operator Vector2DInt(Vector3DInt v) Parameters v Vector3DInt Returns Vector2DInt implicit operator Vector3D(Vector3DInt) public static implicit operator Vector3D(Vector3DInt v) Parameters v Vector3DInt Returns Vector3D implicit operator Vector4D(Vector3DInt) public static implicit operator Vector4D(Vector3DInt v) Parameters v Vector3DInt Returns Vector4D implicit operator Vector2(Vector3DInt) public static implicit operator Vector2(Vector3DInt v) Parameters v Vector3DInt Returns Vector2 operator !=(in Vector3DInt, in Vector3DInt) public static bool operator !=(in Vector3DInt lhs, in Vector3DInt rhs) Parameters lhs Vector3DInt rhs Vector3DInt Returns bool operator *(Vector3DInt, Vector3DInt) public static Vector3DInt operator *(Vector3DInt a, Vector3DInt b) Parameters a Vector3DInt b Vector3DInt Returns Vector3DInt operator *(Vector3DInt, int) public static Vector3DInt operator *(Vector3DInt a, int b) Parameters a Vector3DInt b int Returns Vector3DInt operator -(Vector3DInt, Vector3DInt) public static Vector3DInt operator -(Vector3DInt a, Vector3DInt b) Parameters a Vector3DInt b Vector3DInt Returns Vector3DInt"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector4D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.Vector4D.html",
    "title": "Struct Vector4D | Cobilas Documentation",
    "keywords": "Struct Vector4D Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll [Serializable] public struct Vector4D : IVectorGeneric<Vector4D>, IEquatable<Vector4D>, IVector, IFormattable Implements IVectorGeneric<Vector4D> IEquatable<Vector4D> IVector IFormattable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Vector4D(Quaternion) public Vector4D(Quaternion vector) Parameters vector Quaternion Vector4D(Vector4D) public Vector4D(Vector4D vector) Parameters vector Vector4D Vector4D(float, float) public Vector4D(float x, float y) Parameters x float y float Vector4D(float, float, float) public Vector4D(float x, float y, float z) Parameters x float y float z float Vector4D(float, float, float, float) public Vector4D(float x, float y, float z, float w) Parameters x float y float z float w float Fields w public float w Field Value float x public float x Field Value float y public float y Field Value float z public float z Field Value float Properties AxisCount public readonly int AxisCount { get; } Property Value int this[int] public float this[int index] { readonly get; set; } Parameters index int Property Value float Normalized public readonly Vector4D Normalized { get; } Property Value Vector4D One public static Vector4D One { get; } Property Value Vector4D Zero public static Vector4D Zero { get; } Property Value Vector4D ceil public readonly Vector4D ceil { get; } Property Value Vector4D floor public readonly Vector4D floor { get; } Property Value Vector4D magnitude public readonly float magnitude { get; } Property Value float sqrMagnitude public readonly float sqrMagnitude { get; } Property Value float Methods Abs(in Vector4D) public static Vector4D Abs(in Vector4D a) Parameters a Vector4D Returns Vector4D Abs(bool, bool, bool, bool) public readonly Vector4D Abs(bool absX = true, bool absY = true, bool absZ = true, bool absW = true) Parameters absX bool absY bool absZ bool absW bool Returns Vector4D Ceil(in Vector4D) public static Vector4D Ceil(in Vector4D a) Parameters a Vector4D Returns Vector4D Distance(in Vector4D, Vector4D) public static float Distance(in Vector4D a, Vector4D b) Parameters a Vector4D b Vector4D Returns float Dot(in Vector4D, in Vector4D) public static float Dot(in Vector4D a, in Vector4D b) Parameters a Vector4D b Vector4D Returns float Equals(Vector4D) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Vector4D other) Parameters other Vector4D An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor(in Vector3D) public static Vector3D Floor(in Vector3D a) Parameters a Vector3D Returns Vector3D GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsNormalized(in IVector) public static bool IsNormalized(in IVector a) Parameters a IVector Returns bool Magnitude(in Vector4D) public static float Magnitude(in Vector4D a) Parameters a Vector4D Returns float Max(in Vector4D, in Vector4D) public static Vector4D Max(in Vector4D lhs, in Vector4D rhs) Parameters lhs Vector4D rhs Vector4D Returns Vector4D Min(in Vector4D, in Vector4D) public static Vector4D Min(in Vector4D lhs, in Vector4D rhs) Parameters lhs Vector4D rhs Vector4D Returns Vector4D Neg(in Vector4D) public static Vector4D Neg(in Vector4D a) Parameters a Vector4D Returns Vector4D Neg(bool, bool, bool, bool) public readonly Vector4D Neg(bool negX = true, bool negY = true, bool negZ = true, bool negW = true) Parameters negX bool negY bool negZ bool negW bool Returns Vector4D Normalize(in Vector4D) public static Vector4D Normalize(in Vector4D a) Parameters a Vector4D Returns Vector4D Round() public readonly Vector4D Round() Returns Vector4D Round(in Vector4D) public static Vector4D Round(in Vector4D a) Parameters a Vector4D Returns Vector4D SqrMagnitude(in Vector4D) public static float SqrMagnitude(in Vector4D a) Parameters a Vector4D Returns float ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. ToString(string) public readonly string ToString(string format) Parameters format string Returns string ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. public readonly string ToString(string format, IFormatProvider formatProvider) Parameters format string The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. Operators operator +(Vector4D, Vector4D) public static Vector4D operator +(Vector4D a, Vector4D b) Parameters a Vector4D b Vector4D Returns Vector4D operator /(Vector4D, Vector4D) public static Vector4D operator /(Vector4D a, Vector4D b) Parameters a Vector4D b Vector4D Returns Vector4D operator /(Vector4D, float) public static Vector4D operator /(Vector4D a, float b) Parameters a Vector4D b float Returns Vector4D operator /(float, Vector4D) public static Vector4D operator /(float a, Vector4D b) Parameters a float b Vector4D Returns Vector4D implicit operator Vector2D(Vector4D) public static implicit operator Vector2D(Vector4D v) Parameters v Vector4D Returns Vector2D implicit operator Vector3D(Vector4D) public static implicit operator Vector3D(Vector4D v) Parameters v Vector4D Returns Vector3D implicit operator Vector2(Vector4D) public static implicit operator Vector2(Vector4D v) Parameters v Vector4D Returns Vector2 implicit operator Vector3(Vector4D) public static implicit operator Vector3(Vector4D v) Parameters v Vector4D Returns Vector3 implicit operator Vector4D(Vector2) public static implicit operator Vector4D(Vector2 v) Parameters v Vector2 Returns Vector4D implicit operator Vector4D(Vector3) public static implicit operator Vector4D(Vector3 v) Parameters v Vector3 Returns Vector4D operator *(Vector4D, Vector4D) public static Vector4D operator *(Vector4D a, Vector4D b) Parameters a Vector4D b Vector4D Returns Vector4D operator *(Vector4D, float) public static Vector4D operator *(Vector4D a, float b) Parameters a Vector4D b float Returns Vector4D operator *(float, Vector4D) public static Vector4D operator *(float a, Vector4D b) Parameters a float b Vector4D Returns Vector4D operator -(Vector4D, Vector4D) public static Vector4D operator -(Vector4D a, Vector4D b) Parameters a Vector4D b Vector4D Returns Vector4D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.VectorEqualityComparer.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.VectorEqualityComparer.html",
    "title": "Struct VectorEqualityComparer | Cobilas Documentation",
    "keywords": "Struct VectorEqualityComparer Namespace Cobilas.GodotEngine.Utility.Numerics Assembly com.cobilas.godot.utility.dll public struct VectorEqualityComparer : IEqualityComparer, IEqualityComparer<Vector2D>, IEqualityComparer<Vector3D>, IEqualityComparer<Vector4D>, IEqualityComparer<Vector2DInt>, IEqualityComparer<Vector3DInt> Implements IEqualityComparer IEqualityComparer<Vector2D> IEqualityComparer<Vector3D> IEqualityComparer<Vector4D> IEqualityComparer<Vector2DInt> IEqualityComparer<Vector3DInt> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.ReferenceEquals(object, object) object.GetType() Methods Equals(Vector2D, Vector2D) Determines whether the specified objects are equal. public readonly bool Equals(Vector2D x, Vector2D y) Parameters x Vector2D The first object of type T to compare. y Vector2D The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. Equals(Vector2DInt, Vector2DInt) Determines whether the specified objects are equal. public readonly bool Equals(Vector2DInt x, Vector2DInt y) Parameters x Vector2DInt The first object of type T to compare. y Vector2DInt The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. Equals(Vector3D, Vector3D) Determines whether the specified objects are equal. public readonly bool Equals(Vector3D x, Vector3D y) Parameters x Vector3D The first object of type T to compare. y Vector3D The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. Equals(Vector3DInt, Vector3DInt) Determines whether the specified objects are equal. public readonly bool Equals(Vector3DInt x, Vector3DInt y) Parameters x Vector3DInt The first object of type T to compare. y Vector3DInt The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. Equals(Vector4D, Vector4D) Determines whether the specified objects are equal. public readonly bool Equals(Vector4D x, Vector4D y) Parameters x Vector4D The first object of type T to compare. y Vector4D The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. Equals(object, object) Determines whether the specified objects are equal. public readonly bool Equals(object x, object y) Parameters x object The first object to compare. y object The second object to compare. Returns bool true if the specified objects are equal; otherwise, false. Exceptions ArgumentException x and y are of different types and neither one can handle comparisons with the other. GetHashCode(Vector2D) Returns a hash code for the specified object. public readonly int GetHashCode(Vector2D obj) Parameters obj Vector2D The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null. GetHashCode(Vector2DInt) Returns a hash code for the specified object. public readonly int GetHashCode(Vector2DInt obj) Parameters obj Vector2DInt The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null. GetHashCode(Vector3D) Returns a hash code for the specified object. public readonly int GetHashCode(Vector3D obj) Parameters obj Vector3D The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null. GetHashCode(Vector3DInt) Returns a hash code for the specified object. public readonly int GetHashCode(Vector3DInt obj) Parameters obj Vector3DInt The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null. GetHashCode(Vector4D) Returns a hash code for the specified object. public readonly int GetHashCode(Vector4D obj) Parameters obj Vector4D The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null. GetHashCode(object) Returns a hash code for the specified object. public readonly int GetHashCode(object obj) Parameters obj object The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Numerics.html",
    "title": "Namespace Cobilas.GodotEngine.Utility.Numerics | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility.Numerics Structs Quaternion Vector2D Vector2DInt Vector3D Vector3DInt Vector4D VectorEqualityComparer Interfaces IIntVector IIntVectorGeneric<TVector> IVector IVectorGeneric<TVector>"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.Hit2D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.Hit2D.html",
    "title": "Struct Hit2D | Cobilas Documentation",
    "keywords": "Struct Hit2D Namespace Cobilas.GodotEngine.Utility.Physics Assembly com.cobilas.godot.utility.dll public struct Hit2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Properties Collision public readonly Node Collision { get; } Property Value Node ID public readonly int ID { get; } Property Value int MetaData public readonly object MetaData { get; } Property Value object Name public readonly string Name { get; } Property Value string RID public readonly RID RID { get; } Property Value RID Operators explicit operator Hit2D(Dictionary?) public static explicit operator Hit2D(Dictionary? D) Parameters D Dictionary Returns Hit2D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.Physics2D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.Physics2D.html",
    "title": "Class Physics2D | Cobilas Documentation",
    "keywords": "Class Physics2D Namespace Cobilas.GodotEngine.Utility.Physics Assembly com.cobilas.godot.utility.dll [RunTimeInitializationClass(\"Physics2D\")] public class Physics2D : Node2D, IDisposable Inheritance object Object Node CanvasItem Node2D Physics2D Implements IDisposable Inherited Members Node2D.SetPosition(Vector2) Node2D.SetRotation(float) Node2D.SetRotationDegrees(float) Node2D.SetScale(Vector2) Node2D.GetPosition() Node2D.GetRotation() Node2D.GetRotationDegrees() Node2D.GetScale() Node2D.Rotate(float) Node2D.MoveLocalX(float, bool) Node2D.MoveLocalY(float, bool) Node2D.Translate(Vector2) Node2D.GlobalTranslate(Vector2) Node2D.ApplyScale(Vector2) Node2D.SetGlobalPosition(Vector2) Node2D.GetGlobalPosition() Node2D.SetGlobalRotation(float) Node2D.GetGlobalRotation() Node2D.SetGlobalRotationDegrees(float) Node2D.GetGlobalRotationDegrees() Node2D.SetGlobalScale(Vector2) Node2D.GetGlobalScale() Node2D.SetTransform(Transform2D) Node2D.SetGlobalTransform(Transform2D) Node2D.LookAt(Vector2) Node2D.GetAngleTo(Vector2) Node2D.ToLocal(Vector2) Node2D.ToGlobal(Vector2) Node2D.SetZIndex(int) Node2D.GetZIndex() Node2D.SetZAsRelative(bool) Node2D.IsZRelative() Node2D.GetRelativeTransformToParent(Node) Node2D.Position Node2D.Rotation Node2D.RotationDegrees Node2D.Scale Node2D.Transform Node2D.GlobalPosition Node2D.GlobalRotation Node2D.GlobalRotationDegrees Node2D.GlobalScale Node2D.GlobalTransform Node2D.ZIndex Node2D.ZAsRelative CanvasItem.NotificationTransformChanged CanvasItem.NotificationLocalTransformChanged CanvasItem.NotificationDraw CanvasItem.NotificationVisibilityChanged CanvasItem.NotificationEnterCanvas CanvasItem.NotificationExitCanvas CanvasItem._Draw() CanvasItem.GetCanvasItem() CanvasItem.SetVisible(bool) CanvasItem.IsVisible() CanvasItem.IsVisibleInTree() CanvasItem.Show() CanvasItem.Hide() CanvasItem.Update() CanvasItem.SetAsToplevel(bool) CanvasItem.IsSetAsToplevel() CanvasItem.SetLightMask(int) CanvasItem.GetLightMask() CanvasItem.SetModulate(Color) CanvasItem.GetModulate() CanvasItem.SetSelfModulate(Color) CanvasItem.GetSelfModulate() CanvasItem.SetDrawBehindParent(bool) CanvasItem.IsDrawBehindParentEnabled() CanvasItem.DrawLine(Vector2, Vector2, Color, float, bool) CanvasItem.DrawPolyline(Vector2[], Color, float, bool) CanvasItem.DrawPolylineColors(Vector2[], Color[], float, bool) CanvasItem.DrawArc(Vector2, float, float, float, int, Color, float, bool) CanvasItem.DrawMultiline(Vector2[], Color, float, bool) CanvasItem.DrawMultilineColors(Vector2[], Color[], float, bool) CanvasItem.DrawRect(Rect2, Color, bool, float, bool) CanvasItem.DrawCircle(Vector2, float, Color) CanvasItem.DrawTexture(Texture, Vector2, Color?, Texture) CanvasItem.DrawTextureRect(Texture, Rect2, bool, Color?, bool, Texture) CanvasItem.DrawTextureRectRegion(Texture, Rect2, Rect2, Color?, bool, Texture, bool) CanvasItem.DrawStyleBox(StyleBox, Rect2) CanvasItem.DrawPrimitive(Vector2[], Color[], Vector2[], Texture, float, Texture) CanvasItem.DrawPolygon(Vector2[], Color[], Vector2[], Texture, Texture, bool) CanvasItem.DrawColoredPolygon(Vector2[], Color, Vector2[], Texture, Texture, bool) CanvasItem.DrawString(Font, Vector2, string, Color?, int) CanvasItem.DrawChar(Font, Vector2, string, string, Color?) CanvasItem.DrawMesh(Mesh, Texture, Texture, Transform2D?, Color?) CanvasItem.DrawMultimesh(MultiMesh, Texture, Texture) CanvasItem.DrawSetTransform(Vector2, float, Vector2) CanvasItem.DrawSetTransformMatrix(Transform2D) CanvasItem.GetTransform() CanvasItem.GetGlobalTransform() CanvasItem.GetGlobalTransformWithCanvas() CanvasItem.GetViewportTransform() CanvasItem.GetViewportRect() CanvasItem.GetCanvasTransform() CanvasItem.GetLocalMousePosition() CanvasItem.GetGlobalMousePosition() CanvasItem.GetCanvas() CanvasItem.GetWorld2d() CanvasItem.SetMaterial(Material) CanvasItem.GetMaterial() CanvasItem.SetUseParentMaterial(bool) CanvasItem.GetUseParentMaterial() CanvasItem.SetNotifyLocalTransform(bool) CanvasItem.IsLocalTransformNotificationEnabled() CanvasItem.SetNotifyTransform(bool) CanvasItem.IsTransformNotificationEnabled() CanvasItem.ForceUpdateTransform() CanvasItem.MakeCanvasPositionLocal(Vector2) CanvasItem.MakeInputLocal(InputEvent) CanvasItem.Visible CanvasItem.Modulate CanvasItem.SelfModulate CanvasItem.ShowBehindParent CanvasItem.ShowOnTop CanvasItem.LightMask CanvasItem.Material CanvasItem.UseParentMaterial Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Input(InputEvent) Node._PhysicsProcess(float) Node._Process(float) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Methods RayCast(Camera2D, Vector2, Vector2, out RayHit2D) public static bool RayCast(Camera2D camera, Vector2 from, Vector2 to, out RayHit2D hit) Parameters camera Camera2D from Vector2 to Vector2 hit RayHit2D Returns bool RayCast(Camera2D, Vector2, Vector2, CollisionObject2D[], out RayHit2D) public static bool RayCast(Camera2D camera, Vector2 from, Vector2 to, CollisionObject2D[] exclude, out RayHit2D hit) Parameters camera Camera2D from Vector2 to Vector2 exclude CollisionObject2D[] hit RayHit2D Returns bool RayCast(Camera2D?, Vector2, Vector2, CollisionObject2D[]?, uint, out RayHit2D) public static bool RayCast(Camera2D? camera, Vector2 from, Vector2 to, CollisionObject2D[]? exclude, uint collisionLayer, out RayHit2D hit) Parameters camera Camera2D from Vector2 to Vector2 exclude CollisionObject2D[] collisionLayer uint hit RayHit2D Returns bool RayCast(Camera2D, Vector2, Vector2, uint, out RayHit2D) public static bool RayCast(Camera2D camera, Vector2 from, Vector2 to, uint collisionLayer, out RayHit2D hit) Parameters camera Camera2D from Vector2 to Vector2 collisionLayer uint hit RayHit2D Returns bool RayCastAllBox(Camera2D, Vector2, Vector2, CollisionObject2D[], List<Hit2D>) public static bool RayCastAllBox(Camera2D camera, Vector2 mousePosition, Vector2 size, CollisionObject2D[] exclude, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 size Vector2 exclude CollisionObject2D[] list List<Hit2D> Returns bool RayCastAllBox(Camera2D?, Vector2, Vector2, CollisionObject2D[]?, uint, List<Hit2D>) public static bool RayCastAllBox(Camera2D? camera, Vector2 mousePosition, Vector2 size, CollisionObject2D[]? exclude, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 size Vector2 exclude CollisionObject2D[] collisionLayer uint list List<Hit2D> Returns bool RayCastAllBox(Camera2D, Vector2, Vector2, List<Hit2D>) public static bool RayCastAllBox(Camera2D camera, Vector2 mousePosition, Vector2 size, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 size Vector2 list List<Hit2D> Returns bool RayCastAllBox(Camera2D, Vector2, Vector2, uint, List<Hit2D>) public static bool RayCastAllBox(Camera2D camera, Vector2 mousePosition, Vector2 size, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 size Vector2 collisionLayer uint list List<Hit2D> Returns bool RayCastAllCircle(Camera2D, Vector2, float, CollisionObject2D[], List<Hit2D>) public static bool RayCastAllCircle(Camera2D camera, Vector2 mousePosition, float radius, CollisionObject2D[] exclude, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 radius float exclude CollisionObject2D[] list List<Hit2D> Returns bool RayCastAllCircle(Camera2D?, Vector2, float, CollisionObject2D[]?, uint, List<Hit2D>) public static bool RayCastAllCircle(Camera2D? camera, Vector2 mousePosition, float radius, CollisionObject2D[]? exclude, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 radius float exclude CollisionObject2D[] collisionLayer uint list List<Hit2D> Returns bool RayCastAllCircle(Camera2D, Vector2, float, List<Hit2D>) public static bool RayCastAllCircle(Camera2D camera, Vector2 mousePosition, float radius, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 radius float list List<Hit2D> Returns bool RayCastAllCircle(Camera2D, Vector2, float, uint, List<Hit2D>) public static bool RayCastAllCircle(Camera2D camera, Vector2 mousePosition, float radius, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 radius float collisionLayer uint list List<Hit2D> Returns bool RayCastBox(Camera2D, Vector2, Vector2, out Hit2D) public static bool RayCastBox(Camera2D camera, Vector2 mousePosition, Vector2 size, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 size Vector2 hit Hit2D Returns bool RayCastBox(Camera2D, Vector2, Vector2, CollisionObject2D[], out Hit2D) public static bool RayCastBox(Camera2D camera, Vector2 mousePosition, Vector2 size, CollisionObject2D[] exclude, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 size Vector2 exclude CollisionObject2D[] hit Hit2D Returns bool RayCastBox(Camera2D, Vector2, Vector2, CollisionObject2D[]?, uint, out Hit2D) public static bool RayCastBox(Camera2D camera, Vector2 mousePosition, Vector2 size, CollisionObject2D[]? exclude, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 size Vector2 exclude CollisionObject2D[] collisionLayer uint hit Hit2D Returns bool RayCastBox(Camera2D, Vector2, Vector2, uint, out Hit2D) public static bool RayCastBox(Camera2D camera, Vector2 mousePosition, Vector2 size, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 size Vector2 collisionLayer uint hit Hit2D Returns bool RayCastCircle(Camera2D, Vector2, float, out Hit2D) public static bool RayCastCircle(Camera2D camera, Vector2 mousePosition, float radius, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 radius float hit Hit2D Returns bool RayCastCircle(Camera2D, Vector2, float, CollisionObject2D[], out Hit2D) public static bool RayCastCircle(Camera2D camera, Vector2 mousePosition, float radius, CollisionObject2D[] exclude, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 radius float exclude CollisionObject2D[] hit Hit2D Returns bool RayCastCircle(Camera2D, Vector2, float, CollisionObject2D[]?, uint, out Hit2D) public static bool RayCastCircle(Camera2D camera, Vector2 mousePosition, float radius, CollisionObject2D[]? exclude, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 radius float exclude CollisionObject2D[] collisionLayer uint hit Hit2D Returns bool RayCastCircle(Camera2D, Vector2, float, uint, out Hit2D) public static bool RayCastCircle(Camera2D camera, Vector2 mousePosition, float radius, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 radius float collisionLayer uint hit Hit2D Returns bool RayCastHit(Camera2D, Vector2, out Hit2D) public static bool RayCastHit(Camera2D camera, Vector2 mousePosition, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 hit Hit2D Returns bool RayCastHit(Camera2D, Vector2, CollisionObject2D[], out Hit2D) public static bool RayCastHit(Camera2D camera, Vector2 mousePosition, CollisionObject2D[] exclude, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 exclude CollisionObject2D[] hit Hit2D Returns bool RayCastHit(Camera2D, Vector2, CollisionObject2D[]?, uint, out Hit2D) public static bool RayCastHit(Camera2D camera, Vector2 mousePosition, CollisionObject2D[]? exclude, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 exclude CollisionObject2D[] collisionLayer uint hit Hit2D Returns bool RayCastHit(Camera2D, Vector2, uint, out Hit2D) public static bool RayCastHit(Camera2D camera, Vector2 mousePosition, uint collisionLayer, out Hit2D hit) Parameters camera Camera2D mousePosition Vector2 collisionLayer uint hit Hit2D Returns bool RayCastHitAll(Camera2D, Vector2, CollisionObject2D[], List<Hit2D>) public static bool RayCastHitAll(Camera2D camera, Vector2 mousePosition, CollisionObject2D[] exclude, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 exclude CollisionObject2D[] list List<Hit2D> Returns bool RayCastHitAll(Camera2D?, Vector2, CollisionObject2D[]?, uint, List<Hit2D>) public static bool RayCastHitAll(Camera2D? camera, Vector2 mousePosition, CollisionObject2D[]? exclude, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 exclude CollisionObject2D[] collisionLayer uint list List<Hit2D> Returns bool RayCastHitAll(Camera2D, Vector2, List<Hit2D>) public static bool RayCastHitAll(Camera2D camera, Vector2 mousePosition, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 list List<Hit2D> Returns bool RayCastHitAll(Camera2D, Vector2, uint, List<Hit2D>) public static bool RayCastHitAll(Camera2D camera, Vector2 mousePosition, uint collisionLayer, List<Hit2D> list) Parameters camera Camera2D mousePosition Vector2 collisionLayer uint list List<Hit2D> Returns bool _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.RayHit2D.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.RayHit2D.html",
    "title": "Struct RayHit2D | Cobilas Documentation",
    "keywords": "Struct RayHit2D Namespace Cobilas.GodotEngine.Utility.Physics Assembly com.cobilas.godot.utility.dll public struct RayHit2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Properties Collision public readonly Node Collision { get; } Property Value Node ID public readonly int ID { get; } Property Value int MetaData public readonly object MetaData { get; } Property Value object Name public readonly string Name { get; } Property Value string Normal public readonly Vector2 Normal { get; } Property Value Vector2 Position public readonly Vector2 Position { get; } Property Value Vector2 RID public readonly RID RID { get; } Property Value RID Operators explicit operator RayHit2D(Dictionary?) public static explicit operator RayHit2D(Dictionary? D) Parameters D Dictionary Returns RayHit2D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Physics.html",
    "title": "Namespace Cobilas.GodotEngine.Utility.Physics | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility.Physics Classes Physics2D Structs Hit2D RayHit2D"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Randomico.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Randomico.html",
    "title": "Class Randomico | Cobilas Documentation",
    "keywords": "Class Randomico Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll The class allows the creation of pseudo random numbers. public static class Randomico Inheritance object Randomico Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BooleanRandom Less than 0.5f is false, greater than 0.5f is true.(Randomico.value > 0.5f) public static bool BooleanRandom { get; } Property Value bool Returns a bool value in a pseudo-random manner. value Returns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only). public static double value { get; } Property Value double Returns a pseudo-random floating-point number between 0.0 and 1.0. Methods ByteList(byte[]) Fills the elements of a specified array of bytes with random numbers. public static void ByteList(byte[] buffer) Parameters buffer byte[] An array of bytes to contain random numbers. Exceptions ArgumentNullException buffer is null. ByteRange() Return a random integer number between min [0] and max [255] (ReadOnly). public static byte ByteRange() Returns byte Returns a pseudo-random number of integer type according to the range defined in the parameters. ByteRange(byte) Return a random integer number between min [0] and max [exclusive] (ReadOnly). public static byte ByteRange(byte max) Parameters max byte Defines the maximum range of the pseudo-random number. Returns byte Returns a pseudo-random number of integer type according to the range defined in the parameters. ByteRange(byte, byte) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static byte ByteRange(byte min, byte max) Parameters min byte Sets the minimum range of the pseudo-random number. max byte Defines the maximum range of the pseudo-random number. Returns byte Returns a pseudo-random number of integer type according to the range defined in the parameters. DecimalRange() Return a random float number between min [-79228162514264337593543950335M] and max [79228162514264337593543950335M] (ReadOnly). public static decimal DecimalRange() Returns decimal Returns a pseudo-random floating-point number according to the range defined in the parameters. DecimalRange(decimal) Return a random float number between min [-79228162514264337593543950335M] and max [exclusive] (ReadOnly). public static decimal DecimalRange(decimal max) Parameters max decimal Defines the maximum range of the pseudo-random number. Returns decimal Returns a pseudo-random floating-point number according to the range defined in the parameters. DecimalRange(decimal, decimal) Return a random float number between min [inclusive] and max [exclusive] (ReadOnly). public static decimal DecimalRange(decimal min, decimal max) Parameters min decimal Sets the minimum range of the pseudo-random number. max decimal Defines the maximum range of the pseudo-random number. Returns decimal Returns a pseudo-random floating-point number according to the range defined in the parameters. DoubleRange() Return a random float number between min [-1.7976931348623157E+308] and max [1.7976931348623157E+308] (ReadOnly). public static double DoubleRange() Returns double Returns a pseudo-random floating-point number according to the range defined in the parameters. DoubleRange(double) Return a random float number between min [-1.7976931348623157E+308] and max [exclusive] (ReadOnly). public static double DoubleRange(double max) Parameters max double Defines the maximum range of the pseudo-random number. Returns double Returns a pseudo-random floating-point number according to the range defined in the parameters. DoubleRange(double, double) Return a random float number between min [inclusive] and max [exclusive] (ReadOnly). public static double DoubleRange(double min, double max) Parameters min double Sets the minimum range of the pseudo-random number. max double Defines the maximum range of the pseudo-random number. Returns double Returns a pseudo-random floating-point number according to the range defined in the parameters. FloatRange() Return a random float number between min [-3.4028235E+38F] and max [3.4028235E+38F] (ReadOnly). public static float FloatRange() Returns float Returns a pseudo-random floating-point number according to the range defined in the parameters. FloatRange(float) Return a random float number between min [-3.4028235E+38F] and max [exclusive] (ReadOnly). public static float FloatRange(float max) Parameters max float Defines the maximum range of the pseudo-random number. Returns float Returns a pseudo-random floating-point number according to the range defined in the parameters. FloatRange(float, float) Return a random float number between min [inclusive] and max [exclusive] (ReadOnly). public static float FloatRange(float min, float max) Parameters min float Sets the minimum range of the pseudo-random number. max float Defines the maximum range of the pseudo-random number. Returns float Returns a pseudo-random floating-point number according to the range defined in the parameters. InitSeed(in int) Starts a new seed in the pseudo-random number generator. public static void InitSeed(in int seed) Parameters seed int A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. IntRange() Return a random integer number between min [-2147483648] and max [2147483647] (ReadOnly). public static int IntRange() Returns int Returns a pseudo-random number of integer type according to the range defined in the parameters. IntRange(int) Return a random integer number between min [-2147483648] and max [exclusive] (ReadOnly). public static int IntRange(int max) Parameters max int Defines the maximum range of the pseudo-random number. Returns int Returns a pseudo-random number of integer type according to the range defined in the parameters. IntRange(int, int) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static int IntRange(int min, int max) Parameters min int Sets the minimum range of the pseudo-random number. max int Defines the maximum range of the pseudo-random number. Returns int Returns a pseudo-random number of integer type according to the range defined in the parameters. LongRange() Return a random integer number between min [-9223372036854775808] and max [9223372036854775807] (ReadOnly). public static long LongRange() Returns long Returns a pseudo-random number of integer type according to the range defined in the parameters. LongRange(long) Return a random integer number between min [-9223372036854775808] and max [exclusive] (ReadOnly). public static long LongRange(long max) Parameters max long Defines the maximum range of the pseudo-random number. Returns long Returns a pseudo-random number of integer type according to the range defined in the parameters. LongRange(long, long) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static long LongRange(long min, long max) Parameters min long Sets the minimum range of the pseudo-random number. max long Defines the maximum range of the pseudo-random number. Returns long Returns a pseudo-random number of integer type according to the range defined in the parameters. SByteRange() Return a random integer number between min [-128] and max [127] (ReadOnly). public static sbyte SByteRange() Returns sbyte Returns a pseudo-random number of integer type according to the range defined in the parameters. SByteRange(sbyte) Return a random integer number between min [-128] and max [exclusive] (ReadOnly). public static sbyte SByteRange(sbyte max) Parameters max sbyte Defines the maximum range of the pseudo-random number. Returns sbyte Returns a pseudo-random number of integer type according to the range defined in the parameters. SByteRange(sbyte, sbyte) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static sbyte SByteRange(sbyte min, sbyte max) Parameters min sbyte Sets the minimum range of the pseudo-random number. max sbyte Defines the maximum range of the pseudo-random number. Returns sbyte Returns a pseudo-random number of integer type according to the range defined in the parameters. ShortRange() Return a random integer number between min [-32768] and max [32767] (ReadOnly). public static short ShortRange() Returns short Returns a pseudo-random number of integer type according to the range defined in the parameters. ShortRange(short) Return a random integer number between min [-32768] and max [exclusive] (ReadOnly). public static short ShortRange(short max) Parameters max short Defines the maximum range of the pseudo-random number. Returns short Returns a pseudo-random number of integer type according to the range defined in the parameters. ShortRange(short, short) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static short ShortRange(short min, short max) Parameters min short Sets the minimum range of the pseudo-random number. max short Defines the maximum range of the pseudo-random number. Returns short Returns a pseudo-random number of integer type according to the range defined in the parameters. ULongRange() Return a random integer number between min [0] and max [18446744073709551615] (ReadOnly). public static ulong ULongRange() Returns ulong Returns a pseudo-random number of integer type according to the range defined in the parameters. ULongRange(ulong) Return a random integer number between min [0] and max [exclusive] (ReadOnly). public static ulong ULongRange(ulong max) Parameters max ulong Defines the maximum range of the pseudo-random number. Returns ulong Returns a pseudo-random number of integer type according to the range defined in the parameters. ULongRange(ulong, ulong) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static ulong ULongRange(ulong min, ulong max) Parameters min ulong Sets the minimum range of the pseudo-random number. max ulong Defines the maximum range of the pseudo-random number. Returns ulong Returns a pseudo-random number of integer type according to the range defined in the parameters. UShortRange() Return a random integer number between min [0] and max [65535] (ReadOnly). public static ushort UShortRange() Returns ushort Returns a pseudo-random number of integer type according to the range defined in the parameters. UShortRange(ushort) Return a random integer number between min [0] and max [exclusive] (ReadOnly). public static ushort UShortRange(ushort max) Parameters max ushort Defines the maximum range of the pseudo-random number. Returns ushort Returns a pseudo-random number of integer type according to the range defined in the parameters. UShortRange(ushort, ushort) Return a random integer number between min [inclusive] and max [exclusive] (ReadOnly). public static ushort UShortRange(ushort min, ushort max) Parameters min ushort Sets the minimum range of the pseudo-random number. max ushort Defines the maximum range of the pseudo-random number. Returns ushort Returns a pseudo-random number of integer type according to the range defined in the parameters."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.RunTimeSecond.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.RunTimeSecond.html",
    "title": "Struct RunTimeSecond | Cobilas Documentation",
    "keywords": "Struct RunTimeSecond Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public readonly struct RunTimeSecond : IYieldUpdate, IYieldCoroutine Implements IYieldUpdate IYieldCoroutine Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors RunTimeSecond(double) public RunTimeSecond(double second) Parameters second double"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.Priority.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.Priority.html",
    "title": "Enum Priority | Cobilas Documentation",
    "keywords": "Enum Priority Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll Indicates the boot priority. public enum Priority : byte Fields StartBefore = 0 Starts before everyone else. StartLater = 1 Starts after everyone else."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.PriorityList.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.PriorityList.html",
    "title": "Struct PriorityList | Cobilas Documentation",
    "keywords": "Struct PriorityList Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll Represents a list of RunTimeInitialization priorities. public struct PriorityList : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Methods Add(int, Node) Adds items to the priority list. public PriorityList Add(int priority, Node node) Parameters priority int Object execution priority. node Node The object to be added to the list. Returns PriorityList The method will return a PriorityList object with its modified priority list. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ReorderList() Sort the priority list according to the priority of the list items. public void ReorderList() Run(Node) Execute your priority list. public readonly void Run(Node root) Parameters root Node The parent node where nodes will be added to start their priority execution."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTime.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTime.html",
    "title": "Struct RunTime | Cobilas Documentation",
    "keywords": "Struct RunTime Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll Provides RunTime values ​​and functions. public readonly struct RunTime Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields DeltaTime The interval in seconds from the last frame to the current one (Read Only). public const float DeltaTime = 0.33333334 Field Value float FixedDeltaTime The interval in seconds of in-game time at which physics and other fixed frame rate updates are performed. public const float FixedDeltaTime = 0.02 Field Value float"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitialization.PriorityList.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitialization.PriorityList.html",
    "title": "Struct RunTimeInitialization.PriorityList | Cobilas Documentation",
    "keywords": "Struct RunTimeInitialization.PriorityList Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll public struct RunTimeInitialization.PriorityList : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Methods Add(int, Node) public RunTimeInitialization.PriorityList Add(int index, Node node) Parameters index int node Node Returns RunTimeInitialization.PriorityList Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Run(Node) public readonly void Run(Node root) Parameters root Node"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitialization.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitialization.html",
    "title": "Class RunTimeInitialization | Cobilas Documentation",
    "keywords": "Class RunTimeInitialization Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll Responsible for initializing other classes marked with the RunTimeInitializationClassAttribute attribute. public class RunTimeInitialization : Node, IDisposable Inheritance object Object Node RunTimeInitialization Implements IDisposable Inherited Members Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Input(InputEvent) Node._PhysicsProcess(float) Node._Process(float) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Examples The RunTimeInitialization class allows you to automate the Project>Project Settings>AutoLoad option. To use the RunTimeInitialization class, you must create a class and make it inherit RunTimeInitialization./// using Cobilas.GodotEngine.Utility.Runtime; // The name of the class is up to you. public class RunTimeProcess : RunTimeInitialization {} And remember to add the class that inherits RunTimeInitialization in Project>Project Settings>AutoLoad. Remembering that the RunTimeInitialization class uses the virtual method _Ready() to perform the initialization of other classes. And to initialize other classes along with the RunTimeInitialization class, the class must inherit the Godot.Node class or some class that inherits Godot.Node and use the RunTimeInitializationClassAttribute attribute. using Godot; using Cobilas.GodotEngine.Utility.Runtime; [RunTimeInitializationClass] public class ClassTest : Node {} Fields DeltaTime The interval in seconds from the last frame to the current one (Read Only) [Obsolete(\"Use RunTime.DeltaTime\")] public const float DeltaTime = 0.33333334 Field Value float FixedDeltaTime The interval in seconds of in-game time at which physics and other fixed frame rate updates are performed. [Obsolete(\"Use RunTime.FixedDeltaTime\")] public const float FixedDeltaTime = 0.02 Field Value float Methods _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitializationClassAttribute.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.RunTimeInitializationClassAttribute.html",
    "title": "Class RunTimeInitializationClassAttribute | Cobilas Documentation",
    "keywords": "Class RunTimeInitializationClassAttribute Namespace Cobilas.GodotEngine.Utility.Runtime Assembly com.cobilas.godot.utility.dll This attribute marks which classes will be called by RunTimeInitialization. [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class RunTimeInitializationClassAttribute : Attribute, _Attribute Inheritance object Attribute RunTimeInitializationClassAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Examples Simple example of class demarcation to be called by RunTimeInitialization. using Godot; using Cobilas.GodotEngine.Utility.Runtime; [RunTimeInitializationClass] public class ClassTest : Node {} Constructors RunTimeInitializationClassAttribute() Instance the RunTimeInitializationClassAttribute attribute. By default the priority type is StartBefore. By default the execution priority is 0. By default the priority name and the class name that the attribute is associated with. public RunTimeInitializationClassAttribute() RunTimeInitializationClassAttribute(Priority) Instance the RunTimeInitializationClassAttribute attribute. By default the execution priority is 0. By default the priority name and the class name that the attribute is associated with. public RunTimeInitializationClassAttribute(Priority bootPriority) Parameters bootPriority Priority The type of priority. RunTimeInitializationClassAttribute(Priority, string?) Instance the RunTimeInitializationClassAttribute attribute. By default the execution priority is 0. public RunTimeInitializationClassAttribute(Priority bootPriority, string? name) Parameters bootPriority Priority The type of priority. name string The name of the priority. RunTimeInitializationClassAttribute(Priority, string?, int) Instance the RunTimeInitializationClassAttribute attribute. public RunTimeInitializationClassAttribute(Priority bootPriority, string? name, int subPriority) Parameters bootPriority Priority The type of priority. name string The name of the priority. subPriority int The execution priority. RunTimeInitializationClassAttribute(string) Instance the RunTimeInitializationClassAttribute attribute. By default the priority type is StartBefore. By default the execution priority is 0. public RunTimeInitializationClassAttribute(string name) Parameters name string The name of the priority. RunTimeInitializationClassAttribute(string, int) Instance the RunTimeInitializationClassAttribute attribute. By default the priority type is StartBefore. public RunTimeInitializationClassAttribute(string name, int subPriority) Parameters name string The name of the priority. subPriority int The execution priority. Properties BootPriority The type of priority. public Priority BootPriority { get; } Property Value Priority Returns the type of priority that will be executed. ClassName The name of the priority. public string ClassName { get; } Property Value string Returns the name of the priority that will be executed. SubPriority The execution priority. public int SubPriority { get; } Property Value int Returns the priority execution level."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Runtime.html",
    "title": "Namespace Cobilas.GodotEngine.Utility.Runtime | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility.Runtime Classes RunTimeInitialization Responsible for initializing other classes marked with the RunTimeInitializationClassAttribute attribute. RunTimeInitializationClassAttribute This attribute marks which classes will be called by RunTimeInitialization. Structs PriorityList Represents a list of RunTimeInitialization priorities. RunTime Provides RunTime values ​​and functions. Enums Priority Indicates the boot priority."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.Scene.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.Scene.html",
    "title": "Struct Scene | Cobilas Documentation",
    "keywords": "Struct Scene Namespace Cobilas.GodotEngine.Utility.Scene Assembly com.cobilas.godot.utility.dll public struct Scene Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Scene(string, int) public Scene(string scenePath, int index) Parameters scenePath string index int Properties Index public readonly int Index { get; } Property Value int Name public readonly string Name { get; } Property Value string NameWithoutExtension public readonly string NameWithoutExtension { get; } Property Value string ScenePath public readonly string ScenePath { get; } Property Value string"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.SceneManager.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.SceneManager.html",
    "title": "Class SceneManager | Cobilas Documentation",
    "keywords": "Class SceneManager Namespace Cobilas.GodotEngine.Utility.Scene Assembly com.cobilas.godot.utility.dll [RunTimeInitializationClass(\"SceneManager\")] public class SceneManager : Node, IDisposable Inheritance object Object Node SceneManager Implements IDisposable Inherited Members Node.NotificationEnterTree Node.NotificationExitTree Node.NotificationMovedInParent Node.NotificationReady Node.NotificationPaused Node.NotificationUnpaused Node.NotificationPhysicsProcess Node.NotificationProcess Node.NotificationParented Node.NotificationUnparented Node.NotificationInstanced Node.NotificationDragBegin Node.NotificationDragEnd Node.NotificationPathChanged Node.NotificationInternalProcess Node.NotificationInternalPhysicsProcess Node.NotificationPostEnterTree Node.NotificationResetPhysicsInterpolation Node.NotificationWmMouseEnter Node.NotificationWmMouseExit Node.NotificationWmFocusIn Node.NotificationWmFocusOut Node.NotificationWmQuitRequest Node.NotificationWmGoBackRequest Node.NotificationWmUnfocusRequest Node.NotificationOsMemoryWarning Node.NotificationTranslationChanged Node.NotificationWmAbout Node.NotificationCrash Node.NotificationOsImeUpdate Node.NotificationAppResumed Node.NotificationAppPaused Node.GetNode<T>(NodePath) Node.GetNodeOrNull<T>(NodePath) Node.GetChild<T>(int) Node.GetChildOrNull<T>(int) Node.GetOwner<T>() Node.GetOwnerOrNull<T>() Node.GetParent<T>() Node.GetParentOrNull<T>() Node._EnterTree() Node._ExitTree() Node._GetConfigurationWarning() Node._Input(InputEvent) Node._PhysicsProcess(float) Node._Process(float) Node._UnhandledInput(InputEvent) Node._UnhandledKeyInput(InputEventKey) Node.AddChildBelowNode(Node, Node, bool) Node.SetName(string) Node.GetName() Node.AddChild(Node, bool) Node.RemoveChild(Node) Node.GetChildCount() Node.GetChildren() Node.GetChild(int) Node.HasNode(NodePath) Node.GetNode(NodePath) Node.GetNodeOrNull(NodePath) Node.GetParent() Node.FindNode(string, bool, bool) Node.FindParent(string) Node.HasNodeAndResource(NodePath) Node.GetNodeAndResource(NodePath) Node.IsInsideTree() Node.IsAParentOf(Node) Node.IsGreaterThan(Node) Node.GetPath() Node.GetPathTo(Node) Node.AddToGroup(string, bool) Node.RemoveFromGroup(string) Node.IsInGroup(string) Node.MoveChild(Node, int) Node.GetGroups() Node.Raise() Node.SetOwner(Node) Node.GetOwner() Node.RemoveAndSkip() Node.GetIndex() Node.PrintTree() Node.PrintTreePretty() Node.SetFilename(string) Node.GetFilename() Node.PropagateNotification(int) Node.PropagateCall(string, Array, bool) Node.SetPhysicsProcess(bool) Node.GetPhysicsProcessDeltaTime() Node.IsPhysicsProcessing() Node.GetProcessDeltaTime() Node.SetProcess(bool) Node.SetProcessPriority(int) Node.GetProcessPriority() Node.IsProcessing() Node.SetProcessInput(bool) Node.IsProcessingInput() Node.SetProcessUnhandledInput(bool) Node.IsProcessingUnhandledInput() Node.SetProcessUnhandledKeyInput(bool) Node.IsProcessingUnhandledKeyInput() Node.SetPauseMode(Node.PauseModeEnum) Node.GetPauseMode() Node.CanProcess() Node.PrintStrayNodes() Node.GetPositionInParent() Node.SetDisplayFolded(bool) Node.IsDisplayedFolded() Node.SetProcessInternal(bool) Node.IsProcessingInternal() Node.SetPhysicsProcessInternal(bool) Node.IsPhysicsProcessingInternal() Node.SetPhysicsInterpolationMode(Node.PhysicsInterpolationModeEnum) Node.GetPhysicsInterpolationMode() Node.IsPhysicsInterpolated() Node.IsPhysicsInterpolatedAndEnabled() Node.ResetPhysicsInterpolation() Node.GetTree() Node.CreateTween() Node.Duplicate(int) Node.ReplaceBy(Node, bool) Node.SetSceneInstanceLoadPlaceholder(bool) Node.GetSceneInstanceLoadPlaceholder() Node.GetViewport() Node.QueueFree() Node.RequestReady() Node.SetNetworkMaster(int, bool) Node.GetNetworkMaster() Node.IsNetworkMaster() Node.GetMultiplayer() Node.GetCustomMultiplayer() Node.SetCustomMultiplayer(MultiplayerAPI) Node.RpcConfig(string, MultiplayerAPI.RPCMode) Node.RsetConfig(string, MultiplayerAPI.RPCMode) Node.SetUniqueNameInOwner(bool) Node.IsUniqueNameInOwner() Node.Rpc(string, params object[]) Node.RpcUnreliable(string, params object[]) Node.RpcId(int, string, params object[]) Node.RpcUnreliableId(int, string, params object[]) Node.Rset(string, object) Node.RsetId(int, string, object) Node.RsetUnreliable(string, object) Node.RsetUnreliableId(int, string, object) Node.UpdateConfigurationWarning() Node.EditorDescription Node._ImportPath Node.PauseMode Node.PhysicsInterpolationMode Node.Name Node.UniqueNameInOwner Node.Filename Node.Owner Node.Multiplayer Node.CustomMultiplayer Node.ProcessPriority Object.NotificationPostinitialize Object.NotificationPredelete Object.IsInstanceValid(Object) Object.WeakRef(Object) Object.Dispose() Object.Dispose(bool) Object.ToString() Object.ToSignal(Object, string) Object._Get(string) Object._GetPropertyList() Object._Notification(int) Object._Set(string, object) Object.Free() Object.GetClass() Object.IsClass(string) Object.Set(string, object) Object.Get(string) Object.SetIndexed(NodePath, object) Object.GetIndexed(NodePath) Object.GetPropertyList() Object.GetMethodList() Object.Notification(int, bool) Object.GetInstanceId() Object.SetScript(Reference) Object.GetScript() Object.SetMeta(string, object) Object.RemoveMeta(string) Object.GetMeta(string, object) Object.HasMeta(string) Object.GetMetaList() Object.AddUserSignal(string, Array) Object.HasUserSignal(string) Object.EmitSignal(string, params object[]) Object.Call(string, params object[]) Object.CallDeferred(string, params object[]) Object.SetDeferred(string, object) Object.Callv(string, Array) Object.HasMethod(string) Object.HasSignal(string) Object.GetSignalList() Object.GetSignalConnectionList(string) Object.GetIncomingConnections() Object.Connect(string, Object, string, Array, uint) Object.Disconnect(string, Object, string) Object.IsConnected(string, Object, string) Object.SetBlockSignals(bool) Object.IsBlockingSignals() Object.PropertyListChangedNotify() Object.SetMessageTranslation(bool) Object.CanTranslateMessages() Object.Tr(string) Object.IsQueuedForDeletion() Object.NativeInstance Object.DynamicObject object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Node_GD_CB_Extension.FindNodeByName(Node, string) Node_GD_CB_Extension.FindNodeByName(Node, string, bool) Node_GD_CB_Extension.FindNodeByName(Node, string, Type, bool) Node_GD_CB_Extension.FindNodeByName<T>(Node, string) Node_GD_CB_Extension.FindNodeByName<T>(Node, string, bool) Node_GD_CB_Extension.FindNodes(Node, Type) Node_GD_CB_Extension.FindNodes(Node, Type, bool) Node_GD_CB_Extension.FindNodes<T>(Node) Node_GD_CB_Extension.FindNodes<T>(Node, bool) Node_GD_CB_Extension.GetNodePosition(Node) Node_GD_CB_Extension.GetNodeRotation(Node) Node_GD_CB_Extension.GetNodeScale(Node) Node_GD_CB_Extension.Print(Node, params object[]) Node_GD_CB_Extension.SetNodePosition(Node, Vector3D) Node_GD_CB_Extension.SetNodeRotation(Node, Vector3D) Node_GD_CB_Extension.SetNodeScale(Node, Vector3D) Fields LoadedScene public static Action<Scene>? LoadedScene Field Value Action<Scene> UnloadedScene public static Action<Scene>? UnloadedScene Field Value Action<Scene> Properties CurrentScene public static Scene CurrentScene { get; } Property Value Scene CurrentSceneNode public static Node? CurrentSceneNode { get; } Property Value Node Methods DontDestroyOnLoad(Node) public static void DontDestroyOnLoad(Node obj) Parameters obj Node LoadScene(int) public static bool LoadScene(int index) Parameters index int Returns bool LoadScene(string) public static bool LoadScene(string name) Parameters name string Returns bool _Ready() Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their Godot.Node._Ready() callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the Godot.Node.NotificationReady notification in _Notification(int). See also the onready keyword for variables. Usually used for initialization. For even earlier initialization, may be used. See also Godot.Node._EnterTree(). Note: Godot.Node._Ready() may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with Godot.Node.RequestReady(), which may be called anywhere before adding the node again. public override void _Ready()"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Scene.html",
    "title": "Namespace Cobilas.GodotEngine.Utility.Scene | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility.Scene Classes SceneManager Structs Scene"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Screen.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.Screen.html",
    "title": "Class Screen | Cobilas Documentation",
    "keywords": "Class Screen Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll public static class Screen Inheritance object Screen Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties CurrentResolution public static Vector2 CurrentResolution { get; } Property Value Vector2 Mode public static ScreenMode Mode { get; set; } Property Value ScreenMode Resolutions public static Vector2[] Resolutions { get; } Property Value Vector2[] Methods AddResolution(int, int) public static void AddResolution(int width, int height) Parameters width int height int SetResolution(Vector2) public static void SetResolution(Vector2 size) Parameters size Vector2 SetResolution(Vector2, ScreenMode) public static void SetResolution(Vector2 size, ScreenMode mode) Parameters size Vector2 mode ScreenMode SetResolution(int, int) public static void SetResolution(int width, int height) Parameters width int height int SetResolution(int, int, ScreenMode) public static void SetResolution(int width, int height, ScreenMode mode) Parameters width int height int mode ScreenMode"
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.ScreenMode.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.ScreenMode.html",
    "title": "Enum ScreenMode | Cobilas Documentation",
    "keywords": "Enum ScreenMode Namespace Cobilas.GodotEngine.Utility Assembly com.cobilas.godot.utility.dll Represents screen modes. public enum ScreenMode : byte Fields Borderless = 1 This mode will maintain a borderless, non-resizable window. Fullscreen = 2 This mode will make the screen exclusively for the application. Resizable = 0 This mode enables the screen in resizable windowed mode."
  },
  "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.html": {
    "href": "com.cobilas.godot.utility.api/Cobilas.GodotEngine.Utility.html",
    "title": "Namespace Cobilas.GodotEngine.Utility | Cobilas Documentation",
    "keywords": "Namespace Cobilas.GodotEngine.Utility Classes Coroutine CoroutineManager GDDirectory GDFeature GDFile GDFileBase GDIONull Gizmos Gizmos are used to give visual debugging or setup aids in the Scene view. Randomico The class allows the creation of pseudo random numbers. Screen Structs FixedRunTimeSecond RunTimeSecond Interfaces IYieldCoroutine IYieldFixedUpdate IYieldUpdate IYieldVolatile Enums GDFileAttributes Represents the file attributes. ScreenMode Represents screen modes."
  },
  "com.cobilas.godot.utility.api/Godot.Camera2D_GD_CB_Extension.html": {
    "href": "com.cobilas.godot.utility.api/Godot.Camera2D_GD_CB_Extension.html",
    "title": "Class Camera2D_GD_CB_Extension | Cobilas Documentation",
    "keywords": "Class Camera2D_GD_CB_Extension Namespace Godot Assembly com.cobilas.godot.utility.dll public static class Camera2D_GD_CB_Extension Inheritance object Camera2D_GD_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ScreenToWorldPoint(Camera2D, Vector2) public static Vector2 ScreenToWorldPoint(this Camera2D C, Vector2 mousePosition) Parameters C Camera2D mousePosition Vector2 Returns Vector2 WorldToScreenPoint(Camera2D, Vector2) public static Vector2 WorldToScreenPoint(this Camera2D C, Vector2 position) Parameters C Camera2D position Vector2 Returns Vector2"
  },
  "com.cobilas.godot.utility.api/Godot.Node_GD_CB_Extension.html": {
    "href": "com.cobilas.godot.utility.api/Godot.Node_GD_CB_Extension.html",
    "title": "Class Node_GD_CB_Extension | Cobilas Documentation",
    "keywords": "Class Node_GD_CB_Extension Namespace Godot Assembly com.cobilas.godot.utility.dll public static class Node_GD_CB_Extension Inheritance object Node_GD_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FindNodeByName(Node, string) Get a node from name. By default, the method looks for a node of type node.(Type typeNode = typeof(Godot.Node)) By default, the method searches recursively.(bool recusive = true) public static Node? FindNodeByName(this Node N, string name) Parameters N Node name string The node name Returns Node FindNodeByName(Node, string, bool) Get a node from name. By default, the method looks for a node of type node.(Type typeNode = typeof(Godot.Node)) public static Node? FindNodeByName(this Node N, string name, bool recusive) Parameters N Node name string The node name recusive bool Also look for your children. Returns Node FindNodeByName(Node, string, Type, bool) Get a node from name. public static Node? FindNodeByName(this Node N, string name, Type typeNode, bool recusive) Parameters N Node name string The node name typeNode Type The type to look for. recusive bool Also look for your children. Returns Node FindNodeByName<T>(Node, string) Get a node from name. By default, the method searches recursively.(bool recusive = true) public static T FindNodeByName<T>(this Node N, string name) where T : Node Parameters N Node name string The node name Returns T Type Parameters T FindNodeByName<T>(Node, string, bool) Get a node from name. public static T FindNodeByName<T>(this Node N, string name, bool recusive) where T : Node Parameters N Node name string The node name recusive bool Also look for your children. Returns T Type Parameters T The type to look for. FindNodes(Node, Type) Get the nodes from a type. By default, the method searches recursively.(bool recusive = true) public static Node[] FindNodes(this Node N, Type typeNode) Parameters N Node typeNode Type The type to look for. Returns Node[] Returns a list of nodes. FindNodes(Node, Type, bool) Get the nodes from a type. public static Node[] FindNodes(this Node N, Type typeNode, bool recusive) Parameters N Node typeNode Type The type to look for. recusive bool Also look for your children. Returns Node[] Returns a list of nodes. FindNodes<T>(Node) Get the nodes from a type. By default, the method searches recursively.(bool recusive = true) public static T[] FindNodes<T>(this Node N) where T : Node Parameters N Node Returns T[] Returns a list of nodes. Type Parameters T The type to look for. FindNodes<T>(Node, bool) Get the nodes from a type. public static T[] FindNodes<T>(this Node N, bool recusive) where T : Node Parameters N Node recusive bool Also look for your children. Returns T[] Returns a list of nodes. Type Parameters T The type to look for. GetNodePosition(Node) public static Vector3D GetNodePosition(this Node N) Parameters N Node Returns Vector3D GetNodeRotation(Node) public static Vector3D GetNodeRotation(this Node N) Parameters N Node Returns Vector3D GetNodeScale(Node) public static Vector3D GetNodeScale(this Node N) Parameters N Node Returns Vector3D Print(Node, params object[]) public static void Print(this Node N, params object[] args) Parameters N Node args object[] SetNodePosition(Node, Vector3D) public static void SetNodePosition(this Node N, Vector3D position) Parameters N Node position Vector3D SetNodeRotation(Node, Vector3D) public static void SetNodeRotation(this Node N, Vector3D rotation) Parameters N Node rotation Vector3D SetNodeScale(Node, Vector3D) public static void SetNodeScale(this Node N, Vector3D scale) Parameters N Node scale Vector3D"
  },
  "com.cobilas.godot.utility.api/Godot.Rect2_GD_CB_Extension.html": {
    "href": "com.cobilas.godot.utility.api/Godot.Rect2_GD_CB_Extension.html",
    "title": "Class Rect2_GD_CB_Extension | Cobilas Documentation",
    "keywords": "Class Rect2_GD_CB_Extension Namespace Godot Assembly com.cobilas.godot.utility.dll public static class Rect2_GD_CB_Extension Inheritance object Rect2_GD_CB_Extension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Bottom(Rect2) public static float Bottom(this Rect2 R) Parameters R Rect2 Returns float Center(Rect2) [Obsolete(\"Use Rect2.GetCenter()\")] public static Vector2 Center(this Rect2 R) Parameters R Rect2 Returns Vector2 Left(Rect2) public static float Left(this Rect2 R) Parameters R Rect2 Returns float Right(Rect2) public static float Right(this Rect2 R) Parameters R Rect2 Returns float Top(Rect2) public static float Top(this Rect2 R) Parameters R Rect2 Returns float"
  },
  "com.cobilas.godot.utility.api/Godot.html": {
    "href": "com.cobilas.godot.utility.api/Godot.html",
    "title": "Namespace Godot | Cobilas Documentation",
    "keywords": "Namespace Godot Classes Camera2D_GD_CB_Extension Node_GD_CB_Extension Rect2_GD_CB_Extension"
  },
  "core-net4x-getting-started.html": {
    "href": "core-net4x-getting-started.html",
    "title": "Cobilas Core | Cobilas Documentation",
    "keywords": "Cobilas Core Descripition Cobilas Core Net4x is a utility library for CSharp. Json (namespace:Cobilas.IO.Serialization.Json) Only present in the NuGet version. The static class Json grants static read and write functions. JsonContractResolver Used by JsonSerializer to resolve a JsonContract for a given Type. Furthermore, JsonContractResolver determines how the fields of an Object will be serialized. ATLF(Arquivo de tradução de leitura facil) ATLF (Easy to Read Translation File) can be used to create and load translations for apps. #>Header The use of the header is not mandatory.<# #! version:/*std:1.0*/ #! encoding:/*utf-8*/ #> Comment <# #> ATLF format(1.0) <# #> Uni-line marking <# #! Tag1:/*value1*/ #> Multi-line marking <# #! Tag2:/* value1 value2 value3 value4 */ How to read ATLF static void Main(string[] args) { using ATLFReader reader = ATLFReader.Create(@\"C:\\folder1\\file.txt\"); reader.Reader(); Console.WriteLine($\"tag.value.1:{reader.GetTag(\"tag.value.1\")}\"); Console.WriteLine($\"tag.value.2:{reader.GetTag(\"tag.value.2\")}\"); Console.WriteLine($\"tag.value.3:{reader.GetTag(\"tag.value.3\")}\"); } The other reading functions. The ATLFNode[]:ATLFReader.GetHeader() function allows you to get the header tags. The ATLFNode[]:ATLFReader.GetAllComments() function allows you to get all comments. The ATLFNode[]:ATLFReader.GetTagGroup(string path) function allows you to obtain tags that belong to the same path. /*C:\\folder1\\file.txt * #! version:/*std:1.0* / * #! encoding:/*utf-8* / * * #! tag.value.cop1:/*value1* / * #! tag.value.map.cop1:/*value1* / * #! tag.value.map.cop2:/*value1* / * #! tag.value.cop2:/*value1* / * #! tag.value.cop3:/*value1* / */ static void Main(string[] args) { using ATLFReader reader = ATLFReader.Create(@\"C:\\folder1\\file.txt\"); reader.Reader(); foreach(var item in reader.GetTagGroup(\"tag.value.map\")) Console.WriteLine(item); } How to write ATLF static void Main(string[] args) { using ATLFWriter writer = ATLFWriter.Create(File.OpenWrite(@\"C:\\folder1\\file.txt\")); writer.WriteHeader();//The header is not mandatory but if you add a header, call this function first. writer.WriteComment(\"my tag1\"); writer.WriteNode(\"tag1\", \"value1\"); writer.WriteWhitespace(\"\\r\\n\");//This function is called automatically when the `Indent` property is `true`. By default the `Indent` property is `true`. writer.WriteComment(\"my tag2\"); writer.WriteNode(\"tag2\", \"value2\"); writer.WriteWhitespace(2, \"\\r\\n\");//This function is called automatically when the `Indent` property is `true`. By default the `Indent` property is `true`. writer.WriteComment(\"my tag3\"); writer.WriteNode(\"tag3\", \"value3\"); } Encoders and decoders Regarding encoders and decoders, ATLF allows the creation of customized encoders and decoders. To use a custom encoder or decoder, assign a version to your custom encoder or decoder using the Version property and then assign the version of the custom encoder or decoder in the TargetVersion property of the ATLFWriter and ATLFReader classes. Creating a custom encoding class To create a custom encoding class, the class must inherit the ATLFVS10Encoding class. Creating a custom decoding class To create a custom decoding class, the class must inherit the ATLFVS10Decoding class. Cobilas.Core.Net4x is on nuget.org To include the package, open the .csproj file and add it. <ItemGroup> <PackageReference Include=\"Cobilas.Core.Net4x\" Version=\"1.6.1\" /> </ItemGroup> Or use command line. dotnet add package Cobilas.Core.Net4x --version 1.6.1 Cobilas.Core.Net4x is on NPM Include in npm package \"dependencies\": { \"com.cobilas.unity.core.net4x\":\"1.6.1\" } Or use command line. npm i com.cobilas.unity.core.net4x"
  },
  "gd-utility-getting-started.html": {
    "href": "gd-utility-getting-started.html",
    "title": "Cobilas Godot Utility | Cobilas Documentation",
    "keywords": "Cobilas Godot Utility Descripition The package contains utility classes in csharp for godot engine(Godot3.5) RunTimeInitialization (namespace: Cobilas.GodotEngine.Utility.Runtime) The RunTimeInitialization class allows you to automate the Project>Project Settings>AutoLoad option. To use the RunTimeInitialization class, you must create a class and make it inherit RunTimeInitialization. using Cobilas.GodotEngine.Utility.Runtime; //The name of the class is up to you. public class RunTimeProcess : RunTimeInitialization {} And remember to add the class that inherits RunTimeInitialization in Project>Project Settings>AutoLoad. Remembering that the RunTimeInitialization class uses the virtual method _Ready() to perform the initialization of other classes. And to initialize other classes along with the RunTimeInitialization class, the class must inherit the Godot.Node class or some class that inherits Godot.Node and use the RunTimeInitializationClassAttribute attribute. using Godot; using Cobilas.GodotEngine.Utility.Runtime; [RunTimeInitializationClass] public class ClassTest : Node {} RunTimeInitializationClass /* bootPriority: Represents the boot order { (enum Priority)values StartBefore, StartLater } name:The name of the object subPriority: And the execution priority order. */ [RunTimeInitializationClass(Priority bootPriority, string name, int subPriority)] [RunTimeInitializationClass(Priority bootPriority)] [RunTimeInitializationClass(Priority bootPriority, string name)] [RunTimeInitializationClass(string name, int subPriority)] [RunTimeInitializationClass(string name)] [RunTimeInitializationClass()] The Cobilas Godot Utility is on nuget.org To include the package, open the .csproj file and add it. <ItemGroup> <PackageReference Include=\"Cobilas.Godot.Utility\" Version=\"1.7.0\" /> </ItemGroup> Or use command line. dotnet add package Cobilas.Godot.Utility --version 1.7.0"
  },
  "index.html": {
    "href": "index.html",
    "title": "Documentations | Cobilas Documentation",
    "keywords": "Documentations Cobilas Core NET4x Getting Started API Godot Utility Getting Started API"
  }
}